{
"version":3,
"file":"build/v86_all.js",
"lineCount":562,
"mappings":"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C9FahlE,CD8FN+9C,EAAA,C7BtLSqM,C6BsLT,CAEX36C,GAAA,CChGiBzP,CDgGjB,CAA2BgwD,CAAA,CChGVhwD,CDgGU,CAAwB,GAAxB,CAA3B,CAAwD,EAAxD,CAEAgvD,EAAA,CClGiBhvD,CDkGjB,CClGiBA,CDkGL+9C,EAAA,C7B9LQ4D,C6B8LR,CAAZ,CACAqN,EAAA,CCnGiBhvD,CDmGjB,CCnGiBA,CDmGL+9C,EAAA,C7B9LQwO,C6B8LR,CAAZ,CACAyC,EAAA,CCpGiBhvD,CDoGjB,CCpGiBA,CDoGL+9C,EAAA,C7B9LQ0O,C6B8LR,CAAZ,CACAuC,EAAA,CCrGiBhvD,CDqGjB,CCrGiBA,CDqGL+9C,EAAA,C7B9LQ6D,C6B8LR,CAAZ,CACAoN,EAAA,CCtGiBhvD,CDsGjB,CAAYglE,CAAZ,CACAhW,EAAA,CCvGiBhvD,CDuGjB,CCvGiBA,CDuGL+9C,EAAA,C7B9LQ8O,C6B8LR,CAAZ,CACAmC,EAAA,CCxGiBhvD,CDwGjB,CCxGiBA,CDwGL+9C,EAAA,C7B9LQgP,C6B8LR,CAAZ,CACAiC,EAAA,CCzGiBhvD,CDyGjB,CCzGiBA,CDyGL+9C,EAAA,C7B9LQkP,C6B8LR,CAAZ,CCzGe,CACnBwY,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAAzlE,CAAA,CAAO,CD6GfgmD,EAAA,CC7GiBhmD,CD6GjB,CAA4BgwD,CAAA,CC7GXhwD,CD6GW,CAAuB,CAAvB,CAA5B,CACAgmD,GAAA,CC9GiBhmD,CD8GjB,CAA4BgwD,CAAA,CC9GXhwD,CD8GW,CAAuB,EAAvB,CAA5B,CC9GiBA,EDgHjBk+C,EAAA,C7B7LmBmc,E6B6LnB,CAAA,CAAqBkO,EAAA,CChHJvoE,CDgHI,CChHJA,EDiHjBk+C,EAAA,C7B/LmBkc,E6B+LnB,CAAA,CAAqBmO,EAAA,CCjHJvoE,CDiHI,CCjHJA,EDkHjBk+C,EAAA,C7BjMmBqc,E6BiMnB,CAAA,CAAqBgO,EAAA,CClHJvoE,CDkHI,CACrBmwD,EAAA,CCnHiBnwD,CDmHjB,CAAsB,CAAtB,CCnHiBA,EDoHjBk+C,EAAA,C7BrMmBic,C6BqMnB,CAAA,C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",
"sources":["lib/closure-base.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/string/endswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/math/trunc] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] ","lib/9p.js","lib/filesystem.js","src/browser/screen.js","src/browser/main.js","src/browser/starter.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/acpi.js","src/apic.js","src/ioapic.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","lib/marshall.js","lib/utf8.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/dummy_screen.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) ||\n      !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      // goog.require only return a value with-in goog.module files.\n      return name in goog.loadedModules_ ?\n          goog.loadedModules_[name] :\n          goog.getObjectByName(name);\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareTestMethods: boolean\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Indicate that a module's exports that are known test methods should\n * be copied to the global object.  This makes the test methods visible to\n * test runners that inspect the global object.\n *\n * TODO(johnlenz): Make the test framework aware of goog.module so\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\n * to minimize boiler plate.\n * @suppress {missingProvide}\n * @deprecated This approach does not translate to ES6 module syntax, instead\n *    use goog.testing.testSuite to declare the test methods.\n */\ngoog.module.declareTestMethods = function() {\n  if (!goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareTestMethods must be called from ' +\n        'within a goog.module');\n  }\n  goog.moduleLoaderState_.declareTestMethods = true;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\n *     a module as declared by goog.module.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.pathIsModule[path] = !!opt_isModule;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      } else {\n        return null;\n      }\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default, the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @private {!Object<string, boolean>}\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   pathIsModule: !Object<string, boolean>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    pathIsModule: {}, // 1 to 1\n\n    nameToPath: {}, // 1 to 1\n\n    requires: {}, // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {}, // Used to keep track of script files we have written.\n\n    deferred: {} // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('SCRIPT');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @const @private {boolean} */\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\n      goog.global.document.all;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of the module.\n   * @param {string} src Script source URL.\n   * @private\n   */\n  goog.importModule_ = function(src) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\n\n    if (goog.importScript_('', bootstrap)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' +\n          scriptText +\n          '\\n' + // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) &&\n        goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && goog.dependencies_.pathIsModule[path]) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * @param {function(?):?|string} moduleDef The module definition.\n   */\n  goog.loadModule = function(moduleDef) {\n    // NOTE: we allow function definitions to be either in the from\n    // of a string to eval (which keeps the original source intact) or\n    // in a eval forbidden environment (CSP) we allow a function definition\n    // which in its body must call {@code goog.module}, and return the exports\n    // of the module.\n    var previousState = goog.moduleLoaderState_;\n    try {\n      goog.moduleLoaderState_ = {\n        moduleName: undefined, declareTestMethods: false};\n      var exports;\n      if (goog.isFunction(moduleDef)) {\n        exports = moduleDef.call(goog.global, {});\n      } else if (goog.isString(moduleDef)) {\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\n      } else {\n        throw Error('Invalid module definition');\n      }\n\n      var moduleName = goog.moduleLoaderState_.moduleName;\n      if (!goog.isString(moduleName) || !moduleName) {\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n      }\n\n      // Don't seal legacy namespaces as they may be uses as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\n        Object.seal(exports);\n      }\n\n      goog.loadedModules_[moduleName] = exports;\n      if (goog.moduleLoaderState_.declareTestMethods) {\n        for (var entry in exports) {\n          if (entry.indexOf('test', 0) === 0 ||\n              entry == 'tearDown' ||\n              entry == 'setUp' ||\n              entry == 'setUpPage' ||\n              entry == 'tearDownPage') {\n            goog.global[entry] = exports[entry];\n          }\n        }\n      }\n    } finally {\n      goog.moduleLoaderState_ = previousState;\n    }\n  };\n\n\n  /**\n   * @param {string} source\n   * @return {!Object}\n   * @private\n   */\n  goog.loadModuleFromSource_ = function(source) {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    var doc = goog.global.document;\n    var scriptEl = doc.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var isOldIE = goog.IS_OLD_IE_;\n\n      if (opt_sourceText === undefined) {\n        if (!isOldIE) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' +\n                  src + '\"' + state + '></' + 'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            opt_sourceText +\n            '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {!HTMLScriptElement} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    var loadingModule = false;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        if (!deps.pathIsModule[path]) {\n          goog.importScript_(goog.basePath + path);\n        } else {\n          loadingModule = true;\n          goog.importModule_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (i && components[i] == '..' &&\n        components[i - 1] && components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {string} File contents.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    var xhr = new goog.global['XMLHttpRequest']();\n    xhr.open('get', src, false);\n    xhr.send();\n    return xhr.responseText;\n  }\n};\n\n\n/**\n * Retrieve and execute a module.\n * @param {string} src Script source URL.\n * @private\n */\ngoog.retrieveAndExecModule_ = function(src) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n\n    if (scriptText != null) {\n      var execModuleScript = goog.wrapModule_(src, scriptText);\n      var isOldIE = goog.IS_OLD_IE_;\n      if (isOldIE) {\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\n        goog.queuedModules_.push(originalPath);\n      } else {\n        importScript(src, execModuleScript);\n      }\n    } else {\n      throw new Error('load of ' + src + 'failed');\n    }\n  }\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\n *     deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('SCRIPT');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\n                'with strict mode code. See ' +\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {\n *     !Object|\n *     {constructor:!Function}|\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\n * @suppress {missingProvide}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by\n * goog.defineClass should be sealed when possible.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\n      Object.seal instanceof Function) {\n    // Don't seal subclasses of unsealable-tagged legacy classes.\n    if (superClass && superClass.prototype &&\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\n      return ctr;\n    }\n    /**\n     * @this {Object}\n     * @return {?}\n     */\n    var wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n    return wrappedCtr;\n  }\n  return ctr;\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor.  As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n'declare global';\n'declare window';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ? global : maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\", but there's not\n// currently any way to do this in the existing type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    return /** @type {symbol} */ (\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + (counter++));\n  }\n  return Symbol;\n})();\n\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.arrayIterator(this);\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Returns an iterator from the given array.\n * @param {!Array<T>} array\n * @return {!IteratorIterable<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  var index = 0;\n  return $jscomp.iteratorPrototype(function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  });\n};\n\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() { return this; };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator for the given iterable.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  $jscomp.initSymbolIterator();\n\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = /** @type {?} */ (iterable)[Symbol.iterator];\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","// -------------------------------------------------\n// --------------------- 9P ------------------------\n// -------------------------------------------------\n// Implementation of the 9p filesystem device following the \n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\n\n\"use strict\";\n\n// TODO\n// flush\n// lock?\n// correct hard links\n\nvar EPERM = 1;       /* Operation not permitted */\nvar ENOENT = 2;      /* No such file or directory */\nvar EINVAL = 22;     /* Invalid argument */\nvar ENOTSUPP = 524;  /* Operation is not supported */\nvar ENOTEMPTY = 39;  /* Directory not empty */\nvar EPROTO    = 71   /* Protocol error */\n\nvar P9_SETATTR_MODE = 0x00000001;\nvar P9_SETATTR_UID = 0x00000002;\nvar P9_SETATTR_GID = 0x00000004;\nvar P9_SETATTR_SIZE = 0x00000008;\nvar P9_SETATTR_ATIME = 0x00000010;\nvar P9_SETATTR_MTIME = 0x00000020;\nvar P9_SETATTR_CTIME = 0x00000040;\nvar P9_SETATTR_ATIME_SET = 0x00000080;\nvar P9_SETATTR_MTIME_SET = 0x00000100;\n\nvar P9_STAT_MODE_DIR = 0x80000000;\nvar P9_STAT_MODE_APPEND = 0x40000000;\nvar P9_STAT_MODE_EXCL = 0x20000000;\nvar P9_STAT_MODE_MOUNT = 0x10000000;\nvar P9_STAT_MODE_AUTH = 0x08000000;\nvar P9_STAT_MODE_TMP = 0x04000000;\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\nvar P9_STAT_MODE_LINK = 0x01000000;\nvar P9_STAT_MODE_DEVICE = 0x00800000;\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\nvar P9_STAT_MODE_SOCKET = 0x00100000;\nvar P9_STAT_MODE_SETUID = 0x00080000;\nvar P9_STAT_MODE_SETGID = 0x00040000;\nvar P9_STAT_MODE_SETVTX = 0x00010000;\n\nvar FID_NONE = -1;\nvar FID_INODE = 1;\nvar FID_XATTR = 2;\n\n/** \n * @constructor \n *\n * @param {FS} filesystem\n */\nfunction Virtio9p(filesystem, bus) {\n    /** @const @type {FS} */\n    this.fs = filesystem;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.SendReply = function(x, y) {};\n    this.deviceid = 0x9; // 9p filesystem\n    this.hostfeature = 0x1; // mountpoint\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\n\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\n    this.VERSION = \"9P2000.L\";\n    this.BLOCKSIZE = 8192; // Let's define one page.\n    this.msize = 8192; // maximum message size\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\n    this.replybuffersize = 0;\n\n    this.fids = [];\n}\n\nVirtio9p.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.deviceid;\n    state[1] = this.hostfeature;\n    state[2] = this.configspace;\n    state[3] = this.VERSION;\n    state[4] = this.BLOCKSIZE;\n    state[5] = this.msize;\n    state[6] = this.replybuffer;\n    state[7] = this.replybuffersize;\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\n\n    return state;\n};\n\nVirtio9p.prototype.set_state = function(state)\n{\n    this.deviceid = state[0];\n    this.hostfeature = state[1];\n    this.configspace = state[2];\n    this.VERSION = state[3];\n    this.BLOCKSIZE = state[4];\n    this.msize = state[5];\n    this.replybuffer = state[6];\n    this.replybuffersize = state[7];\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\n};\n\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\n\treturn {inodeid: inode, type: type, uid: uid};\n}\n\nVirtio9p.prototype.Reset = function() {\n    this.fids = [];\n}\n\n\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\n    if ((payloadsize+7) >= this.replybuffer.length) {\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\n    }\n    //for(var i=0; i<payload.length; i++)\n    //    this.replybuffer[7+i] = payload[i];\n    this.replybuffersize = payloadsize+7;\n    return;\n}\n\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\n    this.BuildReply(6, tag, size);\n}\n\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\n    var size = header[0];\n    var id = header[1];\n    var tag = header[2];\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\n\n    switch(id)\n    {\n        case 8: // statfs\n            size = this.fs.GetTotalSize(); // size used by all files\n            var space = this.fs.GetSpace();\n            var req = [];\n            req[0] = 0x01021997;\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\n            req[2] = Math.floor(space/req[1]); // free blocks, let's say 1GB\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\n            req[5] = this.fs.inodes.length; // total number of inodes\n            req[6] = 1024*1024;\n            req[7] = 0; // file system id?\n            req[8] = 256; // maximum length of filenames\n\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 112: // topen\n        case 12: // tlopen\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var mode = req[1];\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\n            var idx = this.fids[fid].inodeid;\n            var inode = this.fs.GetInode(idx);\n            message.Debug(\"file open \" + inode.name);\n            //if (inode.status == STATUS_LOADING) return;\n            var ret = this.fs.OpenInode(idx, mode);\n\n            this.fs.AddEvent(this.fids[fid].inodeid,\n                function() {\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\n                    req[0] = inode.qid;\n                    req[1] = this.msize - 24;\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\n                    this.BuildReply(id, tag, 13+4);\n                    this.SendReply(0, index);\n                }.bind(this)\n            );\n            break;\n\n        case 70: // link (just copying)\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var dfid = req[0];\n            var fid = req[1];\n            var name = req[2];\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\n            var inode = this.fs.CreateInode();\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\n            //inode = inodetarget;\n            inode.mode = inodetarget.mode;\n            inode.size = inodetarget.size;\n            inode.symlink = inodetarget.symlink;\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\n            for(var i=0; i<inode.size; i++) {\n                data[i] = targetdata[i];\n            }\n            inode.name = name;\n            inode.parentid = this.fids[dfid].inodeid;\n            this.fs.PushInode(inode);\n            \n            //inode.uid = inodetarget.uid;\n            //inode.gid = inodetarget.gid;\n            //inode.mode = inodetarget.mode | S_IFLNK;\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);       \n            break;\n\n        case 16: // symlink\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var symgt = req[2];\n            var gid = req[3];\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 18: // mknod\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var major = req[3];\n            var minor = req[4];\n            var gid = req[5];\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n\n        case 22: // TREADLINK\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            var fid = req[0];\n            message.Debug(\"[readlink] fid=\" + fid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n\n        case 72: // tmkdir\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var gid = req[3];\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode | S_IFDIR;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 14: // tlcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var flags = req[2];\n            var mode = req[3];\n            var gid = req[4];\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\n            this.fids[fid].inodeid = idx;\n            this.fids[fid].type = FID_INODE;\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            inode.mode = mode;\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13+4);\n            this.SendReply(0, index);\n            break;\n\n        case 52: // lock always suceed\n            message.Debug(\"lock file\\n\");\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\n            this.BuildReply(id, tag, 1);\n            this.SendReply(0, index);\n            break;\n\n        /*\n        case 54: // getlock\n            break;        \n        */\n\n        case 24: // getattr\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"getattr: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            req[0] |= 0x1000; // P9_STATS_GEN\n\n            req[0] = req[1]; // request mask\n            req[1] = inode.qid;\n\n            req[2] = inode.mode; \n            req[3] = inode.uid; // user id\n            req[4] = inode.gid; // group id\n            \n            req[5] = 0x1; // number of hard links\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\n            req[7] = inode.size; // size low\n            req[8] = this.BLOCKSIZE;\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\n            req[10] = inode.atime; // atime\n            req[11] = 0x0;\n            req[12] = inode.mtime; // mtime\n            req[13] = 0x0;\n            req[14] = inode.ctime; // ctime\n            req[15] = 0x0;\n            req[16] = 0x0; // btime\n            req[17] = 0x0; \n            req[18] = 0x0; // st_gen\n            req[19] = 0x0; // data_version\n            marshall.Marshall([\n            \"d\", \"Q\", \n            \"w\",  \n            \"w\", \"w\", \n            \"d\", \"d\", \n            \"d\", \"d\", \"d\",\n            \"d\", \"d\", // atime\n            \"d\", \"d\", // mtime\n            \"d\", \"d\", // ctime\n            \"d\", \"d\", // btime\n            \"d\", \"d\",\n            ], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\n            this.SendReply(0, index);\n            break;\n\n        case 26: // setattr\n            var req = marshall.Unmarshall2([\"w\", \"w\", \n                \"w\", // mode \n                \"w\", \"w\", // uid, gid\n                \"d\", // size\n                \"d\", \"d\", // atime\n                \"d\", \"d\"] // mtime\n            , GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\n            if (req[1] & P9_SETATTR_MODE) {\n                inode.mode = req[2];\n            }\n            if (req[1] & P9_SETATTR_UID) {\n                inode.uid = req[3];\n            }\n            if (req[1] & P9_SETATTR_GID) {\n                inode.gid = req[4];\n            }\n            if (req[1] & P9_SETATTR_ATIME_SET) {\n                inode.atime = req[6];\n            }\n            if (req[1] & P9_SETATTR_MTIME_SET) {\n                inode.atime = req[8];\n            }\n            if (req[1] & P9_SETATTR_ATIME) {\n                inode.atime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_MTIME) {\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_CTIME) {\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_SIZE) {\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 50: // fsync\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 40: // TREADDIR\n        case 116: // read\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"read/treaddir: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            if (this.fids[fid].type == FID_XATTR) {\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\n                for(var i=0; i<count; i++)\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                this.BuildReply(id, tag, 4 + count);\n                this.SendReply(0, index);\n            } else {\n                var file = this.fs.inodes[this.fids[fid].inodeid];\n                this.bus.send(\"9p-read-start\");\n\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\n                this.fs.AddEvent(this.fids[fid].inodeid,\n                    function() {\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\n\n                        if (inode.size < offset+count) count = inode.size - offset;\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\n                        if(data) {\n                            for(var i=0; i<count; i++)\n                                this.replybuffer[7+4+i] = data[offset+i];\n                        }\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                        this.BuildReply(id, tag, 4 + count);\n                        this.SendReply(0, index);\n                    }.bind(this)\n                );\n            }\n            break;\n\n        case 118: // write\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\n\n            var file = this.fs.inodes[this.fids[fid].inodeid];\n            this.bus.send(\"9p-write-end\", [file.name, count]);\n\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n            this.BuildReply(id, tag, 4);\n            this.SendReply(0, index);\n            break;\n\n        case 74: // RENAMEAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\n            var olddirfid = req[0];\n            var oldname = req[1];\n            var newdirfid = req[2];\n            var newname = req[3];\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\n            if (ret == false) {\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 76: // TUNLINKAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\n            var dirfd = req[0];\n            var name = req[1];\n            var flags = req[2];\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\n            if (fid == -1) {\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\n                   this.SendReply(0, index);\n                   break;\n            }\n            var ret = this.fs.Unlink(fid);\n            if (!ret) {\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 100: // version\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\n            this.msize = version[0];\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 104: // attach\n            // return root directorie's QID\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var uid = req[4];\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 108: // tflush\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\n            var oldtag = req[0];\n            message.Debug(\"[flush] \" + tag);\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n\n        case 110: // walk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\n            var fid = req[0];\n            var nwfid = req[1];\n            var nwname = req[2];\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\n            if (nwname == 0) {\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\n                this.BuildReply(id, tag, 2);\n                this.SendReply(0, index);\n                break;\n            }\n            var wnames = [];\n            for(var i=0; i<nwname; i++) {\n                wnames.push(\"s\");\n            }\n            var walk = marshall.Unmarshall2(wnames, GetByte);\n            var idx = this.fids[fid].inodeid;\n            var offset = 7+2;\n            var nwidx = 0;\n            //console.log(idx, this.fs.inodes[idx]);\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\n            for(var i=0; i<nwname; i++) {\n                idx = this.fs.Search(idx, walk[i]);\n\n                if (idx == -1) {\n                   message.Debug(\"Could not find: \" + walk[i]);\n                   break;\n                }\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\n                nwidx++;\n                //message.Debug(this.fids[nwfid].inodeid);\n                //this.fids[nwfid].inodeid = idx;\n                //this.fids[nwfid].type = FID_INODE;\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\n            }\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\n            this.BuildReply(id, tag, offset-7);\n            this.SendReply(0, index);\n            break;\n\n        case 120: // clunk\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            message.Debug(\"[clunk]: fid=\" + req[0]);\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\n                this.fids[req[0]].inodeid = -1;\n                this.fids[req[0]].type = FID_NONE;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 32: // txattrcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var attr_size = req[2];\n            var flags = req[3];\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\n            //this.SendReply(0, index);\n            break;\n\n        case 30: // xattrwalk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var fid = req[0];\n            var newfid = req[1];\n            var name = req[2];\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\n            //this.fids[newfid].type = FID_NONE;\n            var length = 0;\n            if (name == \"security.capability\") {\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\n                this.fids[newfid].type = FID_XATTR;\n            }\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\n            this.BuildReply(id, tag, 8);\n            this.SendReply(0, index);\n            break;\n\n        default:\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\n            message.Abort();\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\n            //this.SendReply(0, index);\n            break;\n    }\n\n    //consistency checks if there are problems with the filesystem\n    //this.fs.Check();\n}\n\n","// -------------------------------------------------\n// ----------------- FILESYSTEM---------------------\n// -------------------------------------------------\n// Implementation of a unix filesystem in memory.\n\n\"use strict\";\n\nvar S_IRWXUGO = 0x1FF;\nvar S_IFMT = 0xF000;\nvar S_IFSOCK = 0xC000;\nvar S_IFLNK = 0xA000;\nvar S_IFREG = 0x8000;\nvar S_IFBLK = 0x6000;\nvar S_IFDIR = 0x4000;\nvar S_IFCHR = 0x2000;\n\n//var S_IFIFO  0010000\n//var S_ISUID  0004000\n//var S_ISGID  0002000\n//var S_ISVTX  0001000\n\nvar O_RDONLY = 0x0000; // open for reading only \nvar O_WRONLY = 0x0001; // open for writing only\nvar O_RDWR = 0x0002; // open for reading and writing\nvar O_ACCMODE = 0x0003; // mask for above modes\n\nvar STATUS_INVALID = -0x1;\nvar STATUS_OK = 0x0;\nvar STATUS_OPEN = 0x1;\nvar STATUS_ON_SERVER = 0x2;\nvar STATUS_LOADING = 0x3;\nvar STATUS_UNLINKED = 0x4;\n\n\n/** @const */ var JSONFS_VERSION = 2;\n\n\n/** @const */ var JSONFS_IDX_NAME = 0\n/** @const */ var JSONFS_IDX_SIZE = 1\n/** @const */ var JSONFS_IDX_MTIME = 2\n/** @const */ var JSONFS_IDX_MODE = 3\n/** @const */ var JSONFS_IDX_UID = 4\n/** @const */ var JSONFS_IDX_GID = 5\n/** @const */ var JSONFS_IDX_TARGET = 6\n\n\n/** @constructor */\nfunction FS(baseurl) {\n    /** @type {Array.<Inode>} */\n    this.inodes = [];\n    this.events = [];\n\n    this.baseurl = baseurl;\n\n    this.qidnumber = 0x0;\n    this.filesinloadingqueue = 0;\n    this.OnLoaded = function() {};\n\n    //this.tar = new TAR(this);\n\n    this.inodedata = {};\n\n    this.total_size = 256 * 1024 * 1024 * 1024;\n    this.used_size = 0;\n\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\n    //RegisterMessage(\"tar\",\n    //    function(data) {\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n    //RegisterMessage(\"sync\",\n    //    function(data) {\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n\n    // root entry\n    this.CreateDirectory(\"\", -1);\n}\n\n\n// -----------------------------------------------------\n\nFS.prototype.AddEvent = function(id, OnEvent) {\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_OK) {\n        OnEvent();\n        return;\n    }\n    this.events.push({id: id, OnEvent: OnEvent});    \n}\n\nFS.prototype.HandleEvent = function(id) {\n\n    if (this.filesinloadingqueue == 0) {\n        this.OnLoaded();\n        this.OnLoaded = function() {}\n    }\n    //message.Debug(\"number of events: \" + this.events.length);\n    var newevents = [];\n    for(var i=0; i<this.events.length; i++) {\n        if (this.events[i].id == id) {\n            this.events[i].OnEvent();\n        } else {\n            newevents.push(this.events[i]);\n        }\n    }\n    this.events = newevents;\n}\n\nFS.prototype.OnJSONLoaded = function(fs)\n{\n    if(DEBUG)\n    {\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\n    }\n\n    //console.time(\"parse\");\n    var fsdata = JSON.parse(fs);\n    //console.timeEnd(\"parse\");\n\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\n    {\n        throw \"The filesystem JSON format has changed. \" +\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\n    }\n\n    var fsroot = fsdata[\"fsroot\"];\n    this.used_size = fsdata[\"size\"];\n\n    var me = this;\n\n    setTimeout(function()\n    {\n        //console.time(\"Load\");\n        //console.profile(\"Load\");\n        for(var i = 0; i < fsroot.length; i++) {\n            me.LoadRecursive(fsroot[i], 0);\n        }\n        //console.profileEnd(\"Load\");\n        //console.timeEnd(\"Load\");\n\n        //if(DEBUG)\n        //{\n        //    console.time(\"Check\");\n        //    me.Check();\n        //    console.timeEnd(\"Check\");\n        //}\n\n        me.OnLoaded();\n        me.OnLoaded = function() {};\n    }, 0);\n};\n\nFS.prototype.LoadRecursive = function(data, parentid)\n{\n    var inode = this.CreateInode();\n\n    inode.name = data[JSONFS_IDX_NAME]\n    inode.size = data[JSONFS_IDX_SIZE];\n    inode.mtime = data[JSONFS_IDX_MTIME];\n    inode.ctime = inode.mtime;\n    inode.atime = inode.mtime;\n    inode.mode = data[JSONFS_IDX_MODE];\n    inode.uid = data[JSONFS_IDX_UID];\n    inode.gid = data[JSONFS_IDX_GID];\n\n    inode.parentid = parentid;\n\n    var ifmt = inode.mode & S_IFMT;\n\n    if(ifmt === S_IFDIR)\n    {\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\n    }\n    else if(ifmt === S_IFREG)\n    {\n        inode.status = STATUS_ON_SERVER;\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFLNK)\n    {\n        inode.symlink = data[JSONFS_IDX_TARGET];\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFSOCK)\n    {\n        // socket: ignore\n    }\n    else\n    {\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\n    }\n}\n\nFS.prototype.LoadDir = function(inode, children)\n{\n    inode.updatedir = true;\n\n    var p = this.inodes.length;\n    this.PushInode(inode);\n\n    for(var i = 0; i < children.length; i++) {\n        this.LoadRecursive(children[i], p);\n    }\n}\n\n// Loads the data from a url for a specific inode\nFS.prototype.LoadFile = function(idx) {\n    var inode = this.inodes[idx];\n    if (inode.status != STATUS_ON_SERVER) {\n        return;\n    }\n    inode.status = STATUS_LOADING;\n    this.filesinloadingqueue++;\n\n    //if (inode.compressed) {\n    //    inode.data = new Uint8Array(inode.size);\n    //    LoadBinaryResource(inode.url + \".bz2\",\n    //    function(buffer){\n    //        var buffer8 = new Uint8Array(buffer);\n    //        var ofs = 0;\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \n    //        inode.status = STATUS_OK;\n    //        this.filesinloadingqueue--;\n    //        this.HandleEvent(idx);            \n    //    }.bind(this), \n    //    function(error){throw error;});\n    //    return;\n    //}\n\n    if(this.baseurl)\n    {\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \n            function(buffer){\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\n                inode.size = data.length; // correct size if the previous was wrong. \n                inode.status = STATUS_OK;\n\n                this.filesinloadingqueue--;\n                this.HandleEvent(idx);            \n            }.bind(this), \n            function(error){throw error;});\n    }\n    else\n    {\n        // If baseurl is not set, we started with an empty filesystem. No files\n        // can be loaded\n    }\n}\n\n// -----------------------------------------------------\n\nFS.prototype.PushInode = function(inode) {\n    if (inode.parentid != -1) {\n        this.inodes.push(inode);\n        inode.fid = this.inodes.length - 1;\n        var parent_node = this.inodes[inode.parentid];\n        parent_node.updatedir = true;\n        inode.nextid = parent_node.firstid;\n        parent_node.firstid = this.inodes.length-1;\n        return;\n    } else {\n        if (this.inodes.length == 0) { // if root directory\n            this.inodes.push(inode);\n            return;\n        }\n    }\n\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\n    message.Abort();\n\n}\n\n/** @constructor */\nfunction Inode(qidnumber)\n{\n    this.updatedir = false; // did the directory listing changed?\n    this.parentid = -1;\n    this.firstid = -1; // first file id in directory\n    this.nextid = -1; // next id in directory\n    this.status = 0;\n    this.name = \"\";\n    this.size = 0x0;\n    this.uid = 0x0;\n    this.gid = 0x0;\n    this.fid = 0;\n    this.ctime = 0;\n    this.atime = 0;\n    this.mtime = 0;\n    this.major = 0x0;\n    this.minor = 0x0;\n    //data = new Uint8Array(0);\n    this.symlink = \"\";\n    this.mode = 0x01ED;\n    this.qid = {\n        type: 0, \n        version: 0, \n        path: qidnumber\n    };\n    this.caps = undefined;\n\n    //this.qid_type = 0;\n    //this.qid_version = 0;\n    //this.qid_path = qidnumber;\n}\n\nFS.prototype.CreateInode = function() {\n    //console.log(\"CreateInode\", Error().stack);\n    return new Inode(++this.qidnumber);\n};\n\n\nFS.prototype.CreateDirectory = function(name, parentid) {\n    var x = this.CreateInode();\n    x.name = name;\n    x.parentid = parentid;\n    x.mode = 0x01FF | S_IFDIR;\n    x.updatedir = true;\n    if (parentid >= 0) {\n        x.uid = this.inodes[parentid].uid;\n        x.gid = this.inodes[parentid].gid;\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\n    }\n    x.qid.type = S_IFDIR >> 8;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateFile = function(filename, parentid) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFREG >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\n    return this.inodes.length-1;\n}\n\n\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.major = major;\n    x.minor = minor;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFSOCK >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n     \nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFLNK >> 8;\n    x.symlink = symlink;\n    x.mode = S_IFLNK;\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(str.length);\n    x.size = str.length;\n    for (var j = 0; j < str.length; j++) {\n        data[j] = str.charCodeAt(j);\n    }\n    return id;\n}\n\n/** \n * @param {Uint8Array} buffer\n */\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\n    data.set(buffer);\n    x.size = buffer.length;\n    return id;\n}\n\n\nFS.prototype.OpenInode = function(id, mode) {\n    var inode = this.GetInode(id);\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n        this.FillDirectory(id);\n    }\n    /*\n    var type = \"\";\n    switch(inode.mode&S_IFMT) {\n        case S_IFREG: type = \"File\"; break;\n        case S_IFBLK: type = \"Block Device\"; break;\n        case S_IFDIR: type = \"Directory\"; break;\n        case S_IFCHR: type = \"Character Device\"; break;\n    }\n    */\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\n    if (inode.status == STATUS_ON_SERVER) {\n        this.LoadFile(id);\n        return false;\n    }\n    return true;\n}\n\nFS.prototype.CloseInode = function(id) {\n    //message.Debug(\"close: \" + this.GetFullPath(id));\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_UNLINKED) {\n        //message.Debug(\"Filesystem: Delete unlinked file\");\n        inode.status = STATUS_INVALID;\n        delete this.inodedata[id];\n        inode.size = 0;\n    }\n}\n\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\n    if ((olddirid == newdirid) && (oldname == newname)) {\n        return true;\n    }\n    var oldid = this.Search(olddirid, oldname);\n    var oldpath = this.GetFullPath(oldid);\n    if (oldid == -1) {\n        return false;\n    }\n    var newid = this.Search(newdirid, newname);\n    if (newid != -1) {\n        this.Unlink(newid);\n    }\n\n    var idx = oldid; // idx contains the id which we want to rename\n    var inode = this.inodes[idx];\n\n    // remove inode ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n\n    inode.parentid = newdirid;\n    inode.name = newname;\n    inode.qid.version++;\n\n    inode.nextid = this.inodes[inode.parentid].firstid;\n    this.inodes[inode.parentid].firstid = idx;\n\n    this.inodes[olddirid].updatedir = true;\n    this.inodes[newdirid].updatedir = true;\n\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\n    \n    return true;\n}\n\nFS.prototype.Write = function(id, offset, count, GetByte) {\n    this.NotifyListeners(id, 'write');\n    var inode = this.inodes[id];\n    var data = this.inodedata[id];\n\n    if (!data || data.length < (offset+count)) {\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\n        inode.size = offset + count;\n        data = this.inodedata[id];\n    } else\n    if (inode.size < (offset+count)) {\n        inode.size = offset + count;\n    }\n    for(var i=0; i<count; i++)\n        data[offset+i] = GetByte();\n}\n\nFS.prototype.Search = function(parentid, name) {\n    var id = this.inodes[parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].parentid != parentid) { // consistency check\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\n        }\n        if (this.inodes[id].name == name) return id;\n        id = this.inodes[id].nextid;\n    }\n    return -1;\n}\n\nFS.prototype.GetTotalSize = function() {\n    return this.used_size;\n    //var size = 0;\n    //for(var i=0; i<this.inodes.length; i++) {\n    //    var d = this.inodes[i].data;\n    //    size += d ? d.length : 0;\n    //}\n    //return size;\n}\n\nFS.prototype.GetSpace = function() {\n    return this.total_size;\n};\n\nFS.prototype.GetFullPath = function(idx) {\n    var path = \"\";\n\n    while(idx != 0) {\n        path = \"/\" + this.inodes[idx].name + path;\n        idx = this.inodes[idx].parentid;\n    }\n    return path.substring(1);\n}\n\n// no double linked list. So, we need this\nFS.prototype.FindPreviousID = function(idx) {\n    var inode = this.GetInode(idx);\n    var id = this.inodes[inode.parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].nextid == idx) return id;\n        id = this.inodes[id].nextid;\n    }\n    return id;\n}\n\nFS.prototype.Unlink = function(idx) {\n    this.NotifyListeners(idx, 'delete');\n    if (idx == 0) return false; // root node cannot be deleted\n    var inode = this.GetInode(idx);\n    //message.Debug(\"Unlink \" + inode.name);\n\n    // check if directory is not empty\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n       if (inode.firstid != -1) return false;\n    }\n\n    // update ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n    // don't delete the content. The file is still accessible\n    this.inodes[inode.parentid].updatedir = true;\n    inode.status = STATUS_UNLINKED;\n    inode.nextid = -1;\n    inode.firstid = -1;\n    inode.parentid = -1;\n    return true;\n}\n\nFS.prototype.GetInode = function(idx)\n{\n    if (isNaN(idx)) {\n        message.Debug(\"Error in filesystem: id is not a number \");\n        return 0;\n    }\n\n    if ((idx < 0) || (idx > this.inodes.length)) {\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\n        return 0;\n    }\n    return this.inodes[idx];\n}\n\nFS.prototype.ChangeSize = function(idx, newsize)\n{\n    var inode = this.GetInode(idx);\n    var temp = this.inodedata[idx];\n    //message.Debug(\"change size to: \" + newsize);\n    if (newsize == inode.size) return;\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\n    inode.size = newsize;\n    if(!temp) return;\n    var size = Math.min(temp.length, inode.size);\n    for(var i=0; i<size; i++) {\n        data[i] = temp[i];\n    }\n}\n\nFS.prototype.SearchPath = function(path) {\n    //path = path.replace(/\\/\\//g, \"/\");\n    path = path.replace(\"//\", \"/\");\n    var walk = path.split(\"/\");\n    var n = walk.length;\n    if (walk[n-1].length == 0) walk.pop();\n    if (walk[0].length == 0) walk.shift();\n    n = walk.length;\n\n    var parentid = 0;\n    var id = -1;\n    for(var i=0; i<n; i++) {\n        id = this.Search(parentid, walk[i]);        \n        if (id == -1) {\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\n        }\n        parentid = id;\n    }\n    return {id: id, parentid: parentid, name: walk[i]};\n}\n// -----------------------------------------------------\n\nFS.prototype.GetRecursiveList = function(dirid, list) {\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        list.push(id);\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\n            this.GetRecursiveList(id, list);\n        }\n        id = this.inodes[id].nextid;\n    }\n}\n\nFS.prototype.MergeFile = function(file) {\n    message.Debug(\"Merge path:\" + file.name);\n    var ids = this.SearchPath(file.name);\n    if (ids.parentid == -1) return; // not even the path seems to exist\n    if (ids.id == -1) {\n        ids.id = this.CreateFile(ids.name, ids.parentid); \n    }\n    this.inodes[ids.id].data = file.data;\n    this.inodes[ids.id].size = file.data.length;\n}\n\n\nFS.prototype.RecursiveDelete = function(path) {\n    var toDelete = []\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    this.GetRecursiveList(ids.id, toDelete);\n\n    for(var i=toDelete.length-1; i>=0; i--)\n        this.Unlink(toDelete[i]);\n\n}\n\nFS.prototype.DeleteNode = function(path) {\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\n        this.Unlink(ids.id);\n        return;\n    }\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\n        var toDelete = []\n        this.GetRecursiveList(ids.id, toDelete);\n        for(var i=toDelete.length-1; i>=0; i--)\n            this.Unlink(toDelete[i]);\n        this.Unlink(ids.id);\n        return;\n    }\n}\n\n/** @param {*=} info */\nFS.prototype.NotifyListeners = function(id, action, info) {\n    //if(info==undefined)\n    //    info = {};\n\n    //var path = this.GetFullPath(id);\n    //if (this.watchFiles[path] == true && action=='write') {\n    //  message.Send(\"WatchFileEvent\", path);\n    //}\n    //for (var directory in this.watchDirectories) {\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\n    //        var indexOf = path.indexOf(directory)\n    //        if(indexOf == 0 || indexOf == 1)\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \n    //    }\n    //}\n}\n\n\nFS.prototype.Check = function() {\n    for(var i=1; i<this.inodes.length; i++)\n    {\n        if (this.inodes[i].status == STATUS_INVALID) continue;\n        if (this.inodes[i].nextid == i) {\n            message.Debug(\"Error in filesystem: file points to itself\");\n            message.Abort();\n        }\n\n        var inode = this.GetInode(i);\n        if (inode.parentid < 0) {\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\n        }\n        var n = inode.name.length;\n        if (n == 0) {\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\n        }\n\n        for (var j in inode.name) {\n            var c = inode.name.charCodeAt(j);\n            if (c < 32) {\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\n            } \n        }\n    }\n\n}\n\n\nFS.prototype.FillDirectory = function(dirid) {\n    var inode = this.GetInode(dirid);\n    if (!inode.updatedir) return;\n    var parentid = inode.parentid;\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\n\n    // first get size\n    var size = 0;\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\n        id = this.inodes[id].nextid;\n    }\n\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\n    //message.Debug(\"size of dir entry: \" + size);\n    var data = this.inodedata[dirid] = new Uint8Array(size);\n    inode.size = size;\n\n    var offset = 0x0;\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[dirid].qid, \n        offset+13+8+1+2+1, \n        this.inodes[dirid].mode >> 12, \n        \".\"],\n        data, offset);\n\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[parentid].qid,\n        offset+13+8+1+2+2, \n        this.inodes[parentid].mode >> 12, \n        \"..\"],\n        data, offset);\n\n    id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[id].qid,\n        offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\n        this.inodes[id].mode >> 12,\n        this.inodes[id].name],\n        data, offset);\n        id = this.inodes[id].nextid;\n    }\n    inode.updatedir = false;\n}\n\n\n// -----------------------------------------------------\n\n// only support for security.capabilities\n// should return a  \"struct vfs_cap_data\" defined in\n// linux/capability for format\n// check also:\n//   sys/capability.h\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\nFS.prototype.PrepareCAPs = function(id) {\n    var inode = this.GetInode(id);\n    if (inode.caps) return inode.caps.length;\n    inode.caps = new Uint8Array(12);\n    // format is little endian\n    // magic_etc (revision=0x01: 12 bytes)\n    inode.caps[0]  = 0x00;\n    inode.caps[1]  = 0x00;\n    inode.caps[2]  = 0x00;\n    inode.caps[3]  = 0x01;\n    // permitted (full capabilities)\n    inode.caps[4]  = 0xFF;\n    inode.caps[5]  = 0xFF;\n    inode.caps[6]  = 0xFF;\n    inode.caps[7]  = 0xFF;\n    // inheritable (full capabilities\n    inode.caps[8]  = 0xFF;\n    inode.caps[9]  = 0xFF;\n    inode.caps[10] = 0xFF;\n    inode.caps[11] = 0xFF;\n\n    return inode.caps.length;\n}\n\n","\"use strict\";\n\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\n{\n    window.requestAnimationFrame =\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame;\n}\n\n\n/**\n * Adapter to use visual screen in browsers (in constrast to node)\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction ScreenAdapter(screen_container, bus)\n{\n    console.assert(screen_container, \"1st argument must be a DOM container\");\n\n    var\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\n        graphic_context = graphic_screen.getContext(\"2d\"),\n\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\n        cursor_element = document.createElement(\"div\");\n\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        /** @type {number} */\n        scale_x = 1,\n\n        /** @type {number} */\n        scale_y = 1,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        modified_pixel_min = 0,\n        modified_pixel_max = 0,\n\n        changed_rows,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    var screen = this;\n\n    // 0x12345 -> \"#012345\"\n    function number_as_color(n)\n    {\n        n = n.toString(16);\n\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\n    }\n\n\n    /**\n     * Charmaps that containt unicode sequences for the default dospage\n     * @const\n     */\n    var charmap_high = new Uint16Array([\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\n    ]);\n\n    /** @const */\n    var charmap_low = new Uint16Array([\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\n    ]);\n\n    var charmap = [],\n        chr;\n\n    for(var i = 0; i < 256; i++)\n    {\n        if(i > 127)\n        {\n            chr = charmap_high[i - 0x80];\n        }\n        else if(i < 32)\n        {\n            chr = charmap_low[i];\n        }\n        else\n        {\n            chr = i;\n        }\n\n        charmap[i] = String.fromCharCode(chr);\n    }\n\n    graphic_context[\"imageSmoothingEnabled\"] = false;\n\n    cursor_element.style.position = \"absolute\";\n    cursor_element.style.backgroundColor = \"#ccc\";\n    cursor_element.style.width = \"7px\";\n    cursor_element.style.display = \"inline-block\";\n\n    text_screen.style.display = \"block\";\n    graphic_screen.style.display = \"none\";\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n\n    this.init = function()\n    {\n        // not necessary, because this gets initialized by the bios early,\n        // but nicer to look at\n        this.set_size_text(80, 25);\n\n        this.timer();\n    };\n\n    this.make_screenshot = function()\n    {\n        try {\n            window.open(graphic_screen.toDataURL());\n        }\n        catch(e) {}\n    };\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n\n            changed_rows[row] = 1;\n        }\n    };\n\n    this.timer = function()\n    {\n        requestAnimationFrame(is_graphical ? update_graphical : update_text);\n    };\n\n    var update_text = function()\n    {\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            if(changed_rows[i])\n            {\n                screen.text_update_row(i);\n                changed_rows[i] = 0;\n            }\n        }\n\n        this.timer();\n    }.bind(this);\n\n    var update_graphical = function()\n    {\n        this.bus.send(\"screen-fill-buffer\");\n        this.timer();\n    }.bind(this);\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n\n        if(graphical)\n        {\n            text_screen.style.display = \"none\";\n            graphic_screen.style.display = \"block\";\n        }\n        else\n        {\n            text_screen.style.display = \"block\";\n            graphic_screen.style.display = \"none\";\n        }\n    };\n\n    this.clear_screen = function()\n    {\n        graphic_context.fillStyle = \"#000\";\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        changed_rows = new Int8Array(rows);\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n\n        while(text_screen.childNodes.length > rows)\n        {\n            text_screen.removeChild(text_screen.firstChild);\n        }\n\n        while(text_screen.childNodes.length < rows)\n        {\n            text_screen.appendChild(document.createElement(\"div\"));\n        }\n\n        for(var i = 0; i < rows; i++)\n        {\n            this.text_update_row(i);\n        }\n\n        update_scale_text();\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_screen.style.display = \"block\";\n\n        graphic_screen.width = width;\n        graphic_screen.height = height;\n\n        //graphic_screen.style.width = width * scale_x + \"px\";\n        //graphic_screen.style.height = height * scale_y + \"px\";\n\n        // Make sure to call this here, because pixels are transparent otherwise\n        //screen.clear_screen();\n\n        graphic_image_data = graphic_context.createImageData(width, height);\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n        update_scale_graphic();\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n        scale_x = s_x;\n        scale_y = s_y;\n\n        update_scale_text();\n        update_scale_graphic();\n    };\n    this.set_scale(scale_x, scale_y);\n\n    function update_scale_text()\n    {\n        elem_set_scale(text_screen, scale_x, scale_y, true);\n    }\n\n    function update_scale_graphic()\n    {\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\n    }\n\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\n    {\n        elem.style.width = \"\";\n        elem.style.height = \"\";\n\n        if(use_scale)\n        {\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\n        }\n\n        var rectangle = elem.getBoundingClientRect();\n\n        if(use_scale)\n        {\n            var scale_str = \"\";\n\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\n\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\n        }\n        else\n        {\n            // unblur non-fractional scales\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\n            {\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\n                graphic_screen.style.imageRendering = \"pixelated\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\n            }\n            else\n            {\n                graphic_screen.style.imageRendering = \"\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\n            }\n\n            // undo fractional css-to-device pixel ratios\n            var device_pixel_ratio = window.devicePixelRatio || 1;\n            if(device_pixel_ratio % 1 !== 0)\n            {\n                scale_x /= device_pixel_ratio;\n                scale_y /= device_pixel_ratio;\n            }\n        }\n\n        if(scale_x !== 1)\n        {\n            elem.style.width = rectangle.width * scale_x + \"px\";\n        }\n        if(scale_y !== 1)\n        {\n            elem.style.height = rectangle.height * scale_y + \"px\";\n        }\n    }\n\n    this.update_cursor_scanline = function(start, end)\n    {\n        if(start & 0x20)\n        {\n            cursor_element.style.display = \"none\";\n        }\n        else\n        {\n            cursor_element.style.display = \"inline\";\n\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\n        }\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            changed_rows[row] = 1;\n            changed_rows[cursor_row] = 1;\n\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.text_update_row = function(row)\n    {\n        var offset = 3 * row * text_mode_width,\n            row_element,\n            color_element,\n            fragment;\n\n        var bg_color,\n            fg_color,\n            text;\n\n        row_element = text_screen.childNodes[row];\n        fragment = document.createElement(\"div\");\n\n        for(var i = 0; i < text_mode_width; )\n        {\n            color_element = document.createElement(\"span\");\n\n            bg_color = text_mode_data[offset + 1];\n            fg_color = text_mode_data[offset + 2];\n\n            color_element.style.backgroundColor = number_as_color(bg_color);\n            color_element.style.color = number_as_color(fg_color);\n\n            text = \"\";\n\n            // put characters of the same color in one element\n            while(i < text_mode_width &&\n                text_mode_data[offset + 1] === bg_color &&\n                text_mode_data[offset + 2] === fg_color)\n            {\n                var ascii = text_mode_data[offset];\n\n                text += charmap[ascii];\n\n                i++;\n                offset += 3;\n\n                if(row === cursor_row)\n                {\n                    if(i === cursor_col)\n                    {\n                        // next row will be cursor\n                        // create new element\n                        break;\n                    }\n                    else if(i === cursor_col + 1)\n                    {\n                        // found the cursor\n                        fragment.appendChild(cursor_element);\n                        break;\n                    }\n                }\n            }\n\n            color_element.textContent = text;\n            fragment.appendChild(color_element);\n        }\n\n        row_element.parentNode.replaceChild(fragment, row_element);\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n\n        graphic_context.putImageData(\n            graphic_image_data,\n            0, 0,\n            0, min_y,\n            graphical_mode_width, max_y - min_y + 1\n        );\n    };\n\n    this.init();\n}\n\n\n","\"use strict\";\n\n(function()\n{\n    /** @const */\n    var ON_LOCALHOST = !location.hostname.endsWith(\"copy.sh\");\n\n    /** @const */\n    var HOST = ON_LOCALHOST ? \"\" : \"//i.copy.sh/\";\n\n    /** @const */\n    var OTHER_HOST = ON_LOCALHOST ? \"\" : \"//j.copy.sh:8880/\";\n\n    /** @const */\n    var ON_HTTPS = location.protocol === \"https:\";\n\n    function dump_file(ab, name)\n    {\n        if(!(ab instanceof Array))\n        {\n            ab = [ab];\n        }\n\n        var blob = new Blob(ab);\n        download(blob, name);\n    }\n\n    function download(file_or_blob, name)\n    {\n        var a = document.createElement(\"a\");\n        a[\"download\"] = name;\n        a.href = window.URL.createObjectURL(file_or_blob);\n        a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\n\n        if(document.createEvent)\n        {\n            var ev = document.createEvent(\"MouseEvent\");\n            ev.initMouseEvent(\"click\", true, true, window,\n                              0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            a.dispatchEvent(ev);\n        }\n        else\n        {\n            a.click();\n        }\n\n        window.URL.revokeObjectURL(a.href);\n    }\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    function get_query_arguments()\n    {\n        var query = location.search.substr(1).split(\"&\");\n        var parameters = {};\n\n        for(var i = 0; i < query.length; i++)\n        {\n            var param = query[i].split(\"=\");\n            parameters[param[0]] = decodeURIComponent(param[1]);\n        }\n\n        return parameters;\n    }\n\n    function set_title(text)\n    {\n        document.title = text + \" - Virtual x86\" +  (DEBUG ? \" - debug\" : \"\");\n    }\n\n    function format_timestamp(time)\n    {\n        if(time < 60)\n        {\n            return time + \"s\";\n        }\n        else if(time < 3600)\n        {\n            return (time / 60 | 0) + \"m \" + v86util.pad0(time % 60, 2) + \"s\";\n        }\n        else\n        {\n            return (time / 3600 | 0) + \"h \" +\n                v86util.pad0((time / 60 | 0) % 60, 2) + \"m \" +\n                v86util.pad0(time % 60, 2) + \"s\";\n        }\n    }\n\n    function chr_repeat(chr, count)\n    {\n        var result = \"\";\n\n        while(count-- > 0)\n        {\n            result += chr;\n        }\n\n        return result;\n    }\n\n    var progress_ticks = 0;\n\n    function show_progress(e)\n    {\n        var el = $(\"loading\");\n        el.style.display = \"block\";\n\n        if(e.file_index === e.file_count - 1 && e.loaded >= e.total - 2048)\n        {\n            // last file is (almost) loaded\n            el.textContent = \"Done downloading. Starting now ...\";\n            return;\n        }\n\n        var line = \"Downloading images \";\n\n        if(typeof e.file_index === \"number\" && e.file_count)\n        {\n            line += \"[\" + (e.file_index + 1) + \"/\" + e.file_count + \"] \";\n        }\n\n        if(e.total && typeof e.loaded === \"number\")\n        {\n            var per100 = Math.floor(e.loaded / e.total * 100);\n            per100 = Math.min(100, Math.max(0, per100));\n\n            var per50 = Math.floor(per100 / 2);\n\n            line += per100 + \"% [\";\n            line += chr_repeat(\"#\", per50);\n            line += chr_repeat(\" \", 50 - per50) + \"]\";\n        }\n        else\n        {\n            line += chr_repeat(\".\", progress_ticks++ % 50);\n        }\n\n        el.textContent = line;\n    }\n\n    function $(id)\n    {\n        var el = document.getElementById(id);\n\n        if(!el)\n        {\n            dbg_log(\"Element with id `\" + id + \"` not found\");\n        }\n\n        return el;\n    }\n\n    function onload()\n    {\n        if(!(\"responseType\" in new XMLHttpRequest))\n        {\n            alert(\"Your browser is not supported \" +\n                  \"because it doesn't have XMLHttpRequest.responseType\");\n            return;\n        }\n\n        var settings = {};\n\n        $(\"start_emulation\").onclick = function()\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_profile(\"custom\");\n\n            var images = [];\n            var last_file;\n\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                last_file = floppy_file;\n                settings.fda = { buffer: floppy_file };\n            }\n\n            var cd_file = $(\"cd_image\").files[0];\n            if(cd_file)\n            {\n                last_file = cd_file;\n                settings.cdrom = { buffer: cd_file };\n            }\n\n            var hd_file = $(\"hd_image\").files[0];\n            if(hd_file)\n            {\n                last_file = hd_file;\n                settings.hda = { buffer: hd_file };\n            }\n\n            if($(\"multiboot_image\"))\n            {\n                var multiboot_file = $(\"multiboot_image\").files[0];\n                if(multiboot_file)\n                {\n                    last_file = multiboot_file;\n                    settings.multiboot = { buffer: multiboot_file };\n                }\n            }\n\n            if(last_file)\n            {\n                set_title(last_file.name);\n            }\n\n            start_emulation(settings);\n        };\n\n        if(DEBUG)\n        {\n            debug_onload(settings);\n        }\n\n        var oses = [\n            {\n                id: \"archlinux\",\n                state: {\n                    \"url\": HOST + \"images/v86state.bin\",\n                    \"size\": 142770436,\n                },\n                name: \"Arch Linux\",\n                memory_size: 128 * 1024 * 1024,\n                vga_memory_size: 8 * 1024 * 1024,\n\n                // required for restoring state, should not be used when booted on 9p\n                hda: {\n                    \"url\": HOST + \"images/arch3.img\",\n                    \"size\": 16 * 1024 * 1024 * 1024,\n                    \"async\": true,\n                },\n\n                filesystem: {\n                    \"basefs\": {\n                        \"url\": HOST + \"images/fs.json\",\n                        \"size\": 10232633,\n                    },\n                    \"baseurl\": HOST + \"arch/\",\n                },\n            },\n            {\n                id: \"msdos\",\n                hda: {\n                    \"url\": HOST + \"images/msdos.img\",\n                    \"size\": 8 * 1024 * 1024,\n                },\n                boot_order: 0x132,\n                name: \"MS-DOS\",\n            },\n            {\n                id: \"freedos\",\n                fda: {\n                    \"url\": HOST + \"images/freedos722.img\",\n                    \"size\": 737280,\n                },\n                name: \"FreeDOS\",\n            },\n            {\n                id: \"oberon\",\n                fda: {\n                    \"url\": HOST + \"images/oberon-boot.dsk\",\n                    \"size\": 1440 * 1024,\n                },\n                hda: {\n                    \"url\": HOST + \"images/oberon.dsk\",\n                    \"size\": 41943040,\n                },\n                name: \"Oberon\",\n            },\n            {\n                id: \"windows1\",\n                fda: {\n                    \"url\": HOST + \"images/windows101.img\",\n                    \"size\": 1474560,\n                },\n                name: \"Windows\",\n            },\n            {\n                id: \"linux26\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux.iso\",\n                    \"size\": 5666816,\n                },\n                name: \"Linux\",\n            },\n            {\n                id: \"linux3\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux3.iso\",\n                    \"size\": 8624128,\n                },\n                name: \"Linux\",\n                filesystem: {},\n            },\n            {\n                id: \"kolibrios\",\n                fda: {\n                    \"url\": (ON_LOCALHOST || ON_HTTPS) ?\n                            \"images/kolibri.img\" :\n                            \"//builds.kolibrios.org/eng/data/data/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"kolibrios-fallback\",\n                fda: {\n                    \"url\": HOST + \"images/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"openbsd\",\n                fda: {\n                    \"url\": HOST + \"images/openbsd.img\",\n                    \"size\": 1474560,\n                },\n                name: \"OpenBSD\",\n            },\n            {\n                id: \"solos\",\n                fda: {\n                    \"url\": HOST + \"images/os8.dsk\",\n                    \"size\": 1474560,\n                },\n                name: \"Sol OS\",\n            },\n            {\n                id: \"dexos\",\n                cdrom: {\n                    \"url\": HOST + \"images/DexOSv6.iso\",\n                    \"size\": 1837056,\n                },\n                name: \"DexOS\",\n            },\n            {\n                id: \"bootchess\",\n                fda: {\n                    \"url\": HOST + \"images/bootchess.img\",\n                },\n                name: \"Bootchess\",\n            },\n            {\n                id: \"windows98\",\n                memory_size: 64 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/windows98.img\",\n                    \"async\": true,\n                    \"size\": 300 * 1024 * 1024,\n                },\n                name: \"Windows 98\",\n                state: {\n                    \"url\": HOST + \"images/windows98_state.bin\",\n                    \"size\": 75705744,\n                },\n            },\n            {\n                id: \"windows95\",\n                memory_size: 32 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/W95.IMG\",\n                    \"size\": 242049024,\n                    \"async\": true,\n                },\n                name: \"Windows 95\",\n                state: {\n                    \"url\": HOST + \"images/windows95_state.bin\",\n                    \"size\": 42151316,\n                },\n            },\n            {\n                id: \"freebsd\",\n                memory_size: 128 * 1024 * 1024,\n                state: {\n                    \"url\": HOST + \"images/freebsd_state.bin\",\n                    \"size\": 142815292,\n                },\n                hda: {\n                    \"url\": ON_LOCALHOST ? \"../v86-images/os/freebsd3.img\" :\n                                          OTHER_HOST + \"images/freebsd3.img\",\n                    \"size\": 17179869184,\n                    \"async\": true,\n                },\n                name: \"FreeBSD\",\n            },\n            {\n                id: \"reactos\",\n                memory_size: 256 * 1024 * 1024,\n                cdrom: {\n                    \"url\": HOST + \"images/ReactOS-0.4.4-live.iso\",\n                    \"async\": true,\n                },\n                state: {\n                    \"url\": HOST + \"images/reactos_state.bin\",\n                    \"size\": 276971224,\n                },\n                name: \"ReactOS\",\n                description: 'Running <a href=\"https://reactos.org/\">ReactOS</a>',\n            },\n        ];\n\n        if(DEBUG)\n        {\n            // see tests/kvm-unit-tests/x86/\n            var tests = [\n                \"realmode\",\n                // All tests below require an APIC\n                \"cmpxchg8b\",\n                \"port80\",\n                \"setjmp\",\n                \"sieve\",\n                \"hypercall\", // crashes\n                \"init\", // stops execution\n                \"msr\", // TODO: Expects 64 bit msrs\n                \"smap\", // test stops, SMAP not enabled\n                \"tsc_adjust\", // TODO: IA32_TSC_ADJUST\n                \"tsc\", // TODO: rdtscp\n                \"rmap_chain\", // crashes\n                \"memory\", // missing mfence (uninteresting)\n                \"taskswitch\", // TODO: Jump\n                \"taskswitch2\", // TODO: Call TSS\n                \"eventinj\", // Missing #nt\n                \"ioapic\",\n                \"apic\",\n            ];\n\n            for(let test of tests)\n            {\n                oses.push({\n                    name: \"Test case: \" + test,\n                    id: \"test-\" + test,\n                    memory_size: 128 * 1024 * 1024,\n                    multiboot: { \"url\": \"tests/kvm-unit-tests/x86/\" + test + \".flat\", }\n                });\n            }\n        }\n\n        var query_args = get_query_arguments();\n        var profile = query_args[\"profile\"];\n\n        if(query_args[\"use_bochs_bios\"])\n        {\n            settings.use_bochs_bios = true;\n        }\n\n        for(var i = 0; i < oses.length; i++)\n        {\n            var infos = oses[i];\n\n            if(profile === infos.id)\n            {\n                start_profile(infos);\n                return;\n            }\n\n            var element = $(\"start_\" + infos.id);\n\n            if(element)\n            {\n                element.onclick = function(infos, element)\n                {\n                    set_profile(infos.id);\n                    element.blur();\n\n                    start_profile(infos);\n                }.bind(this, infos, element);\n            }\n        }\n\n        if(profile === \"custom\")\n        {\n            if(query_args[\"hda.url\"])\n            {\n                settings.hda = {\n                    \"size\": parseInt(query_args[\"hda.size\"], 10) || undefined,\n                    \"url\": query_args[\"hda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"cdrom.url\"])\n            {\n                settings.cdrom = {\n                    \"size\": parseInt(query_args[\"cdrom.size\"], 10) || undefined,\n                    \"url\": query_args[\"cdrom.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"fda.url\"])\n            {\n                settings.fda = {\n                    \"size\": parseInt(query_args[\"fda.size\"], 10) || undefined,\n                    \"url\": query_args[\"fda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(settings.fda || settings.cdrom || settings.hda)\n            {\n                $(\"boot_options\").style.display = \"none\";\n\n                start_emulation(settings, done);\n            }\n        }\n\n        function start_profile(infos)\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_title(infos.name);\n\n            settings.filesystem = infos.filesystem;\n\n            if(infos.state)\n            {\n                $(\"reset\").style.display = \"none\";\n                settings.initial_state = infos.state;\n            }\n\n            settings.fda = infos.fda;\n            settings.cdrom = infos.cdrom;\n            settings.hda = infos.hda;\n            settings.multiboot = infos.multiboot;\n\n            settings.memory_size = infos.memory_size;\n            settings.vga_memory_size = infos.vga_memory_size;\n\n            settings.id = infos.id;\n\n            if(infos.boot_order !== undefined)\n            {\n                settings.boot_order = infos.boot_order;\n            }\n\n            if(!DEBUG && infos.description)\n            {\n                $(\"description\").style.display = \"block\";\n                $(\"description\").innerHTML = \"<br>\" + infos.description;\n            }\n\n            start_emulation(settings, done);\n        }\n\n        function done(emulator)\n        {\n            if(query_args[\"c\"])\n            {\n                setTimeout(function()\n                {\n                    //emulator.serial0_send(query_args[\"c\"] + \"\\n\");\n                    emulator.keyboard_send_text(query_args[\"c\"] + \"\\n\");\n                }, 25);\n            }\n        }\n    }\n\n    function debug_onload(settings)\n    {\n        // called on window.onload, in debug mode\n\n        //settings.filesystem = {\n        //    baseurl: \"http://localhost/v86-images/arch/\",\n        //    basefs: \"http://localhost/v86-images/fs.json\",\n        //};\n\n        //$(\"restore_state\").onchange = function()\n        //{\n        //};\n\n        //$(\"start_test\").onclick = function()\n        //{\n        //};\n\n        var log_levels = $(\"log_levels\");\n\n        for(var i = 0; i < LOG_NAMES.length; i++)\n        {\n            var mask = LOG_NAMES[i][0];\n\n            if(mask === 1)\n                continue;\n\n            var name = LOG_NAMES[i][1].toLowerCase(),\n                input = document.createElement(\"input\"),\n                label = document.createElement(\"label\");\n\n            input.type = \"checkbox\";\n\n            label.htmlFor = input.id = \"log_\" + name;\n\n            if(LOG_LEVEL & mask)\n            {\n                input.checked = true;\n            }\n            input.mask = mask;\n\n            label.appendChild(input);\n            label.appendChild(document.createTextNode(v86util.pads(name, 4) + \" \"));\n            log_levels.appendChild(label);\n\n            if(i === Math.floor(LOG_NAMES.length / 2))\n            {\n                log_levels.appendChild(document.createTextNode(\"\\n\"));\n            }\n        }\n\n        log_levels.onchange = function(e)\n        {\n            var target = e.target,\n                mask = target.mask;\n\n            if(target.checked)\n            {\n                LOG_LEVEL |= mask;\n            }\n            else\n            {\n                LOG_LEVEL &= ~mask;\n            }\n\n            target.blur();\n        };\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent = \"ACPI: \" + (ENABLE_ACPI ? \"enabled\" : \"disabled\");\n    }\n\n    window.addEventListener(\"load\", onload, false);\n\n    // old webkit fires popstate on every load, fuck webkit\n    // https://code.google.com/p/chromium/issues/detail?id=63040\n    window.addEventListener(\"load\", function()\n    {\n        setTimeout(function()\n        {\n            window.addEventListener(\"popstate\", onpopstate);\n        }, 0);\n    });\n\n    // works in firefox and chromium\n    if(document.readyState === \"complete\")\n    {\n        onload();\n    }\n\n    /** @param {?=} done */\n    function start_emulation(settings, done)\n    {\n        /** @const */\n        var MB = 1024 * 1024;\n\n        var memory_size = settings.memory_size;\n\n        if(!memory_size)\n        {\n            memory_size = parseInt($(\"memory_size\").value, 10) * MB;\n\n            if(!memory_size)\n            {\n                alert(\"Invalid memory size - reset to 128MB\");\n                memory_size = 128 * MB;\n            }\n        }\n\n        var vga_memory_size = settings.vga_memory_size;\n\n        if(!vga_memory_size)\n        {\n            vga_memory_size = parseInt($(\"video_memory_size\").value, 10) * MB;\n\n            if(!vga_memory_size)\n            {\n                alert(\"Invalid video memory size - reset to 8MB\");\n                vga_memory_size = 8 * MB;\n            }\n        }\n\n        if(!settings.fda)\n        {\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                settings.fda = { buffer: floppy_file };\n            }\n        }\n\n        /** @const */\n        var BIOSPATH = \"bios/\";\n\n        if(settings.use_bochs_bios)\n        {\n            var biosfile = \"bochs-bios.bin\";\n            var vgabiosfile = \"bochs-vgabios.bin\";\n        }\n        else\n        {\n            var biosfile = DEBUG ? \"seabios-debug.bin\" : \"seabios.bin\";\n            var vgabiosfile = DEBUG ? \"vgabios-debug.bin\" : \"vgabios.bin\";\n            //var biosfile = DEBUG ? \"seabios-ultradebug.bin\" : \"seabios.bin\";\n            //var vgabiosfile = DEBUG ? \"vgabios-ultradebug.bin\" : \"vgabios.bin\";\n        }\n\n        //var biosfile = \"seabios-qemu.bin\";\n        //var vgabiosfile = \"vgabios-qemu.bin\";\n\n        var bios;\n        var vga_bios;\n\n        // a bios is only needed if the machine is booted\n        if(!settings.initial_state)\n        {\n            bios = {\n                \"url\": BIOSPATH + biosfile,\n            };\n            vga_bios = {\n                \"url\": BIOSPATH + vgabiosfile,\n            };\n        }\n\n        var emulator = new V86Starter({\n            \"memory_size\": memory_size,\n            \"vga_memory_size\": vga_memory_size,\n\n            \"screen_container\": $(\"screen_container\"),\n            \"serial_container\": $(\"serial\"),\n\n            \"boot_order\": settings.boot_order || parseInt($(\"boot_order\").value, 16) || 0,\n\n            \"network_relay_url\": \"wss://relay.widgetry.org/\",\n            //\"network_relay_url\": \"ws://localhost:8001/\",\n\n            \"bios\": bios,\n            \"vga_bios\": vga_bios,\n\n            \"fda\": settings.fda,\n            \"hda\": settings.hda,\n            \"cdrom\": settings.cdrom,\n\n            \"multiboot\": settings.multiboot,\n\n            \"initial_state\": settings.initial_state,\n            \"filesystem\": settings.filesystem || {},\n\n            \"autostart\": true,\n        });\n\n        if(DEBUG) window[\"emulator\"] = emulator;\n\n        emulator.add_listener(\"emulator-ready\", function()\n        {\n            if(DEBUG)\n            {\n                debug_start(emulator);\n            }\n\n            init_ui(settings, emulator);\n\n            done && done(emulator);\n        });\n\n        emulator.add_listener(\"download-progress\", function(e)\n        {\n            show_progress(e);\n        });\n\n        emulator.add_listener(\"download-error\", function(e)\n        {\n            var el = $(\"loading\");\n            el.style.display = \"block\";\n            el.textContent = \"Loading \" + e.file_name + \" failed. Check your connection \" +\n                             \"and reload the page to try again.\";\n        });\n    }\n\n    /**\n     * @param {Object} settings\n     * @param {V86Starter} emulator\n     */\n    function init_ui(settings, emulator)\n    {\n        $(\"boot_options\").style.display = \"none\";\n        $(\"loading\").style.display = \"none\";\n        $(\"runtime_options\").style.display = \"block\";\n        $(\"runtime_infos\").style.display = \"block\";\n        $(\"screen_container\").style.display = \"block\";\n\n        if(settings.filesystem)\n        {\n            init_filesystem_panel(emulator);\n        }\n\n        $(\"run\").onclick = function()\n        {\n            if(emulator.is_running())\n            {\n                $(\"run\").value = \"Run\";\n                emulator.stop();\n            }\n            else\n            {\n                $(\"run\").value = \"Pause\";\n                emulator.run();\n            }\n\n            $(\"run\").blur();\n        };\n\n        $(\"exit\").onclick = function()\n        {\n            emulator.stop();\n            location.href = location.pathname;\n        };\n\n        $(\"lock_mouse\").onclick = function()\n        {\n            if(!mouse_is_enabled)\n            {\n                $(\"toggle_mouse\").onclick();\n            }\n\n            emulator.lock_mouse();\n            $(\"lock_mouse\").blur();\n        };\n\n        var mouse_is_enabled = true;\n\n        $(\"toggle_mouse\").onclick = function()\n        {\n            mouse_is_enabled = !mouse_is_enabled;\n\n            emulator.mouse_set_status(mouse_is_enabled);\n            $(\"toggle_mouse\").value = (mouse_is_enabled ? \"Dis\" : \"En\") + \"able mouse\";\n            $(\"toggle_mouse\").blur();\n        };\n\n\n        var last_tick = 0;\n        var running_time = 0;\n        var last_instr_counter = 0;\n        var interval;\n        var os_uses_mouse = false;\n\n        function update_info()\n        {\n            var now = Date.now();\n\n            var instruction_counter = emulator.get_instruction_counter();\n            var last_ips = instruction_counter - last_instr_counter;\n\n            last_instr_counter = instruction_counter;\n\n            var delta_time = now - last_tick;\n            running_time += delta_time;\n            last_tick = now;\n\n            $(\"speed\").textContent = last_ips / delta_time | 0;\n            $(\"avg_speed\").textContent = instruction_counter / running_time | 0;\n            $(\"running_time\").textContent = format_timestamp(running_time / 1000 | 0);\n        }\n\n        emulator.add_listener(\"emulator-started\", function()\n        {\n            last_tick = Date.now();\n            interval = setInterval(update_info, 1000);\n        });\n\n        emulator.add_listener(\"emulator-stopped\", function()\n        {\n            update_info();\n            clearInterval(interval);\n        });\n\n        var stats_9p = {\n            read: 0,\n            write: 0,\n        };\n\n        emulator.add_listener(\"9p-read-start\", function()\n        {\n            $(\"info_filesystem\").style.display = \"block\";\n            $(\"info_filesystem_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"9p-read-end\", function(args)\n        {\n            stats_9p.read += args[1];\n\n            $(\"info_filesystem_status\").textContent = \"Idle\";\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_read\").textContent = stats_9p.read;\n        });\n        emulator.add_listener(\"9p-write-end\", function(args)\n        {\n            stats_9p.write += args[1];\n\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_written\").textContent = stats_9p.write;\n        });\n\n        var stats_storage = {\n            read: 0,\n            read_sectors: 0,\n            write: 0,\n            write_sectors: 0,\n        };\n\n        emulator.add_listener(\"ide-read-start\", function()\n        {\n            $(\"info_storage\").style.display = \"block\";\n            $(\"info_storage_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"ide-read-end\", function(args)\n        {\n            stats_storage.read += args[1];\n            stats_storage.read_sectors += args[2];\n\n            $(\"info_storage_status\").textContent = \"Idle\";\n            $(\"info_storage_bytes_read\").textContent = stats_storage.read;\n            $(\"info_storage_sectors_read\").textContent = stats_storage.read_sectors;\n        });\n        emulator.add_listener(\"ide-write-end\", function(args)\n        {\n            stats_storage.write += args[1];\n            stats_storage.write_sectors += args[2];\n\n            $(\"info_storage_bytes_written\").textContent = stats_storage.write;\n            $(\"info_storage_sectors_written\").textContent = stats_storage.write_sectors;\n        });\n\n        var stats_net = {\n            bytes_transmitted: 0,\n            bytes_received: 0,\n        };\n\n        emulator.add_listener(\"eth-receive-end\", function(args)\n        {\n            stats_net.bytes_received += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_received\").textContent = stats_net.bytes_received;\n        });\n        emulator.add_listener(\"eth-transmit-end\", function(args)\n        {\n            stats_net.bytes_transmitted += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_transmitted\").textContent = stats_net.bytes_transmitted;\n        });\n\n\n        emulator.add_listener(\"mouse-enable\", function(is_enabled)\n        {\n            os_uses_mouse = is_enabled;\n            $(\"info_mouse_enabled\").textContent = is_enabled ? \"Yes\" : \"No\";\n        });\n\n        emulator.add_listener(\"screen-set-mode\", function(is_graphical)\n        {\n            if(is_graphical)\n            {\n                $(\"info_vga_mode\").textContent = \"Graphical\";\n            }\n            else\n            {\n                $(\"info_vga_mode\").textContent = \"Text\";\n                $(\"info_res\").textContent = \"-\";\n                $(\"info_bpp\").textContent = \"-\";\n            }\n        });\n        emulator.add_listener(\"screen-set-size-graphical\", function(args)\n        {\n            $(\"info_res\").textContent = args[0] + \"x\" + args[1];\n            $(\"info_bpp\").textContent = args[2];\n        });\n\n\n        $(\"reset\").onclick = function()\n        {\n            emulator.restart();\n            $(\"reset\").blur();\n        };\n\n        add_image_download_button(settings.hda, \"hda\");\n        add_image_download_button(settings.hdb, \"hdb\");\n        add_image_download_button(settings.fda, \"fda\");\n        add_image_download_button(settings.fdb, \"fdb\");\n        add_image_download_button(settings.cdrom, \"cdrom\");\n\n        function add_image_download_button(obj, type)\n        {\n            var elem = $(\"get_\" + type + \"_image\");\n\n            if(!obj || obj.size > 100 * 1024 * 1024)\n            {\n                elem.style.display = \"none\";\n                return;\n            }\n\n            elem.onclick = function(e)\n            {\n                let buffer = emulator.disk_images[type];\n                let filename = settings.id + (type === \"cdrom\" ? \".iso\" : \".img\");\n\n                if(buffer.get_as_file)\n                {\n                    var file = buffer.get_as_file(filename);\n                    download(file, filename);\n                }\n                else\n                {\n                    buffer.get_buffer(function(b)\n                    {\n                        if(b)\n                        {\n                            dump_file(b, filename);\n                        }\n                        else\n                        {\n                            alert(\"The file could not be loaded. Maybe it's too big?\");\n                        }\n                    });\n                }\n\n                elem.blur();\n            };\n        }\n\n        $(\"memory_dump\").onclick = function()\n        {\n            dump_file(emulator.v86.cpu.mem8, \"v86memory.bin\");\n            $(\"memory_dump\").blur();\n        };\n\n        //$(\"memory_dump_dmp\").onclick = function()\n        //{\n        //    var memory = emulator.v86.cpu.mem8;\n        //    var memory_size = memory.length;\n        //    var page_size = 4096;\n        //    var header = new Uint8Array(4096);\n        //    var header32 = new Int32Array(header.buffer);\n\n        //    header32[0] = 0x45474150; // 'PAGE'\n        //    header32[1] = 0x504D5544; // 'DUMP'\n\n        //    header32[0x10 >> 2] = emulator.v86.cpu.cr[3]; // DirectoryTableBase\n        //    header32[0x24 >> 2] = 1; // NumberProcessors\n        //    header32[0xf88 >> 2] = 1; // DumpType: full dump\n        //    header32[0xfa0 >> 2] = header.length + memory_size; // RequiredDumpSpace\n\n        //    header32[0x064 + 0 >> 2] = 1; // NumberOfRuns\n        //    header32[0x064 + 4 >> 2] = memory_size / page_size; // NumberOfPages\n        //    header32[0x064 + 8 >> 2] = 0; // BasePage\n        //    header32[0x064 + 12 >> 2] = memory_size / page_size; // PageCount\n\n        //    dump_file([header, memory], \"v86memory.dmp\");\n\n        //    $(\"memory_dump_dmp\").blur();\n        //};\n\n        $(\"save_state\").onclick = function()\n        {\n            emulator.save_state(function(error, result)\n            {\n                if(error)\n                {\n                    console.log(error.stack);\n                    console.log(\"Couldn't save state: \", error);\n                }\n                else\n                {\n                    dump_file(result, \"v86state.bin\");\n                }\n            });\n\n            $(\"save_state\").blur();\n        };\n\n        $(\"load_state\").onclick = function()\n        {\n            $(\"load_state_input\").click();\n            $(\"load_state\").blur();\n        };\n\n        $(\"load_state_input\").onchange = function()\n        {\n            var file = this.files[0];\n\n            if(!file)\n            {\n                return;\n            }\n\n            var was_running = emulator.is_running();\n\n            if(was_running)\n            {\n                emulator.stop();\n            }\n\n            var filereader = new FileReader();\n            filereader.onload = function(e)\n            {\n                try\n                {\n                    emulator.restore_state(e.target.result);\n                }\n                catch(err)\n                {\n                    alert(\"Something bad happened while restoring the state:\\n\" + err + \"\\n\\n\" +\n                          \"Note that the current configuration must be the same as the original\");\n                    throw err;\n                }\n\n                if(was_running)\n                {\n                    emulator.run();\n                }\n            };\n            filereader.readAsArrayBuffer(file);\n\n            this.value = \"\";\n        };\n\n        $(\"ctrlaltdel\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x1D, // ctrl\n                0x38, // alt\n                0x53, // delete\n\n                // break codes\n                0x1D | 0x80,\n                0x38 | 0x80,\n                0x53 | 0x80,\n            ]);\n\n            $(\"ctrlaltdel\").blur();\n        };\n\n        $(\"alttab\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x38, // alt\n                0x0F, // tab\n            ]);\n\n            setTimeout(function()\n            {\n                emulator.keyboard_send_scancodes([\n                    0x38 | 0x80,\n                    0x0F | 0x80,\n                ]);\n            }, 100);\n\n            $(\"alttab\").blur();\n        };\n\n        $(\"scale\").onchange = function()\n        {\n            var n = parseFloat(this.value);\n\n            if(n || n > 0)\n            {\n                emulator.screen_set_scale(n, n);\n            }\n        };\n\n        $(\"fullscreen\").onclick = function()\n        {\n            emulator.screen_go_fullscreen();\n        };\n\n        $(\"screen_container\").onclick = function()\n        {\n            if(mouse_is_enabled && os_uses_mouse)\n            {\n                emulator.lock_mouse();\n                $(\"lock_mouse\").blur();\n            }\n            else\n            {\n                // allow text selection\n                if(window.getSelection().isCollapsed)\n                {\n                    let phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n                    // stop mobile browser from scrolling into view when the keyboard is shown\n                    phone_keyboard.style.top = document.body.scrollTop + 100 + \"px\";\n                    phone_keyboard.style.left = document.body.scrollLeft + 100 + \"px\";\n\n                    phone_keyboard.focus();\n                }\n            }\n        };\n\n        const phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n        phone_keyboard.setAttribute(\"autocorrect\", \"off\");\n        phone_keyboard.setAttribute(\"autocapitalize\", \"off\");\n        phone_keyboard.setAttribute(\"spellcheck\", \"false\");\n        phone_keyboard.tabIndex = 0;\n\n        $(\"screen_container\").addEventListener(\"mousedown\", (e) =>\n        {\n            phone_keyboard.focus();\n        }, false);\n\n        $(\"take_screenshot\").onclick = function()\n        {\n            emulator.screen_make_screenshot();\n\n            $(\"take_screenshot\").blur();\n        };\n\n        $(\"serial\").style.display = \"block\";\n\n        window.addEventListener(\"keydown\", ctrl_w_rescue, false);\n        window.addEventListener(\"keyup\", ctrl_w_rescue, false);\n        window.addEventListener(\"blur\", ctrl_w_rescue, false);\n\n        function ctrl_w_rescue(e)\n        {\n            if(e.ctrlKey)\n            {\n                window.onbeforeunload = function()\n                {\n                    window.onbeforeunload = null;\n                    return \"CTRL-W cannot be sent to the emulator.\";\n                };\n            }\n            else\n            {\n                window.onbeforeunload = null;\n            }\n        }\n    }\n\n    function init_filesystem_panel(emulator)\n    {\n        $(\"filesystem_panel\").style.display = \"block\";\n\n        $(\"filesystem_send_file\").onchange = function()\n        {\n            Array.prototype.forEach.call(this.files, function(file)\n            {\n                var loader = new v86util.SyncFileBuffer(file);\n                loader.onload = function()\n                {\n                    loader.get_buffer(function(buffer)\n                    {\n                        emulator.create_file(\"/\" + file.name, new Uint8Array(buffer));\n                    });\n                };\n                loader.load();\n            }, this);\n\n            this.value = \"\";\n            this.blur();\n        };\n\n        $(\"filesystem_get_file\").onkeypress = function(e)\n        {\n            if(e.which !== 13)\n            {\n                return;\n            }\n\n            this.disabled = true;\n\n            emulator.read_file(this.value, function(err, uint8array)\n            {\n                this.disabled = false;\n\n                if(uint8array)\n                {\n                    var filename = this.value.replace(/\\/$/, \"\").split(\"/\");\n                    filename = filename[filename.length - 1] || \"root\";\n\n                    dump_file(uint8array, filename);\n                    this.value = \"\";\n                }\n                else\n                {\n                    alert(\"Can't read file\");\n                }\n            }.bind(this));\n        };\n    }\n\n    function debug_start(emulator)\n    {\n        if(!emulator.v86)\n        {\n            return;\n        }\n\n        // called as soon as soon as emulation is started, in debug mode\n        var debug = emulator.v86.cpu.debug;\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent += \" | logging ops: \" +\n            (debug.step_mode || debug.trace_all ? \"yes\" : \"no\");\n\n        $(\"step\").onclick = debug.step.bind(debug);\n        $(\"run_until\").onclick = debug.run_until.bind(debug);\n        $(\"dump_gdt\").onclick = debug.dump_gdt_ldt.bind(debug);\n        $(\"dump_idt\").onclick = debug.dump_idt.bind(debug);\n        $(\"dump_regs\").onclick = debug.dump_regs.bind(debug);\n        $(\"dump_pt\").onclick = debug.dump_page_directory.bind(debug);\n        $(\"dump_instructions\").onclick = debug.dump_instructions.bind(debug);\n\n        $(\"dump_log\").onclick = function()\n        {\n            dump_file(log_data, \"v86.log\");\n        };\n\n        $(\"dump_instructions_file\").onclick = function()\n        {\n            var ins = debug.get_instructions();\n\n            if(ins)\n            {\n                dump_file(ins, \"trace.txt\");\n            }\n        };\n\n        var cpu = emulator.v86.cpu;\n\n        $(\"debug_panel\").style.display = \"block\";\n        setInterval(function()\n        {\n            $(\"debug_panel\").textContent =\n                cpu.debug.get_regs_short().join(\"\\n\") + \"\\n\" + cpu.debug.get_state();\n        }, 1000);\n\n        // helps debugging\n        window.emulator = emulator;\n        window.cpu = cpu;\n        window.dump_file = dump_file;\n    }\n\n    function onpopstate(e)\n    {\n        location.reload();\n    }\n\n    function set_profile(prof)\n    {\n        if(window.history.pushState)\n        {\n            window.history.pushState({ profile: prof }, \"\", \"?profile=\" + prof);\n        }\n\n    }\n\n})();\n","\"use strict\";\n\n/**\n * Constructor for emulator instances.\n *\n * Usage: `var emulator = new V86Starter(options);`\n *\n * Options can have the following properties (all optional, default in parenthesis):\n *\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\n *   be a power of 2.\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\n *\n * - `autostart boolean` (false) - If emulation should be started when emulator\n *   is ready.\n *\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\n *\n * - `network_relay_url string` (No network card) - The url of a server running\n *   websockproxy. See [networking.md](networking.md). Setting this will\n *   enable an emulated network card.\n *\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\n *   ArrayBuffer, see below.\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\n * - `hda Object` (No hard drive) - First hard disk, see below.\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\n * - `cdrom Object` (No CD) - See below.\n * - `initial_state Object` (Normal boot) - An initial state to load, see\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\n *\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\n *   [filesystem.md](filesystem.md).\n *\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\n *   that will receive and send data to the emulated serial terminal.\n *   Alternatively the serial terminal can also be accessed programatically,\n *   see [serial.html](../examples/serial.html).\n *\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\n *   have a certain structure, see [basic.html](../examples/basic.html).\n *\n * ***\n *\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\n *\n * - Pass an object that has a url. Optionally, `async: true` and `size:\n *   size_in_bytes` can be added to the object, so that sectors of the image\n *   are loaded on demand instead of being loaded before boot (slower, but\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\n *   header must be supported on the server.\n *\n *   ```javascript\n *   // download file before boot\n *   bios: {\n *       url: \"bios/seabios.bin\"\n *   }\n *   // download file sectors as requested, size is required\n *   hda: {\n *       url: \"disk/linux.iso\",\n *       async: true,\n *       size: 16 * 1024 * 1024\n *   }\n *   ```\n *\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\n *\n *   ```javascript\n *   // use <input type=file>\n *   bios: {\n *       buffer: document.all.hd_image.files[0]\n *   }\n *   // start with empty hard drive\n *   hda: {\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\n *   }\n *   ```\n *\n * ***\n *\n * @param {Object} options Options to initialize the emulator with.\n * @constructor\n */\nfunction V86Starter(options)\n{\n    //var worker = new Worker(\"src/browser/worker.js\");\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\n\n    this.cpu_is_running = false;\n\n    var bus = Bus.create();\n    var adapter_bus = this.bus = bus[0];\n    this.emulator_bus = bus[1];\n    var emulator = this.v86 = new v86(this.emulator_bus);\n\n    this.bus.register(\"emulator-stopped\", function()\n    {\n        this.cpu_is_running = false;\n    }, this);\n\n    this.bus.register(\"emulator-started\", function()\n    {\n        this.cpu_is_running = true;\n    }, this);\n\n    var settings = {};\n\n    this.disk_images = {\n        \"fda\": undefined,\n        \"fdb\": undefined,\n        \"hda\": undefined,\n        \"hdb\": undefined,\n        \"cdrom\": undefined,\n    };\n\n    settings.load_devices = true;\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\n    settings.boot_order = options[\"boot_order\"] || 0x213;\n    settings.fastboot = options[\"fastboot\"] || false;\n    settings.fda = undefined;\n    settings.fdb = undefined;\n\n    if(options[\"network_relay_url\"])\n    {\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\n        settings.enable_ne2k = true;\n    }\n\n    if(!options[\"disable_keyboard\"])\n    {\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\n    }\n    if(!options[\"disable_mouse\"])\n    {\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\n    }\n\n    if(options[\"screen_container\"])\n    {\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\n    }\n    else if(options[\"screen_dummy\"])\n    {\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\n    }\n\n    if(options[\"serial_container\"])\n    {\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\n    }\n\n    if(!options[\"disable_speaker\"])\n    {\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\n    }\n\n    // ugly, but required for closure compiler compilation\n    function put_on_settings(name, buffer)\n    {\n        switch(name)\n        {\n            case \"hda\":\n                settings.hda = this.disk_images[\"hda\"] = buffer;\n                break;\n            case \"hdb\":\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\n                break;\n            case \"cdrom\":\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\n                break;\n            case \"fda\":\n                settings.fda = this.disk_images[\"fda\"] = buffer;\n                break;\n            case \"fdb\":\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\n                break;\n\n            case \"multiboot\":\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\n                break;\n\n            case \"bios\":\n                settings.bios = buffer.buffer;\n                break;\n            case \"vga_bios\":\n                settings.vga_bios = buffer.buffer;\n                break;\n            case \"initial_state\":\n                settings.initial_state = buffer.buffer;\n                break;\n            case \"fs9p_json\":\n                settings.fs9p_json = buffer.buffer;\n                break;\n            default:\n                dbg_assert(false, name);\n        }\n    }\n\n    var files_to_load = [];\n\n    function add_file(name, file)\n    {\n        if(!file)\n        {\n            return;\n        }\n\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\n        {\n            files_to_load.push({\n                name: name,\n                loadable: file,\n            });\n            return;\n        }\n\n        // Anything coming from the outside world needs to be quoted for\n        // Closure Compiler compilation\n        file = {\n            buffer: file[\"buffer\"],\n            async: file[\"async\"],\n            url: file[\"url\"],\n            size: file[\"size\"],\n        };\n\n        if(name === \"bios\" || name === \"vga_bios\" ||\n            name === \"initial_state\" || name === \"multiboot\")\n        {\n            // Ignore async for these because they must be availabe before boot.\n            // This should make result.buffer available after the object is loaded\n            file.async = false;\n        }\n\n        if(file.buffer instanceof ArrayBuffer)\n        {\n            var buffer = new SyncBuffer(file.buffer);\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\n        {\n            // SyncFileBuffer:\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\n            // - can later serve get/set operations fast and synchronously\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\n            //\n            // AsyncFileBuffer:\n            // - loads slices of the file asynchronously as requested\n            // - slower get/set\n\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\n            if(file.async === undefined)\n            {\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\n            }\n\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\n            }\n            else\n            {\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\n            }\n\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(file.url)\n        {\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\n                files_to_load.push({\n                    name: name,\n                    loadable: buffer,\n                });\n            }\n            else\n            {\n                files_to_load.push({\n                    name: name,\n                    url: file.url,\n                    size: file.size,\n                });\n            }\n        }\n        else\n        {\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\n        }\n    }\n\n    var image_names = [\n        \"bios\", \"vga_bios\",\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\n        \"initial_state\", \"multiboot\",\n    ];\n\n    for(var i = 0; i < image_names.length; i++)\n    {\n        add_file(image_names[i], options[image_names[i]]);\n    }\n\n    if(options[\"filesystem\"])\n    {\n        var fs_url = options[\"filesystem\"][\"basefs\"];\n        var base_url = options[\"filesystem\"][\"baseurl\"];\n\n        this.fs9p = new FS(base_url);\n        settings.fs9p = this.fs9p;\n\n        if(fs_url)\n        {\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\n\n            var size;\n\n            if(typeof fs_url === \"object\")\n            {\n                size = fs_url[\"size\"];\n                fs_url = fs_url[\"url\"];\n            }\n            dbg_assert(typeof fs_url === \"string\");\n\n            files_to_load.push({\n                name: \"fs9p_json\",\n                url: fs_url,\n                size: size,\n                as_text: true,\n            });\n        }\n    }\n\n    var starter = this;\n    var total = files_to_load.length;\n\n    var cont = function(index)\n    {\n        if(index === total)\n        {\n            setTimeout(done.bind(this), 0);\n            return;\n        }\n\n        var f = files_to_load[index];\n\n        if(f.loadable)\n        {\n            f.loadable.onload = function(e)\n            {\n                put_on_settings.call(this, f.name, f.loadable);\n                cont(index + 1);\n            }.bind(this);\n            f.loadable.load();\n        }\n        else\n        {\n            v86util.load_file(f.url, {\n                done: function(result)\n                {\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\n                    cont(index + 1);\n                }.bind(this),\n                progress: function progress(e)\n                {\n                    if(e.target.status === 200)\n                    {\n                        starter.emulator_bus.send(\"download-progress\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n\n                            lengthComputable: e.lengthComputable,\n                            total: e.total || f.size,\n                            loaded: e.loaded,\n                        });\n                    }\n                    else\n                    {\n                        starter.emulator_bus.send(\"download-error\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n                            request: e.target,\n                        });\n                    }\n                },\n                as_text: f.as_text,\n            });\n        }\n    }.bind(this);\n    cont(0);\n\n    function done()\n    {\n        if(settings.initial_state)\n        {\n            // avoid large allocation now, memory will be restored later anyway\n            settings.memory_size = 0;\n        }\n\n        this.bus.send(\"cpu-init\", settings);\n\n        setTimeout(function()\n        {\n            if(settings.initial_state)\n            {\n                emulator.restore_state(settings.initial_state);\n            }\n\n            setTimeout(function()\n            {\n                if(settings.fs9p && settings.fs9p_json)\n                {\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\n                }\n\n                if(options[\"autostart\"])\n                {\n                    this.bus.send(\"cpu-run\");\n                }\n            }.bind(this), 0);\n        }.bind(this), 0);\n    }\n}\n\n/**\n * Start emulation. Do nothing if emulator is running already. Can be\n * asynchronous.\n * @export\n */\nV86Starter.prototype.run = function()\n{\n    this.bus.send(\"cpu-run\");\n};\n\n/**\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\n * @export\n */\nV86Starter.prototype.stop = function()\n{\n    this.bus.send(\"cpu-stop\");\n};\n\n/**\n * @ignore\n * @export\n */\nV86Starter.prototype.destroy = function()\n{\n    this.keyboard_adapter.destroy();\n};\n\n/**\n * Restart (force a reboot).\n * @export\n */\nV86Starter.prototype.restart = function()\n{\n    this.bus.send(\"cpu-restart\");\n};\n\n/**\n * Add an event listener (the emulator is an event emitter). A list of events\n * can be found at [events.md](events.md).\n *\n * The callback function gets a single argument which depends on the event.\n *\n * @param {string} event Name of the event.\n * @param {function(*)} listener The callback function.\n * @export\n */\nV86Starter.prototype.add_listener = function(event, listener)\n{\n    this.bus.register(event, listener, this);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} event\n * @param {function(*)} listener\n * @export\n */\nV86Starter.prototype.remove_listener = function(event, listener)\n{\n    this.bus.unregister(event, listener);\n};\n\n/**\n * Restore the emulator state from the given state, which must be an\n * ArrayBuffer returned by\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\n *\n * Note that the state can only be restored correctly if this constructor has\n * been created with the same options as the original instance (e.g., same disk\n * images, memory size, etc.).\n *\n * Different versions of the emulator might use a different format for the\n * state buffer.\n *\n * @param {ArrayBuffer} state\n * @export\n */\nV86Starter.prototype.restore_state = function(state)\n{\n    this.v86.restore_state(state);\n};\n\n/**\n * Asynchronously save the current state of the emulator. The first argument to\n * the callback is an Error object if something went wrong and is null\n * otherwise.\n *\n * @param {function(Object, ArrayBuffer)} callback\n * @export\n */\nV86Starter.prototype.save_state = function(callback)\n{\n    // Might become asynchronous at some point\n\n    setTimeout(function()\n    {\n        try\n        {\n            callback(null, this.v86.save_state());\n        }\n        catch(e)\n        {\n            callback(e, null);\n        }\n    }.bind(this), 0);\n};\n\n/**\n * Return an object with several statistics. Return value looks similar to\n * (but can be subject to change in future versions or different\n * configurations, so use defensively):\n *\n * ```javascript\n * {\n *     \"cpu\": {\n *         \"instruction_counter\": 2821610069\n *     },\n *     \"hda\": {\n *         \"sectors_read\": 95240,\n *         \"sectors_written\": 952,\n *         \"bytes_read\": 48762880,\n *         \"bytes_written\": 487424,\n *         \"loading\": false\n *     },\n *     \"cdrom\": {\n *         \"sectors_read\": 0,\n *         \"sectors_written\": 0,\n *         \"bytes_read\": 0,\n *         \"bytes_written\": 0,\n *         \"loading\": false\n *     },\n *     \"mouse\": {\n *         \"enabled\": true\n *     },\n *     \"vga\": {\n *         \"is_graphical\": true,\n *         \"res_x\": 800,\n *         \"res_y\": 600,\n *         \"bpp\": 32\n *     }\n * }\n * ```\n *\n * @deprecated\n * @return {Object}\n * @export\n */\nV86Starter.prototype.get_statistics = function()\n{\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\n\n    var stats = {\n        cpu: {\n            instruction_counter: this.get_instruction_counter(),\n        },\n    };\n\n    if(!this.v86)\n    {\n        return stats;\n    }\n\n    var devices = this.v86.cpu.devices;\n\n    if(devices.hda)\n    {\n        stats.hda = devices.hda.stats;\n    }\n\n    if(devices.cdrom)\n    {\n        stats.cdrom = devices.cdrom.stats;\n    }\n\n    if(devices.ps2)\n    {\n        stats[\"mouse\"] = {\n            \"enabled\": devices.ps2.use_mouse,\n        };\n    }\n\n    if(devices.vga)\n    {\n        stats[\"vga\"] = {\n            \"is_graphical\": devices.vga.stats.is_graphical,\n        };\n    }\n\n    return stats;\n};\n\n/**\n * @return {number}\n * @ignore\n * @export\n */\nV86Starter.prototype.get_instruction_counter = function()\n{\n    if(this.v86)\n    {\n        return this.v86.cpu.timestamp_counter;\n    }\n    else\n    {\n        // TODO: Should be handled using events\n        return 0;\n    }\n};\n\n/**\n * @return {boolean}\n * @export\n */\nV86Starter.prototype.is_running = function()\n{\n    return this.cpu_is_running;\n};\n\n/**\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\n * Do nothing if there is no keyboard controller.\n *\n * @param {Array.<number>} codes\n * @export\n */\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.bus.send(\"keyboard-code\", codes[i]);\n    }\n};\n\n/**\n * Send translated keys\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_keys = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.keyboard_adapter.simulate_press(codes[i]);\n    }\n};\n\n/**\n * Send text\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_text = function(string)\n{\n    for(var i = 0; i < string.length; i++)\n    {\n        this.keyboard_adapter.simulate_char(string[i]);\n    }\n};\n\n/**\n * Download a screenshot.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_make_screenshot = function()\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.make_screenshot();\n    }\n};\n\n/**\n * Set the scaling level of the emulated screen.\n *\n * @param {number} sx\n * @param {number} sy\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_set_scale = function(sx, sy)\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.set_scale(sx, sy);\n    }\n};\n\n/**\n * Go fullscreen.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_go_fullscreen = function()\n{\n    if(!this.screen_adapter)\n    {\n        return;\n    }\n\n    var elem = document.getElementById(\"screen_container\");\n\n    if(!elem)\n    {\n        return;\n    }\n\n    // bracket notation because otherwise they get renamed by closure compiler\n    var fn = elem[\"requestFullScreen\"] ||\n            elem[\"webkitRequestFullscreen\"] ||\n            elem[\"mozRequestFullScreen\"] ||\n            elem[\"msRequestFullScreen\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\n        // Might (but doesn't seem to) break something else\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\n        focus_element && focus_element.focus();\n    }\n\n    //this.lock_mouse(elem);\n    this.lock_mouse();\n};\n\n/**\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\n * browser window.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.lock_mouse = function()\n{\n    var elem = document.body;\n\n    var fn = elem[\"requestPointerLock\"] ||\n                elem[\"mozRequestPointerLock\"] ||\n                elem[\"webkitRequestPointerLock\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n    }\n};\n\n/**\n * Enable or disable sending mouse events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n */\nV86Starter.prototype.mouse_set_status = function(enabled)\n{\n    if(this.mouse_adapter)\n    {\n        this.mouse_adapter.emu_enabled = enabled;\n    }\n};\n\n/**\n * Enable or disable sending keyboard events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n * @export\n */\nV86Starter.prototype.keyboard_set_status = function(enabled)\n{\n    if(this.keyboard_adapter)\n    {\n        this.keyboard_adapter.emu_enabled = enabled;\n    }\n};\n\n\n/**\n * Send a string to the first emulated serial terminal.\n *\n * @param {string} data\n * @export\n */\nV86Starter.prototype.serial0_send = function(data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\n    }\n};\n\n/**\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\n * been initialized. First argument to the callback is an error object if\n * something went wrong and null otherwise.\n *\n * @param {string} file\n * @param {Uint8Array} data\n * @param {function(Object)=} callback\n * @export\n */\nV86Starter.prototype.create_file = function(file, data, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var parts = file.split(\"/\");\n    var filename = parts[parts.length - 1];\n\n    var path_infos = fs.SearchPath(file);\n    var parent_id = path_infos.parentid;\n    var not_found = filename === \"\" || parent_id === -1;\n\n    if(!not_found)\n    {\n        fs.CreateBinaryFile(filename, parent_id, data);\n    }\n\n    if(callback)\n    {\n        setTimeout(function()\n        {\n            if(not_found)\n            {\n                callback(new FileNotFoundError());\n            }\n            else\n            {\n                callback(null);\n            }\n        }, 0);\n    }\n};\n\n/**\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\n * initialized.\n *\n * @param {string} file\n * @param {function(Object, Uint8Array)} callback\n * @export\n */\nV86Starter.prototype.read_file = function(file, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var path_infos = fs.SearchPath(file);\n    var id = path_infos.id;\n\n    if(id === -1)\n    {\n        callback(new FileNotFoundError(), null);\n    }\n    else\n    {\n        fs.OpenInode(id, undefined);\n        fs.AddEvent(\n            id,\n            function()\n            {\n                var data = fs.inodedata[id];\n\n                if(data)\n                {\n                    callback(null, data.subarray(0, fs.inodes[id].size));\n                }\n                else\n                {\n                    callback(new FileNotFoundError(), null);\n                }\n            }\n        );\n    }\n};\n\n/**\n * @ignore\n * @constructor\n *\n * @param {string=} message\n */\nfunction FileNotFoundError(message)\n{\n    this.message = message || \"File not found\";\n}\nFileNotFoundError.prototype = Error.prototype;\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"V86Starter\"] = V86Starter;\n    window[\"V86\"] = V86Starter;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"V86Starter\"] = V86Starter;\n    module.exports[\"V86\"] = V86Starter;\n}\nelse if(typeof importScripts === \"function\")\n{\n    // web worker\n    self[\"V86Starter\"] = V86Starter;\n    self[\"V86\"] = V86Starter;\n}\n","\"use strict\";\n\n/**\n * The ISA IO bus\n * Devices register their ports here\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction IO(cpu)\n{\n    /** @const */\n    this.ports = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 0x10000; i++)\n    {\n        this.ports[i] = this.create_empty_entry();\n    }\n\n    var memory_size = cpu.memory_size;\n\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\n    {\n        // avoid sparse arrays\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\n    }\n\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\n        function(addr) {\n            // read outside of the memory size\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return 0xFF;\n        },\n        function(addr, value) {\n            // write outside of the memory size\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\n        },\n        function(addr) {\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return -1;\n        },\n        function(addr, value) {\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\n        }\n    );\n}\n\nIO.prototype.create_empty_entry = function()\n{\n    return {\n        read8: this.empty_port_read8,\n        read16: this.empty_port_read16,\n        read32: this.empty_port_read32,\n\n        write8: this.empty_port_write,\n        write16: this.empty_port_write,\n        write32: this.empty_port_write,\n\n        device: undefined,\n    };\n};\n\nIO.prototype.empty_port_read8 = function()\n{\n    return 0xFF;\n};\n\nIO.prototype.empty_port_read16 = function()\n{\n    return 0xFFFF;\n};\n\nIO.prototype.empty_port_read32 = function()\n{\n    return -1;\n};\n\nIO.prototype.empty_port_write = function(x)\n{\n};\n\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function():number=} r8\n * @param {function():number=} r16\n * @param {function():number=} r32\n */\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!r8 || typeof r8 === \"function\");\n    dbg_assert(!r16 || typeof r16 === \"function\");\n    dbg_assert(!r32 || typeof r32 === \"function\");\n    dbg_assert(r8 || r16 || r32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\n            return -1 >>> (32 - n) | 0;\n        };\n        if(!r8) r8 = fail.bind(this, 8);\n        if(!r16) r16 = fail.bind(this, 16);\n        if(!r32) r32 = fail.bind(this, 32);\n    }\n\n    if(r8) this.ports[port_addr].read8 = r8;\n    if(r16) this.ports[port_addr].read16 = r16;\n    if(r32) this.ports[port_addr].read32 = r32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function(number)=} w8\n * @param {function(number)=} w16\n * @param {function(number)=} w32\n */\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!w8 || typeof w8 === \"function\");\n    dbg_assert(!w16 || typeof w16 === \"function\");\n    dbg_assert(!w32 || typeof w32 === \"function\");\n    dbg_assert(w8 || w16 || w32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\n        };\n        if(!w8) w8 = fail.bind(this, 8);\n        if(!w16) w16 = fail.bind(this, 16);\n        if(!w32) w32 = fail.bind(this, 32);\n    }\n\n    if(w8) this.ports[port_addr].write8 = w8;\n    if(w16) this.ports[port_addr].write16 = w16;\n    if(w32) this.ports[port_addr].write32 = w32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\n *\n * This info is not correct for all ports, but handled by the following functions\n *\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\n * ports and 0 or 1 32-bit ports\n *\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function():number} r8_1\n * @param {function():number} r8_2\n * @param {function():number=} r8_3\n * @param {function():number=} r8_4\n */\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function r16_1()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8;\n    }\n    function r16_2()\n    {\n        return r8_3.call(this) |\n                r8_4.call(this) << 8;\n    }\n    function r32()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8 |\n                r8_3.call(this) << 16 |\n                r8_4.call(this) << 24;\n    }\n\n    if(r8_3 && r8_4)\n    {\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\n        this.register_read(port_addr + 1, device, r8_2);\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\n        this.register_read(port_addr + 3, device, r8_4);\n    }\n    else\n    {\n        this.register_read(port_addr, device, r8_1, r16_1);\n        this.register_read(port_addr + 1, device, r8_2);\n    }\n};\n\n/**\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function(number)} w8_1\n * @param {function(number)} w8_2\n * @param {function(number)=} w8_3\n * @param {function(number)=} w8_4\n */\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function w16_1(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n    }\n    function w16_2(data)\n    {\n        w8_3.call(this, data & 0xFF);\n        w8_4.call(this, data >> 8 & 0xFF);\n    }\n    function w32(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n        w8_3.call(this, data >> 16 & 0xFF);\n        w8_4.call(this, data >>> 24);\n    }\n\n    if(w8_3 && w8_4)\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\n        this.register_write(port_addr + 1, device, w8_2);\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\n        this.register_write(port_addr + 3, device, w8_4);\n    }\n    else\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1);\n        this.register_write(port_addr + 1, device, w8_2);\n    }\n};\n\nIO.prototype.in_mmap_range = function(start, count)\n{\n    start >>>= 0;\n    count >>>= 0;\n\n    var end = start + count;\n\n    if(end >= this.cpu.memory_size)\n    {\n        return true;\n    }\n\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\n    start &= ~(MMAP_BLOCK_SIZE - 1);\n\n    while(start < end)\n    {\n        if(this.cpu.in_mapped_range(start))\n        {\n            return true;\n        }\n\n        start += MMAP_BLOCK_SIZE;\n    }\n\n    return false;\n};\n\nIO.prototype.mmap_read32_shim = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_read8[aligned_addr];\n\n    return fn(addr) | fn(addr + 1) << 8 |\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\n};\n\nIO.prototype.mmap_write32_shim = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_write8[aligned_addr];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1, value >> 8 & 0xFF);\n    fn(addr + 2, value >> 16 & 0xFF);\n    fn(addr + 3, value >>> 24);\n};\n\n/**\n * @param {number} addr\n * @param {number} size\n * @param {*} read_func8\n * @param {*} write_func8\n * @param {*=} read_func32\n * @param {*=} write_func32\n */\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\n{\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\n\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    if(!read_func32)\n        read_func32 = this.mmap_read32_shim.bind(this);\n\n    if(!write_func32)\n        write_func32 = this.mmap_write32_shim.bind(this);\n\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    for(; size > 0; aligned_addr++)\n    {\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\n\n        size -= MMAP_BLOCK_SIZE;\n    }\n};\n\n\nIO.prototype.port_write8 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write8.call(entry.device, data);\n};\n\nIO.prototype.port_write16 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write16.call(entry.device, data);\n};\n\nIO.prototype.port_write32 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write32.call(entry.device, data);\n};\n\nIO.prototype.port_read8 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read8.call(entry.device);\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read16 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read16.call(entry.device);\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read32 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read32.call(entry.device);\n    dbg_assert((value | 0) === value);\n    return value;\n};\n\n// via seabios ioport.h\nvar debug_port_list = {\n    0x0004: \"PORT_DMA_ADDR_2\",\n    0x0005: \"PORT_DMA_CNT_2\",\n    0x000a: \"PORT_DMA1_MASK_REG\",\n    0x000b: \"PORT_DMA1_MODE_REG\",\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\n    0x0020: \"PORT_PIC1_CMD\",\n    0x0021: \"PORT_PIC1_DATA\",\n    0x0040: \"PORT_PIT_COUNTER0\",\n    0x0041: \"PORT_PIT_COUNTER1\",\n    0x0042: \"PORT_PIT_COUNTER2\",\n    0x0043: \"PORT_PIT_MODE\",\n    0x0060: \"PORT_PS2_DATA\",\n    0x0061: \"PORT_PS2_CTRLB\",\n    0x0064: \"PORT_PS2_STATUS\",\n    0x0070: \"PORT_CMOS_INDEX\",\n    0x0071: \"PORT_CMOS_DATA\",\n    0x0080: \"PORT_DIAG\",\n    0x0081: \"PORT_DMA_PAGE_2\",\n    0x0092: \"PORT_A20\",\n    0x00a0: \"PORT_PIC2_CMD\",\n    0x00a1: \"PORT_PIC2_DATA\",\n    0x00b2: \"PORT_SMI_CMD\",\n    0x00b3: \"PORT_SMI_STATUS\",\n    0x00d4: \"PORT_DMA2_MASK_REG\",\n    0x00d6: \"PORT_DMA2_MODE_REG\",\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\n    0x00f0: \"PORT_MATH_CLEAR\",\n    0x0170: \"PORT_ATA2_CMD_BASE\",\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\n    0x0278: \"PORT_LPT2\",\n    0x02e8: \"PORT_SERIAL4\",\n    0x02f8: \"PORT_SERIAL2\",\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\n    0x0378: \"PORT_LPT1\",\n    0x03e8: \"PORT_SERIAL3\",\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\n    0x03f0: \"PORT_FD_BASE\",\n    0x03f2: \"PORT_FD_DOR\",\n    0x03f4: \"PORT_FD_STATUS\",\n    0x03f5: \"PORT_FD_DATA\",\n    0x03f6: \"PORT_HD_DATA\",\n    0x03f7: \"PORT_FD_DIR\",\n    0x03f8: \"PORT_SERIAL1\",\n    0x0cf8: \"PORT_PCI_CMD\",\n    0x0cf9: \"PORT_PCI_REBOOT\",\n    0x0cfc: \"PORT_PCI_DATA\",\n    0x0402: \"PORT_BIOS_DEBUG\",\n    0x0510: \"PORT_QEMU_CFG_CTL\",\n    0x0511: \"PORT_QEMU_CFG_DATA\",\n    0xb000: \"PORT_ACPI_PM_BASE\",\n    0xb100: \"PORT_SMB_BASE\",\n    0x8900: \"PORT_BIOS_APM\"\n};\n\nIO.prototype.get_port_description = function(addr)\n{\n    if(debug_port_list[addr])\n    {\n        return \"  (\" + debug_port_list[addr] + \")\";\n    }\n    else\n    {\n        return \"\";\n    }\n};\n\n\n","\"use strict\";\n\nvar\n/** @const */ LOG_ALL = -1,\n/** @const */ LOG_NONE = 0,\n\n/** @const */ LOG_OTHER =  0x000001,\n/** @const */ LOG_CPU =    0x000002,\n/** @const */ LOG_FPU =    0x000004,\n/** @const */ LOG_MEM =    0x000008,\n/** @const */ LOG_DMA =    0x000010,\n/** @const */ LOG_IO =     0x000020,\n/** @const */ LOG_PS2 =    0x000040,\n/** @const */ LOG_PIC =    0x000080,\n/** @const */ LOG_VGA =    0x000100,\n/** @const */ LOG_PIT =    0x000200,\n/** @const */ LOG_MOUSE =  0x000400,\n/** @const */ LOG_PCI =    0x000800,\n/** @const */ LOG_BIOS =   0x001000,\n/** @const */ LOG_FLOPPY = 0x002000,\n/** @const */ LOG_SERIAL = 0x004000,\n/** @const */ LOG_DISK =   0x008000,\n/** @const */ LOG_RTC =    0x010000,\n/** @const */ LOG_HPET =   0x020000,\n/** @const */ LOG_ACPI =   0x040000,\n/** @const */ LOG_APIC =   0x080000,\n/** @const */ LOG_NET =    0x100000,\n/** @const */ LOG_VIRTIO = 0x200000,\n/** @const */ LOG_9P =     0x400000,\n/** @const */ LOG_SB16 =   0x800000;\n\n\n/**\n * @const\n * @type {Array<Array<string|number>>}\n */\nvar LOG_NAMES = [\n    [1, \"\"],\n    [LOG_CPU, \"CPU\"],\n    [LOG_DISK, \"DISK\"],\n    [LOG_FPU, \"FPU\"],\n    [LOG_MEM, \"MEM\"],\n    [LOG_DMA, \"DMA\"],\n    [LOG_IO, \"IO\"],\n    [LOG_PS2, \"PS2\"],\n    [LOG_PIC, \"PIC\"],\n    [LOG_VGA, \"VGA\"],\n    [LOG_PIT, \"PIT\"],\n    [LOG_MOUSE, \"MOUS\"],\n    [LOG_PCI, \"PCI\"],\n    [LOG_BIOS, \"BIOS\"],\n    [LOG_FLOPPY, \"FLOP\"],\n    [LOG_SERIAL, \"SERI\"],\n    [LOG_RTC, \"RTC\"],\n    [LOG_HPET, \"HPET\"],\n    [LOG_ACPI, \"ACPI\"],\n    [LOG_APIC, \"APIC\"],\n    [LOG_NET, \"NET\"],\n    [LOG_VIRTIO, \"VIO\"],\n    [LOG_9P, \"9P\"],\n    [LOG_SB16, \"SB16\"]\n];\n\nvar\n/** @const */ TLB_SYSTEM_READ = 1,\n/** @const */ TLB_SYSTEM_WRITE = 2,\n/** @const */ TLB_USER_READ = 4,\n/** @const */ TLB_USER_WRITE = 8;\n\n\nvar\n\n// flags register bitflags\n/** @const */ flag_carry = 1,\n/** @const */ flag_parity = 4,\n/** @const */ flag_adjust = 16,\n/** @const */ flag_zero = 64,\n/** @const */ flag_sign = 128,\n/** @const */ flag_trap = 256,\n/** @const */ flag_interrupt = 512,\n/** @const */ flag_direction = 1024,\n/** @const */ flag_overflow = 2048,\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\n/** @const */ flag_nt = 1 << 14,\n/** @const */ flag_rf = 1 << 16,\n/** @const */ flag_vm = 1 << 17,\n/** @const */ flag_ac = 1 << 18,\n/** @const */ flag_vif = 1 << 19,\n/** @const */ flag_vip = 1 << 20,\n/** @const */ flag_id = 1 << 21,\n\n/**\n * default values of reserved flags bits\n * @const\n */\nflags_default = 1 << 1,\n\n/**\n * bitmask to select non-reserved flags bits\n * @const\n */\nflags_mask =\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\n    flag_vif | flag_vip | flag_id,\n\n\n/**\n * all arithmetic flags\n * @const\n */\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\n\n\n/**\n * opsizes used by get flag functions\n *\n * @const\n */\nOPSIZE_8 = 7,\n/** @const */\nOPSIZE_16 = 15,\n/** @const */\nOPSIZE_32 = 31,\n\n/** @const */\nPSE_ENABLED = 128,\n\n/** @const */ reg_eax = 0,\n/** @const */ reg_ecx = 1,\n/** @const */ reg_edx = 2,\n/** @const */ reg_ebx = 3,\n/** @const */ reg_esp = 4,\n/** @const */ reg_ebp = 5,\n/** @const */ reg_esi = 6,\n/** @const */ reg_edi = 7,\n\n/** @const */ reg_ax = 0,\n/** @const */ reg_cx = 2,\n/** @const */ reg_dx = 4,\n/** @const */ reg_bx = 6,\n/** @const */ reg_sp = 8,\n/** @const */ reg_bp = 10,\n/** @const */ reg_si = 12,\n/** @const */ reg_di = 14,\n\n/** @const */ reg_al = 0,\n/** @const */ reg_cl = 4,\n/** @const */ reg_dl = 8,\n/** @const */ reg_bl = 12,\n/** @const */ reg_ah = 1,\n/** @const */ reg_ch = 5,\n/** @const */ reg_dh = 9,\n/** @const */ reg_bh = 13,\n\n\n/** @const */ reg_es = 0,\n/** @const */ reg_cs = 1,\n/** @const */ reg_ss = 2,\n/** @const */ reg_ds = 3,\n/** @const */ reg_fs = 4,\n/** @const */ reg_gs = 5,\n\n\n/** @const */ reg_tr = 6, // task register\n/** @const */ reg_ldtr = 7; // local descriptor table register\n\nvar\n    /**\n     * The minimum number of bytes that can be memory-mapped\n     * by one device.\n     *\n     * @const\n     */\n    MMAP_BLOCK_BITS = 17,\n    /** @const */\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\n\n\n/** @const */\nvar MEM_PAGE_WRITTEN = 1;\n\n\n/** @const */\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\n\n\nvar\n    /** @const */\n    REPEAT_STRING_PREFIX_NONE = 0,\n    /** @const */\n    REPEAT_STRING_PREFIX_NZ = 1,\n    /** @const */\n    REPEAT_STRING_PREFIX_Z = 2;\n\nvar\n    /** @const */\n    CR0_PE = 1,\n    /** @const */\n    CR0_MP = 1 << 1,\n    /** @const */\n    CR0_EM = 1 << 2,\n    /** @const */\n    CR0_TS = 1 << 3,\n    /** @const */\n    CR0_ET = 1 << 4,\n    /** @const */\n    CR0_WP = 1 << 16,\n    /** @const */\n    CR0_NW = 1 << 29,\n    /** @const */\n    CR0_CD = 1 << 30,\n    /** @const */\n    CR0_PG = 1 << 31;\n\nvar\n    /** @const */\n    CR4_VME = 1,\n    /** @const */\n    CR4_PVI = 1 << 1,\n    /** @const */\n    CR4_TSD = 1 << 2,\n    /** @const */\n    CR4_PSE = 1 << 4,\n    /** @const */\n    CR4_DE = 1 << 3,\n    /** @const */\n    CR4_PAE = 1 << 5,\n    /** @const */\n    CR4_PGE = 1 << 7,\n    /** @const */\n    CR4_OSFXSR = 1 << 9,\n    /** @const */\n    CR4_OSXMMEXCPT = 1 << 10;\n\n\n// Segment prefixes must not collide with reg_*s variables\n// _ZERO is a special zero offset segment\nvar\n    /** @const */\n    SEG_PREFIX_NONE = -1,\n\n    /** @const */\n    SEG_PREFIX_ZERO = 7;\n\n\nvar\n    /** @const */\n    IA32_SYSENTER_CS = 0x174,\n\n    // Note: These are wrong in Intel's manuals. Fuck Intel\n    /** @const */\n    IA32_SYSENTER_ESP = 0x175,\n\n    /** @const */\n    IA32_SYSENTER_EIP = 0x176;\n\n/** @const */\nvar IA32_TIME_STAMP_COUNTER = 0x10;\n\n/** @const */\nvar IA32_PLATFORM_ID = 0x17;\n\n/** @const */\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\n\n/** @const */\nvar IA32_APIC_BASE_MSR = 0x1B;\n\n/** @const */\nvar IA32_BIOS_SIGN_ID = 0x8B;\n\n/** @const */\nvar IA32_MISC_ENABLE = 0x1A0;\n\n/** @const */\nvar IA32_RTIT_CTL = 0x570;\n\n/** @const */\nvar MSR_SMI_COUNT = 0x34;\n\n/** @const */\nvar IA32_MCG_CAP = 0x179;\n\n/** @const */\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\n\n/** @const */\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\n\n\n/** @const */\nvar IA32_APIC_BASE_BSP = 1 << 8;\n/** @const */\nvar IA32_APIC_BASE_EXTD = 1 << 10;\n/** @const */\nvar IA32_APIC_BASE_EN = 1 << 11;\n\n\n/** @const */ var TSR_BACKLINK = 0x00;\n/** @const */ var TSR_CR3 = 0x1C;\n/** @const */ var TSR_EIP = 0x20;\n/** @const */ var TSR_EFLAGS = 0x24;\n\n/** @const */ var TSR_EAX = 0x28;\n/** @const */ var TSR_ECX = 0x2c;\n/** @const */ var TSR_EDX = 0x30;\n/** @const */ var TSR_EBX = 0x34;\n/** @const */ var TSR_ESP = 0x38;\n/** @const */ var TSR_EBP = 0x3c;\n/** @const */ var TSR_ESI = 0x40;\n/** @const */ var TSR_EDI = 0x44;\n\n/** @const */ var TSR_ES = 0x48;\n/** @const */ var TSR_CS = 0x4c;\n/** @const */ var TSR_SS = 0x50;\n/** @const */ var TSR_DS = 0x54;\n/** @const */ var TSR_FS = 0x58;\n/** @const */ var TSR_GS = 0x5c;\n/** @const */ var TSR_LDT = 0x60;\n\n\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\n\n\n/** @const */\nvar PREFIX_MASK_REP = 0b11000;\n/** @const */\nvar PREFIX_REPZ = 0b01000;\n/** @const */\nvar PREFIX_REPNZ = 0b10000;\n\n/** @const */\nvar PREFIX_MASK_SEGMENT = 0b111;\n\n/** @const */\nvar PREFIX_MASK_OPSIZE = 0b100000;\n/** @const */\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\n\n/** @const */\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\n/** @const */\nvar PREFIX_F3 = PREFIX_REPZ; // alias\n/** @const */\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\n\n/** @const */\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\n","\"use strict\";\n\n/** @constructor */\nfunction v86(bus)\n{\n    /** @type {boolean} */\n    this.running = false;\n\n    /** @type {boolean} */\n    this.stopped = false;\n\n    /** @type {CPU} */\n    this.cpu = new CPU(bus);\n\n    this.bus = bus;\n    bus.register(\"cpu-init\", this.init, this);\n    bus.register(\"cpu-run\", this.run, this);\n    bus.register(\"cpu-stop\", this.stop, this);\n    bus.register(\"cpu-restart\", this.restart, this);\n\n    this.register_tick();\n}\n\nv86.prototype.run = function()\n{\n    if(!this.running)\n    {\n        this.bus.send(\"emulator-started\");\n        this.fast_next_tick();\n    }\n};\n\nv86.prototype.do_tick = function()\n{\n    if(this.stopped)\n    {\n        this.stopped = this.running = false;\n        this.bus.send(\"emulator-stopped\");\n        return;\n    }\n\n    this.running = true;\n    var dt = this.cpu.main_run();\n\n    if(dt <= 0)\n    {\n        this.fast_next_tick();\n    }\n    else\n    {\n        this.next_tick(dt);\n    }\n};\n\nv86.prototype.stop = function()\n{\n    if(this.running)\n    {\n        this.stopped = true;\n    }\n};\n\nv86.prototype.restart = function()\n{\n    this.cpu.reset();\n    this.cpu.load_bios();\n};\n\nv86.prototype.init = function(settings)\n{\n    this.cpu.init(settings, this.bus);\n    this.bus.send(\"emulator-ready\");\n};\n\nif(typeof setImmediate !== \"undefined\")\n{\n    /** @this {v86} */\n    var fast_next_tick = function()\n    {\n        setImmediate(() => { this.do_tick(); });\n    };\n\n    /** @this {v86} */\n    var register_tick = function() {};\n}\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\n{\n    // setImmediate shim for the browser.\n    // TODO: Make this deactivatable, for other applications\n    //       using postMessage\n\n    /** @const */\n    let MAGIC_POST_MESSAGE = 0xAA55;\n\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\n    };\n\n    /** @this {v86} */\n    register_tick = function()\n    {\n        window.addEventListener(\"message\", (e) =>\n        {\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\n            {\n                this.do_tick();\n            }\n        }, false);\n    };\n}\nelse\n{\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        setTimeout(() => { this.do_tick(); }, 0);\n    };\n\n    /** @this {v86} */\n    register_tick = function() {};\n}\n\nv86.prototype.fast_next_tick = fast_next_tick;\nv86.prototype.register_tick = register_tick;\n\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\n{\n    /** @this {v86} */\n    var next_tick = function(t)\n    {\n        if(t < 4 || document.hidden)\n        {\n            // Avoid sleeping for 1 second (happens if page is not\n            // visible), it can break boot processes. Also don't try to\n            // sleep for less than 4ms, since the value is clamped up\n            this.fast_next_tick();\n        }\n        else\n        {\n            setTimeout(() => { this.do_tick(); }, t);\n        }\n    };\n}\nelse\n{\n    // In environments that aren't browsers, we might as well use setTimeout\n    /** @this {v86} */\n    next_tick = function(t)\n    {\n        setTimeout(() => { this.do_tick(); }, t);\n    };\n}\n\nv86.prototype.next_tick = next_tick;\n\nv86.prototype.save_state = function()\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.save_state();\n};\n\nv86.prototype.restore_state = function(state)\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.restore_state(state);\n};\n\n\nif(typeof performance === \"object\" && performance.now)\n{\n    v86.microtick = function()\n    {\n        return performance.now();\n    };\n}\n//else if(typeof process === \"object\" && process.hrtime)\n//{\n//    v86.microtick = function()\n//    {\n//        var t = process.hrtime();\n//        return t[0] * 1000 + t[1] / 1e6;\n//    };\n//}\nelse\n{\n    v86.microtick = Date.now;\n}\n","\"use strict\";\n\n/** @const */\nvar CPU_LOG_VERBOSE = true;\n\n\n// Resources:\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n// http://ref.x86asm.net/geek32.html\n\n\n/** @constructor */\nfunction CPU(bus)\n{\n    /** @type {number} */\n    this.memory_size = 0;\n\n    // Note: Currently unused (degrades performance and not required by any OS\n    //       that we support)\n    this.a20_enabled = true;\n\n    this.mem_page_infos = undefined;\n\n    this.mem8 = new Uint8Array(0);\n    this.mem16 = new Uint16Array(this.mem8.buffer);\n    this.mem32s = new Int32Array(this.mem8.buffer);\n\n    this.segment_is_null = new Uint8Array(8);\n    this.segment_limits = new Uint32Array(8);\n    //this.segment_infos = new Uint32Array(8);\n    this.segment_offsets = new Int32Array(8);\n\n    /**\n     * Translation Lookaside Buffer\n     * @const\n     */\n    this.tlb_data = new Int32Array(1 << 20);\n\n    /**\n     * Information about which pages are cached in the tlb.\n     * By bit:\n     *   0 system, read\n     *   1 system, write\n     *   2 user, read\n     *   3 user, write\n     * @const\n     */\n    this.tlb_info = new Uint8Array(1 << 20);\n\n    /**\n     * Same as tlb_info, except it only contains global pages\n     * @const\n     */\n    this.tlb_info_global = new Uint8Array(1 << 20);\n\n    /**\n     * Wheter or not in protected mode\n     * @type {boolean}\n     */\n    this.protected_mode = false;\n\n    /**\n     * interrupt descriptor table\n     * @type {number}\n     */\n    this.idtr_size = 0;\n    /** @type {number} */\n    this.idtr_offset = 0;\n\n    /**\n     * global descriptor table register\n     * @type {number}\n     */\n    this.gdtr_size = 0;\n    /** @type {number} */\n    this.gdtr_offset = 0;\n\n    this.tss_size_32 = false;\n\n    /*\n     * whether or not a page fault occured\n     */\n    this.page_fault = false;\n\n    this.cr = new Int32Array(8);\n\n    /** @type {number} */\n    this.cr[0] = 0;\n    /** @type {number} */\n    this.cr[2] = 0;\n    /** @type {number} */\n    this.cr[3] = 0;\n    /** @type {number} */\n    this.cr[4] = 0;\n\n    // current privilege level\n    /** @type {number} */\n    this.cpl = 0;\n\n    // if false, pages are 4 KiB, else 4 Mib\n    /** @type {number} */\n    this.page_size_extensions = 0;\n\n    // current operand/address size\n    /** @type {boolean} */\n    this.is_32 = false;\n\n    /** @type {boolean} */\n    this.stack_size_32 = false;\n\n    /**\n     * Was the last instruction a hlt?\n     * @type {boolean}\n     */\n    this.in_hlt = false;\n\n    /** @type {number} */\n    this.last_virt_eip = 0;\n\n    /** @type {number} */\n    this.eip_phys = 0;\n\n    /** @type {number} */\n    this.last_virt_esp = 0;\n\n    /** @type {number} */\n    this.esp_phys = 0;\n\n\n    /** @type {number} */\n    this.sysenter_cs = 0;\n\n    /** @type {number} */\n    this.sysenter_esp = 0;\n\n    /** @type {number} */\n    this.sysenter_eip = 0;\n\n    /** @type {number} */\n    this.prefixes = 0;\n\n    /** @type {number} */\n    this.flags = 0;\n\n    /**\n     * bitmap of flags which are not updated in the flags variable\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\n     * @type {number}\n     */\n    this.flags_changed = 0;\n\n    /**\n     * the last 2 operators and the result and size of the last arithmetic operation\n     * @type {number}\n     */\n    this.last_op1 = 0;\n    /** @type {number} */\n    this.last_op2 = 0;\n    /** @type {number} */\n    this.last_op_size = 0;\n\n    /** @type {number} */\n    this.last_add_result = 0;\n\n    /** @type {number} */\n    this.last_result = 0;\n\n    this.mul32_result = new Int32Array(2);\n    this.div32_result = new Float64Array(2);\n\n    this.tsc_offset = 0;\n\n    /** @type {number} */\n    this.modrm_byte = 0;\n\n    /** @type {number} */\n    this.phys_addr = 0;\n\n    /** @type {number} */\n    this.phys_addr_high = 0;\n\n    /** @type {!Object} */\n    this.devices = {};\n\n    this.table = [];\n\n    // paging enabled\n    /** @type {boolean} */\n    this.paging = false;\n\n    /** @type {number} */\n    this.instruction_pointer = 0;\n\n    /** @type {number} */\n    this.previous_ip = 0;\n\n    this.apic_enabled = true;\n\n    /**\n     * @type {number}\n     */\n    this.timestamp_counter = 0;\n\n    // registers\n    this.reg32s = new Int32Array(8);\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    // mm0-mm7 split up into 32 bit pairs\n    this.reg_mmxs = new Int32Array(16);\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n\n    this.reg_xmm32s = new Int32Array(8 * 4);\n    this.mxcsr = 0x1F80;\n\n    // segment registers, tr and ldtr\n    this.sreg = new Uint16Array(8);\n\n    // debug registers\n    this.dreg = new Int32Array(8);\n\n\n    // managed in io.js\n    /** @const */ this.memory_map_read8 = [];\n    /** @const */ this.memory_map_write8 = [];\n    /** @const */ this.memory_map_read32 = [];\n    /** @const */ this.memory_map_write32 = [];\n\n    /**\n     * @const\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\n     */\n    this.bios = {\n        main: null,\n        vga: null,\n    };\n\n    /** @type {number} */\n    this.fw_value = 0;\n\n    this.io = undefined;\n    this.fpu = undefined;\n\n    this.bus = bus;\n\n    dbg_assert(this.table16 && this.table32);\n    dbg_assert(this.table0F_16 && this.table0F_32);\n\n    this.update_operand_size();\n\n    this.tsc_offset = v86.microtick();\n\n    this.debug_init();\n\n    this.init2();\n\n    //Object.seal(this);\n}\n\nCPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.memory_size;\n    state[1] = this.segment_is_null;\n    state[2] = this.segment_offsets;\n    state[3] = this.segment_limits;\n    state[4] = this.protected_mode;\n    state[5] = this.idtr_offset;\n    state[6] = this.idtr_size;\n    state[7] = this.gdtr_offset;\n    state[8] = this.gdtr_size;\n    state[9] = this.page_fault;\n    state[10] = this.cr;\n    state[11] = this.cpl;\n    state[12] = this.page_size_extensions;\n    state[13] = this.is_32;\n\n    state[16] = this.stack_size_32;\n    state[17] = this.in_hlt;\n    state[18] = this.last_virt_eip;\n    state[19] = this.eip_phys;\n    state[20] = this.last_virt_esp;\n    state[21] = this.esp_phys;\n    state[22] = this.sysenter_cs;\n    state[23] = this.sysenter_eip;\n    state[24] = this.sysenter_esp;\n    state[25] = this.prefixes;\n    state[26] = this.flags;\n    state[27] = this.flags_changed;\n    state[28] = this.last_op1;\n    state[29] = this.last_op2;\n    state[30] = this.last_op_size;\n    state[31] = this.last_add_result;\n    state[32] = this.modrm_byte;\n\n    state[36] = this.paging;\n    state[37] = this.instruction_pointer;\n    state[38] = this.previous_ip;\n    state[39] = this.reg32s;\n    state[40] = this.sreg;\n    state[41] = this.dreg;\n    state[42] = this.mem8;\n    state[43] = this.fpu;\n\n    state[45] = this.devices.virtio;\n    state[46] = this.devices.apic;\n    state[47] = this.devices.rtc;\n    state[48] = this.devices.pci;\n    state[49] = this.devices.dma;\n    state[50] = this.devices.acpi;\n    state[51] = this.devices.hpet;\n    state[52] = this.devices.vga;\n    state[53] = this.devices.ps2;\n    state[54] = this.devices.uart;\n    state[55] = this.devices.fdc;\n    state[56] = this.devices.cdrom;\n    state[57] = this.devices.hda;\n    state[58] = this.devices.pit;\n    state[59] = this.devices.net;\n    state[60] = this.devices.pic;\n    state[61] = this.devices.sb16;\n\n    state[62] = this.a20_enabled;\n    state[63] = this.fw_value;\n\n    state[64] = this.devices.ioapic;\n\n    state[65] = this.tss_size_32;\n\n    state[66] = this.reg_mmxs;\n\n    return state;\n};\n\nCPU.prototype.set_state = function(state)\n{\n    this.memory_size = state[0];\n    this.segment_is_null = state[1];\n    this.segment_offsets = state[2];\n    this.segment_limits = state[3];\n    this.protected_mode = state[4];\n    this.idtr_offset = state[5];\n    this.idtr_size = state[6];\n    this.gdtr_offset = state[7];\n    this.gdtr_size = state[8];\n    this.page_fault = state[9];\n    this.cr = state[10];\n    this.cpl = state[11];\n    this.page_size_extensions = state[12];\n    this.is_32 = state[13];\n\n    this.stack_size_32 = state[16];\n\n    this.in_hlt = state[17];\n    this.last_virt_eip = state[18];\n    this.eip_phys = state[19];\n    this.last_virt_esp = state[20];\n    this.esp_phys = state[21];\n    this.sysenter_cs = state[22];\n    this.sysenter_eip = state[23];\n    this.sysenter_esp = state[24];\n    this.prefixes = state[25];\n\n    this.flags = state[26];\n    this.flags_changed = state[27];\n    this.last_op1 = state[28];\n    this.last_op2 = state[29];\n    this.last_op_size = state[30];\n    this.last_add_result = state[31];\n    this.modrm_byte = state[32];\n\n    this.paging = state[36];\n    this.instruction_pointer = state[37];\n    this.previous_ip = state[38];\n    this.reg32s = state[39];\n    this.sreg = state[40];\n    this.dreg = state[41];\n    this.mem8 = state[42];\n    this.fpu = state[43];\n\n    this.devices.virtio = state[45];\n    this.devices.apic = state[46];\n    this.devices.rtc = state[47];\n    this.devices.pci = state[48];\n    this.devices.dma = state[49];\n    this.devices.acpi = state[50];\n    this.devices.hpet = state[51];\n    this.devices.vga = state[52];\n    this.devices.ps2 = state[53];\n    this.devices.uart = state[54];\n    this.devices.fdc = state[55];\n    this.devices.cdrom = state[56];\n    this.devices.hda = state[57];\n    this.devices.pit = state[58];\n    this.devices.net = state[59];\n    this.devices.pic = state[60];\n    this.devices.sb16 = state[61];\n\n    this.a20_enabled = state[62];\n    this.fw_value = state[63];\n\n    this.devices.ioapic = state[64];\n\n    this.tss_size_32 = state[65];\n\n    this.reg_mmxs = state[66];\n\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\n\n\n    this.full_clear_tlb();\n    // tsc_offset?\n\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n    this.update_operand_size();\n};\n\n\n/**\n * @return {number} time in ms until this method should becalled again\n */\nCPU.prototype.main_run = function()\n{\n    if(this.in_hlt)\n    {\n        //if(false)\n        //{\n        //    var _t = this.hlt_loop();\n        //    var t = 0;\n        //}\n        //else\n        //{\n            var t = this.hlt_loop();\n        //}\n\n        if(this.in_hlt)\n        {\n            return t;\n        }\n    }\n\n    this.do_run();\n\n    return 0;\n};\n\nCPU.prototype.exception_cleanup = function(e)\n{\n    if(e === MAGIC_CPU_EXCEPTION)\n    {\n        // A legit CPU exception (for instance, a page fault happened)\n        // call_interrupt_vector has already been called at this point,\n        // so we just need to reset some state\n\n        this.page_fault = false;\n\n        // restore state from prefixes\n        this.clear_prefixes();\n    }\n    else\n    {\n        console.log(e);\n        console.log(e.stack);\n        //var e = new Error(e.message);\n        //Error.captureStackTrace && Error.captureStackTrace(e);\n        throw e;\n    }\n};\n\nCPU.prototype.reboot_internal = function()\n{\n    this.reset();\n    this.load_bios();\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.reset = function()\n{\n    this.a20_enabled = true;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.segment_is_null[i] = 0;\n        this.segment_limits[i] = 0;\n        //this.segment_infos = new Uint32Array(8);\n        this.segment_offsets[i] = 0;\n    }\n\n    this.full_clear_tlb();\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg32s[i] = 0;\n        this.sreg[i] = 0;\n        this.cr[i] = 0;\n        this.dreg[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_mmxs.length; i++)\n    {\n        this.reg_mmxs[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\n    {\n        this.reg_xmm32s[i] = 0;\n    }\n    this.mxcsr = 0x1F80;\n\n    this.protected_mode = false;\n\n    // http://www.sandpile.org/x86/initial.htm\n    this.idtr_size = 0;\n    this.idtr_offset = 0;\n\n    this.gdtr_size = 0;\n    this.gdtr_offset = 0;\n\n    this.page_fault = false;\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\n    this.cr[2] = 0;\n    this.cr[3] = 0;\n    this.cr[4] = 0;\n    this.dreg[6] = 0xFFFF0FF0|0;\n    this.dreg[7] = 0x400;\n    this.cpl = 0;\n    this.paging = false;\n    this.page_size_extensions = 0;\n    this.is_32 = false;\n    this.stack_size_32 = false;\n    this.prefixes = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.update_operand_size();\n\n    this.timestamp_counter = 0;\n    this.previous_ip = 0;\n    this.in_hlt = false;\n\n    this.sysenter_cs = 0;\n    this.sysenter_esp = 0;\n    this.sysenter_eip = 0;\n\n    this.flags = flags_default;\n    this.flags_changed = 0;\n\n    this.last_result = 0;\n    this.last_add_result = 0;\n    this.last_op1 = 0;\n    this.last_op2 = 0;\n    this.last_op_size = 0;\n\n    this.tsc_offset = v86.microtick();\n\n    this.instruction_pointer = 0xFFFF0;\n    this.switch_cs_real_mode(0xF000);\n\n    this.switch_seg(reg_ss, 0x30);\n    this.reg16[reg_sp] = 0x100;\n\n    if(this.devices.virtio)\n    {\n        this.devices.virtio.reset();\n    }\n\n    this.fw_value = 0;\n};\n\n/** @export */\nCPU.prototype.create_memory = function(size)\n{\n    if(size < 1024 * 1024)\n    {\n        size = 1024 * 1024;\n    }\n    else if((size | 0) < 0)\n    {\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\n    }\n\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\n    dbg_assert((size | 0) > 0);\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    this.memory_size = size;\n\n    var buffer = new ArrayBuffer(size);\n\n    this.mem8 = new Uint8Array(buffer);\n    this.mem16 = new Uint16Array(buffer);\n    this.mem32s = new Int32Array(buffer);\n};\n\nCPU.prototype.init = function(settings, device_bus)\n{\n    this.create_memory(typeof settings.memory_size === \"number\" ?\n        settings.memory_size : 1024 * 1024 * 64);\n\n    this.reset();\n\n    var io = new IO(this);\n    this.io = io;\n\n    this.bios.main = settings.bios;\n    this.bios.vga = settings.vga_bios;\n\n    this.load_bios();\n\n    var a20_byte = 0;\n\n    io.register_read(0xB3, this, function()\n    {\n        // seabios smm_relocate_and_restore\n        dbg_log(\"port 0xB3 read\");\n        return 0;\n    });\n\n    io.register_read(0x92, this, function()\n    {\n        return a20_byte;\n    });\n\n    io.register_write(0x92, this, function(out_byte)\n    {\n        a20_byte = out_byte;\n    });\n\n    io.register_read(0x511, this, function()\n    {\n        // bios config port (used by seabios and kvm-unit-test)\n        let result = this.fw_value & 0xFF;\n        this.fw_value >>>= 8;\n        return result;\n    });\n    io.register_write(0x510, this, undefined, function(value)\n    {\n        dbg_log(\"bios config port, index=\" + h(value));\n\n        if(value === FW_CFG_SIGNATURE)\n        {\n            // We could pretend to be QEMU here to control certain options in\n            // seabios, but for now this isn't needed\n            this.fw_value = 0xfab0fab0|0;\n        }\n        else if(value === FW_CFG_RAM_SIZE)\n        {\n            this.fw_value = this.memory_size;\n        }\n        else if(value === FW_CFG_NB_CPUS)\n        {\n            this.fw_value = 1;\n        }\n        else\n        {\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\n            this.fw_value = 0;\n        }\n    });\n\n    if(DEBUG)\n    {\n        // Use by linux for port-IO delay\n        // Avoid generating tons of debug messages\n        io.register_write(0x80, this, function(out_byte)\n        {\n        });\n    }\n\n    this.devices = {};\n\n    // TODO: Make this more configurable\n    if(settings.load_devices)\n    {\n        this.devices.pic = new PIC(this);\n        this.devices.pci = new PCI(this);\n\n        if(ENABLE_ACPI)\n        {\n            this.devices.ioapic = new IOAPIC(this);\n            this.devices.apic = new APIC(this);\n            this.devices.acpi = new ACPI(this);\n        }\n\n        this.devices.rtc = new RTC(this);\n        this.fill_cmos(this.devices.rtc, settings);\n\n        this.devices.dma = new DMA(this);\n\n        if(ENABLE_HPET)\n        {\n            this.devices.hpet = new HPET(this);\n        }\n\n        this.devices.vga = new VGAScreen(this, device_bus,\n                settings.vga_memory_size || 8 * 1024 * 1024);\n\n        this.fpu = new FPU(this);\n\n        this.devices.ps2 = new PS2(this, device_bus);\n\n        this.devices.uart = new UART(this, 0x3F8, device_bus);\n\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\n\n        var ide_device_count = 0;\n\n        if(settings.hda)\n        {\n            this.devices.hda = new IDEDevice(this, settings.hda, false, ide_device_count++, device_bus);\n        }\n\n        if(settings.cdrom)\n        {\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, true, ide_device_count++, device_bus);\n        }\n\n        if(settings.hdb)\n        {\n            this.devices.hdb = new IDEDevice(this, settings.hdb, false, ide_device_count++, device_bus);\n        }\n\n        this.devices.pit = new PIT(this, device_bus);\n\n        if(settings.enable_ne2k)\n        {\n            this.devices.net = new Ne2k(this, device_bus);\n        }\n\n        if(settings.fs9p)\n        {\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\n        }\n\n        if(true)\n        {\n            this.devices.sb16 = new SB16(this, device_bus);\n        }\n    }\n\n    if(settings.multiboot)\n    {\n        dbg_assert(settings.multiboot.buffer);\n        this.load_multiboot(settings.multiboot.buffer);\n    }\n\n    if(DEBUG)\n    {\n        this.debug.init();\n    }\n};\n\nCPU.prototype.load_multiboot = function(buffer)\n{\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\n\n    const MAGIC = 0x1BADB002;\n    const ELF_MAGIC = 0x464C457F;\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\n    const MULTIBOOT_SEARCH_BYTES = 8192;\n\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\n    {\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\n    }\n    else\n    {\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\n    }\n\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\n    {\n        if(buf32[offset >> 2] === MAGIC)\n        {\n            var flags = buf32[offset + 4 >> 2];\n            var checksum = buf32[offset + 8 >> 2];\n            var total = MAGIC + flags + checksum | 0;\n\n            if(total)\n            {\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\n                continue;\n            }\n        }\n        else\n        {\n            continue;\n        }\n\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\n\n        this.reg32s[reg_eax] = 0x2BADB002;\n\n        let multiboot_info_addr = 0x7C00;\n        this.reg32s[reg_ebx] = multiboot_info_addr;\n        this.write32(multiboot_info_addr, 0);\n\n        this.cr[0] = 1;\n        this.protected_mode = true;\n        this.flags = flags_default;\n        this.update_cs_size(true);\n        this.stack_size_32 = true;\n\n        for(var i = 0; i < 6; i++)\n        {\n            this.segment_is_null[i] = 0;\n            this.segment_offsets[i] = 0;\n            this.segment_limits[i] = 0xFFFFFFFF;\n\n            // Value doesn't matter, OS isn't allowed to reload without setting\n            // up a proper GDT\n            this.sreg[i] = 0xB002;\n        }\n\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\n        {\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\n\n            var header_addr = buf32[offset + 12 >> 2];\n            var load_addr = buf32[offset + 16 >> 2];\n            var load_end_addr = buf32[offset + 20 >> 2];\n            var bss_end_addr = buf32[offset + 24 >> 2];\n            var entry_addr = buf32[offset + 28 >> 2];\n\n            dbg_log(\"header=\" + h(header_addr, 8) +\n                    \" load=\" + h(load_addr, 8) +\n                    \" load_end=\" + h(load_end_addr, 8) +\n                    \" bss_end=\" + h(bss_end_addr, 8) +\n                    \" entry=\" + h(entry_addr, 8));\n\n            dbg_assert(load_addr <= header_addr);\n\n            var file_start = offset - (header_addr - load_addr);\n\n            if(load_end_addr === 0)\n            {\n                var length = undefined;\n            }\n            else\n            {\n                dbg_assert(load_end_addr >= load_addr);\n                var length = load_end_addr - load_addr;\n            }\n\n            let blob = new Uint8Array(buffer, file_start, length);\n            this.write_blob(blob, load_addr);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\n        }\n        else if(buf32[0] === ELF_MAGIC)\n        {\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\n\n            let elf = read_elf(buffer);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\n\n            for(let program of elf.program_headers)\n            {\n                if(program.type === 0)\n                {\n                    // null\n                }\n                else if(program.type === 1)\n                {\n                    // load\n\n                    // Since multiboot specifies that paging is disabled,\n                    // virtual and physical address must be equal\n                    dbg_assert(program.paddr === program.vaddr);\n                    dbg_assert(program.filesz <= program.memsz);\n\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\n                    this.write_blob(blob, program.paddr);\n                }\n                else if(program.type === 4 ||\n                        program.type === 0x6474e550 ||\n                        program.type === 0x6474e551)\n                {\n                    // ignore for now\n                }\n                else\n                {\n                    dbg_assert(false, \"unimplemented elf section type\");\n                }\n            }\n        }\n        else\n        {\n            dbg_assert(false, \"Not a bootable multiboot format\");\n        }\n\n        // only for kvm-unit-test\n        this.io.register_write_consecutive(0xF4, this,\n            function(value)\n            {\n                console.log(\"Test exited with code \" + h(value, 2));\n                throw \"HALT\";\n            },\n            function() {},\n            function() {},\n            function() {});\n\n        // only for kvm-unit-test\n        for(let i = 0xE; i <= 0xF; i++)\n        {\n            this.io.register_write(0x2000 + i, this,\n                function(value)\n                {\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\n                    if(value)\n                    {\n                        this.device_raise_irq(i);\n                    }\n                    else\n                    {\n                        this.device_lower_irq(i);\n                    }\n                });\n        }\n\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\n        this.debug.dump_state();\n        this.debug.dump_regs();\n\n        break;\n    }\n};\n\nCPU.prototype.fill_cmos = function(rtc, settings)\n{\n    var boot_order = settings.boot_order || 0x213;\n\n    // Used by seabios to determine the boot order\n    //   Nibble\n    //   1: FloppyPrio\n    //   2: HDPrio\n    //   3: CDPrio\n    //   4: BEVPrio\n    // bootflag 1, high nibble, lowest priority\n    // Low nibble: Disable floppy signature check (1)\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\n\n    // bootflag 2, both nibbles, high and middle priority\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\n\n    // 640k or less if less memory is used\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\n\n    var memory_above_1m = 0; // in k\n    if(this.memory_size >= 1024 * 1024)\n    {\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\n    }\n\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\n\n    var memory_above_16m = 0; // in 64k blocks\n    if(this.memory_size >= 16 * 1024 * 1024)\n    {\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\n    }\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\n\n    // memory above 4G (not supported by this emulator)\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\n\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\n\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\n\n    // Used by bochs BIOS to skip the boot menu delay.\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\n};\n\nCPU.prototype.load_bios = function()\n{\n    var bios = this.bios.main;\n    var vga_bios = this.bios.vga;\n\n    if(!bios)\n    {\n        dbg_log(\"Warning: No BIOS\");\n        return;\n    }\n\n    // load bios\n    var data = new Uint8Array(bios),\n        start = 0x100000 - bios.byteLength;\n\n    this.write_blob(data, start);\n\n    if(vga_bios)\n    {\n        // load vga bios\n        var vga_bios8 = new Uint8Array(vga_bios);\n\n        // older versions of seabios\n        this.write_blob(vga_bios8, 0xC0000);\n\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\n        this.io.mmap_register(0xFEB00000, 0x100000,\n            function(addr)\n            {\n                addr = (addr - 0xFEB00000) | 0;\n                if(addr < vga_bios8.length)\n                {\n                    return vga_bios8[addr];\n                }\n                else\n                {\n                    return 0;\n                }\n            },\n            function(addr, value)\n            {\n                dbg_assert(false, \"Unexpected write to VGA rom\");\n            });\n    }\n    else\n    {\n        dbg_log(\"Warning: No VGA BIOS\");\n    }\n\n    // seabios expects the bios to be mapped to 0xFFF00000 also\n    this.io.mmap_register(0xFFF00000, 0x100000,\n        function(addr)\n        {\n            addr &= 0xFFFFF;\n            return this.mem8[addr];\n        }.bind(this),\n        function(addr, value)\n        {\n            addr &= 0xFFFFF;\n            this.mem8[addr] = value;\n        }.bind(this));\n};\n\nCPU.prototype.do_run = function()\n{\n    /** @type {number} */\n    var start = v86.microtick();\n\n    /** @type {number} */\n    var now = start;\n\n    // outer loop:\n    // runs cycles + timers\n    for(; now - start < TIME_PER_FRAME;)\n    {\n        this.run_hardware_timers(now);\n        this.handle_irqs();\n\n        this.do_many_cycles();\n\n        if(this.in_hlt)\n        {\n            return;\n        }\n\n        now = v86.microtick();\n    }\n};\n\nCPU.prototype.do_many_cycles = function()\n{\n    try {\n        this.do_many_cycles_unsafe();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.do_many_cycles_unsafe = function()\n{\n    // inner loop:\n    // runs only cycles\n    for(var k = LOOP_COUNTER; k--;)\n    {\n        this.cycle_internal();\n    }\n};\n\n// Some functions must not be inlined, because then more code is in the\n// deoptimized try-catch block.\n// This trick is a bit ugly, but it works without further complication.\nif(typeof window !== \"undefined\")\n{\n    window[\"__no_inline_for_closure_compiler__\"] = [\n        CPU.prototype.exception_cleanup,\n        CPU.prototype.do_many_cycles_unsafe,\n        CPU.prototype.do_many_cycles,\n    ];\n}\n\n/** @const */\nvar PROFILING = false;\n\nif(PROFILING)\n{\n    var instruction_total = new Float64Array(256);\n    var instruction_count = new Float64Array(256);\n\n    window[\"print_profiling\"] = function print_profiling()\n    {\n        var prof_instructions = [];\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\n            n: h(i, 2),\n            total: instruction_total[i],\n            count: instruction_count[i],\n            per: (instruction_total[i] / instruction_count[i]) || 0,\n        };\n\n        console.log(\"count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\n\n        console.log(\"time:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\n\n        console.log(\"time/count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\n    };\n}\n\n/**\n * execute a single instruction cycle on the cpu\n * this includes reading all prefixes and the whole instruction\n */\nCPU.prototype.cycle_internal = function()\n{\n    this.previous_ip = this.instruction_pointer;\n\n    this.timestamp_counter++;\n\n    if(PROFILING)\n    {\n        var start = performance.now();\n    }\n\n    var opcode = this.read_imm8();\n    //this.translate_address_read(this.instruction_pointer + 15|0)\n\n    if(DEBUG)\n    {\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\n    }\n\n    // call the instruction\n    this.table[opcode](this);\n\n    if(PROFILING)\n    {\n        var end = performance.now();\n        instruction_total[opcode] += end - start;\n        instruction_count[opcode]++;\n    }\n\n    if(this.flags & flag_trap)\n    {\n        // TODO\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\n    }\n};\n\n/** @export */\nCPU.prototype.cycle = function()\n{\n    try\n    {\n        this.cycle_internal();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.segment_prefix_op = function(sreg)\n{\n    dbg_assert(sreg <= 5);\n    this.prefixes |= sreg + 1;\n    this.run_prefix_instruction();\n    this.prefixes = 0;\n};\n\nCPU.prototype.run_prefix_instruction = function()\n{\n    if(this.is_osize_32())\n    {\n        this.table32[this.read_imm8()](this);\n    }\n    else\n    {\n        this.table16[this.read_imm8()](this);\n    }\n};\n\nCPU.prototype.hlt_loop = function()\n{\n    dbg_assert(this.flags & flag_interrupt);\n    //dbg_log(\"In HLT loop\", LOG_CPU);\n\n    this.run_hardware_timers(v86.microtick());\n    this.handle_irqs();\n\n    return 0;\n};\n\nCPU.prototype.run_hardware_timers = function(now)\n{\n    if(ENABLE_HPET)\n    {\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\n        this.devices.hpet.timer(now);\n    }\n    else\n    {\n        var pit_time = this.devices.pit.timer(now, false);\n        var rtc_time = this.devices.rtc.timer(now, false);\n    }\n\n    if(ENABLE_ACPI)\n    {\n        this.devices.acpi.timer(now);\n        this.devices.apic.timer(now);\n    }\n};\n\nCPU.prototype.clear_prefixes = function()\n{\n    this.prefixes = 0;\n};\n\nCPU.prototype.set_cr0 = function(cr0)\n{\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\n\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\n    {\n        // cannot load PG without PE\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.cr[0] = cr0;\n\n    if(!this.fpu)\n    {\n        // if there's no FPU, keep emulation set\n        this.cr[0] |= CR0_EM;\n    }\n    this.cr[0] |= CR0_ET;\n\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\n\n    dbg_assert(typeof this.paging === \"boolean\");\n    if(new_paging !== this.paging)\n    {\n        this.paging = new_paging;\n        this.full_clear_tlb();\n    }\n\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\n};\n\nCPU.prototype.set_cr4 = function(cr4)\n{\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.cr[4] ^ cr4) & CR4_PGE)\n    {\n        if(cr4 & CR4_PGE)\n        {\n            // The PGE bit has been enabled. The global TLB is\n            // still empty, so we only have to copy it over\n            this.clear_tlb();\n        }\n        else\n        {\n            // Clear the global TLB\n            this.full_clear_tlb();\n        }\n    }\n\n    this.cr[4] = cr4;\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\n\n    if(cr4 & CR4_PAE)\n    {\n        throw this.debug.unimpl(\"PAE\");\n    }\n\n    if(cr4 & 0xFFFFF900)\n    {\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\n        this.trigger_ud();\n    }\n\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\n};\n\nCPU.prototype.cpl_changed = function()\n{\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.read_imm8 = function()\n{\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\n    {\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\n    }\n\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\n\n    return data8;\n};\n\nCPU.prototype.read_imm8s = function()\n{\n    return this.read_imm8() << 24 >> 24;\n};\n\nCPU.prototype.read_imm16 = function()\n{\n    // Two checks in one comparison:\n    //    1. Did the high 20 bits of eip change\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\n    {\n        return this.read_imm8() | this.read_imm8() << 8;\n    }\n\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\n\n    return data16;\n};\n\nCPU.prototype.read_imm32s = function()\n{\n    // Analogue to the above comment\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\n    {\n        return this.read_imm16() | this.read_imm16() << 16;\n    }\n\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\n\n    return data32;\n};\n\n/*\n * Create an internal data unit to represent 64 bits of data\n */\nCPU.prototype.create_atom64s = function(low, high)\n{\n    let data = new Int32Array(2);\n    data[0] = low;\n    data[1] = high;\n    return data;\n};\n\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\n{\n    let data = new Int32Array(4);\n    data[0] = d0;\n    data[1] = d1;\n    data[2] = d2;\n    data[3] = d3;\n    return data;\n}\n\nCPU.prototype.read_modrm_byte = function()\n{\n    this.modrm_byte = this.read_imm8();\n};\n\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\n\nCPU.prototype.init2 = function () {};\nCPU.prototype.branch_taken = function () {};\nCPU.prototype.branch_not_taken = function () {};\nCPU.prototype.diverged = function () {};\n\nCPU.prototype.modrm_resolve = function(modrm_byte)\n{\n    dbg_assert(modrm_byte < 0xC0);\n\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\n};\n\nCPU.prototype.sib_resolve = function(mod)\n{\n    return this.sib_table[this.read_sib()](this, mod);\n};\n\nCPU.prototype.clear_instruction_cache = function() {};\n\n// read word from a page boundary, given 2 physical addresses\nCPU.prototype.virt_boundary_read16 = function(low, high)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    return this.read8(low) | this.read8(high) << 8;\n};\n\n// read doubleword from a page boundary, given 2 addresses\nCPU.prototype.virt_boundary_read32s = function(low, high)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    var mid;\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            mid = this.read_aligned16(high - 2 >> 1);\n        }\n        else\n        {\n            // 0xFFD\n            mid = this.read_aligned16(low + 1 >> 1);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\n    }\n\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\n};\n\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    this.write8(low, value);\n    this.write8(high, value >> 8);\n};\n\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    this.write8(low, value);\n    this.write8(high, value >> 24);\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            this.write8(high - 2, value >> 8);\n            this.write8(high - 1, value >> 16);\n        }\n        else\n        {\n            // 0xFFD\n            this.write8(low + 1 | 0, value >> 8);\n            this.write8(low + 2 | 0, value >> 16);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        this.write8(low + 1 | 0, value >> 8);\n        this.write8(high - 1, value >> 16);\n    }\n};\n\n// safe_read, safe_write\n// read or write byte, word or dword to the given *virtual* address,\n// and be safe on page boundaries\n\nCPU.prototype.safe_read8 = function(addr)\n{\n    dbg_assert(addr < 0x80000000);\n    return this.read8(this.translate_address_read(addr));\n};\n\nCPU.prototype.safe_read16 = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\n    {\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\n    }\n    else\n    {\n        return this.read16(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read32s = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\n    {\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\n    }\n    else\n    {\n        return this.read32s(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read64s = function(addr)\n{\n    let data = this.create_atom64s(0, 0);\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\n    {\n        data[0] = this.safe_read32s(addr);\n        data[1] = this.safe_read32s(addr + 4 | 0);\n    }\n    else\n    {\n        data[0] = this.read32s(this.translate_address_read(addr));\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\n    }\n    return data;\n};\n\nCPU.prototype.safe_read128s_aligned = function(addr)\n{\n    dbg_assert((addr & 0xF) === 0);\n    let phys = this.translate_address_read(addr);\n    return this.create_atom128s(\n        this.read32s(phys),\n        this.read32s(phys + 4 | 0),\n        this.read32s(phys + 8 | 0),\n        this.read32s(phys + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_read128s_unaligned = function(addr)\n{\n    return this.create_atom128s(\n        this.safe_read32s(addr),\n        this.safe_read32s(addr + 4 | 0),\n        this.safe_read32s(addr + 8 | 0),\n        this.safe_read32s(addr + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_write8 = function(addr, value)\n{\n    dbg_assert(addr < 0x80000000);\n    this.write8(this.translate_address_write(addr), value);\n};\n\nCPU.prototype.safe_write16 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) === 0xFFF)\n    {\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\n    }\n    else\n    {\n        this.write16(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write32 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) >= 0xFFD)\n    {\n        // XXX\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\n    }\n    else\n    {\n        this.write32(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write64 = function(addr, low, high)\n{\n    this.writable_or_pagefault(addr, 8);\n    this.safe_write32(addr, low);\n    this.safe_write32(addr + 4 | 0, high);\n};\n\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\n{\n    this.writable_or_pagefault(addr, 16);\n    this.safe_write32(addr, d0);\n    this.safe_write32(addr + 4 | 0, d1);\n    this.safe_write32(addr + 8 | 0, d2);\n    this.safe_write32(addr + 12 | 0, d3);\n};\n\n\n// read 2 or 4 byte from ip, depending on address size attribute\nCPU.prototype.read_moffs = function()\n{\n    if(this.is_asize_32())\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\n    }\n    else\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\n    }\n};\n\nCPU.prototype.getiopl = function()\n{\n    return this.flags >> 12 & 3;\n};\n\nCPU.prototype.vm86_mode = function()\n{\n    return !!(this.flags & flag_vm);\n};\n\nCPU.prototype.get_eflags = function()\n{\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\n};\n\n/**\n * Update the flags register depending on iopl and cpl\n */\nCPU.prototype.update_eflags = function(new_flags)\n{\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\n        clear = ~flag_vip & ~flag_vif & flags_mask;\n\n    if(this.flags & flag_vm)\n    {\n        // other case needs to be handled in popf or iret\n        dbg_assert(this.getiopl() === 3);\n\n        dont_update |= flag_iopl;\n\n        // don't clear vip or vif\n        clear |= flag_vip | flag_vif;\n    }\n    else\n    {\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\n\n        if(this.cpl)\n        {\n            // cpl > 0\n            // cannot update iopl\n            dont_update |= flag_iopl;\n\n            if(this.cpl > this.getiopl())\n            {\n                // cpl > iopl\n                // cannot update interrupt flag\n                dont_update |= flag_interrupt;\n            }\n        }\n    }\n\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\n\n    this.flags_changed = 0;\n};\n\nCPU.prototype.get_stack_reg = function()\n{\n    if(this.stack_size_32)\n    {\n        return this.reg32s[reg_esp];\n    }\n    else\n    {\n        return this.reg16[reg_sp];\n    }\n};\n\nCPU.prototype.set_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] = value;\n    }\n    else\n    {\n        this.reg16[reg_sp] = value;\n    }\n};\n\nCPU.prototype.adjust_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] += value;\n    }\n    else\n    {\n        this.reg16[reg_sp] += value;\n    }\n};\n\nCPU.prototype.get_stack_pointer = function(mod)\n{\n    if(this.stack_size_32)\n    {\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\n    }\n    else\n    {\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\n    }\n};\n\n/*\n * returns the \"real\" instruction pointer,\n * without segment offset\n */\nCPU.prototype.get_real_eip = function()\n{\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\n};\n\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\n{\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\n\n    this.debug.debug_interrupt(interrupt_nr);\n\n    dbg_assert(error_code === false || typeof error_code === \"number\");\n\n    // we have to leave hlt_loop at some point, this is a\n    // good place to do it\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\n    this.in_hlt = false;\n\n    if(this.protected_mode)\n    {\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\n        {\n            throw this.debug.unimpl(\"VME\");\n        }\n\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\n        {\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\n        {\n            dbg_log(interrupt_nr, LOG_CPU);\n            dbg_trace(LOG_CPU);\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\n        dbg_assert((addr & 0xFFF) < 0xFF8);\n\n        if(this.paging)\n        {\n            addr = this.translate_address_system_read(addr);\n        }\n\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\n        var selector = this.read16(addr + 2 | 0);\n        var access = this.read8(addr + 5 | 0);\n        var dpl = access >> 5 & 3;\n        var type = access & 31;\n\n        if((access & 0x80) === 0)\n        {\n            // present bit not set\n            throw this.debug.unimpl(\"#NP handler\");\n        }\n\n        if(is_software_int && dpl < this.cpl)\n        {\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(interrupt_nr << 3 | 2);\n        }\n\n        if(type === 5)\n        {\n            // task gate\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\n            dbg_trace(LOG_CPU);\n\n            this.do_task_switch(selector, error_code);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n            return;\n        }\n\n        if((type & ~1 & ~8) !== 6)\n        {\n            // invalid type\n            dbg_trace(LOG_CPU);\n            dbg_log(\"invalid type: \" + h(type));\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var is_trap = (type & 1) === 1;\n        var is_16 = (type & 8) === 0;\n\n        var info = this.lookup_segment_selector(selector);\n\n        dbg_assert((base >>> 0) <= info.effective_limit);\n        dbg_assert(info.is_valid);\n\n        if(info.is_null)\n        {\n            dbg_log(\"is null\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_executable || info.dpl > this.cpl)\n        {\n            dbg_log(\"not exec\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_present)\n        {\n            // kvm-unit-test\n            dbg_log(\"not present\");\n            this.trigger_np(interrupt_nr << 3 | 2);\n        }\n\n        var old_flags = this.get_eflags();\n\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\n\n        if(!info.dc_bit && info.dpl < this.cpl)\n        {\n            // inter privilege level interrupt\n            // interrupt from vm86 mode\n\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\n            //this.debug.dump_regs();\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\n\n            if(this.tss_size_32)\n            {\n                var new_esp = this.read32s(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\n            }\n            else\n            {\n                var new_esp = this.read16(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\n            }\n            var ss_info = this.lookup_segment_selector(new_ss);\n\n            // Disabled: Incorrect handling of direction bit\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n            //    debugger;\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n            if(ss_info.is_null)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(!ss_info.is_present)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n\n            var old_esp = this.reg32s[reg_esp];\n            var old_ss = this.sreg[reg_ss];\n\n            if(old_flags & flag_vm)\n            {\n                //dbg_log(\"return from vm86 mode\");\n                //this.debug.dump_regs();\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\n\n            // XXX: with new cpl or with cpl 0?\n            this.translate_address_system_write(new_stack_pointer);\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\n\n            // no exceptions below\n\n            this.cpl = info.dpl;\n            this.cpl_changed();\n\n            this.update_cs_size(info.size);\n\n            this.flags &= ~flag_vm & ~flag_rf;\n\n            this.switch_seg(reg_ss, new_ss);\n            this.set_stack_reg(new_esp);\n\n            if(old_flags & flag_vm)\n            {\n                if(is_16)\n                {\n                    dbg_assert(false);\n                }\n                else\n                {\n                    this.push32(this.sreg[reg_gs]);\n                    this.push32(this.sreg[reg_fs]);\n                    this.push32(this.sreg[reg_ds]);\n                    this.push32(this.sreg[reg_es]);\n                }\n            }\n\n            if(is_16)\n            {\n                this.push16(old_ss);\n                this.push16(old_esp);\n            }\n            else\n            {\n                this.push32(old_ss);\n                this.push32(old_esp);\n            }\n        }\n        else if(info.dc_bit || info.dpl === this.cpl)\n        {\n            // intra privilege level interrupt\n\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\n            //this.debug.dump_regs();\n\n            if(this.flags & flag_vm)\n            {\n                dbg_assert(false, \"check error code\");\n                this.trigger_gp(selector & ~3);\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\n\n            // XXX: with current cpl or with cpl 0?\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\n\n            // no exceptions below\n        }\n        else\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        if(is_16)\n        {\n            this.push16(old_flags);\n            this.push16(this.sreg[reg_cs]);\n            this.push16(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push16(error_code);\n            }\n\n            base &= 0xFFFF;\n        }\n        else\n        {\n            this.push32(old_flags);\n            this.push32(this.sreg[reg_cs]);\n            this.push32(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push32(error_code);\n            }\n        }\n\n        if(old_flags & flag_vm)\n        {\n            this.switch_seg(reg_gs, 0);\n            this.switch_seg(reg_fs, 0);\n            this.switch_seg(reg_ds, 0);\n            this.switch_seg(reg_es, 0);\n        }\n\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n        this.update_cs_size(info.size);\n\n        this.segment_limits[reg_cs] = info.effective_limit;\n        this.segment_offsets[reg_cs] = info.base;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\n\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\n\n        if(!is_trap)\n        {\n            // clear int flag for interrupt gates\n            this.flags &= ~flag_interrupt;\n        }\n        else\n        {\n            if(!this.page_fault) // XXX\n            {\n                this.handle_irqs();\n            }\n        }\n    }\n    else\n    {\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\n\n        var index = interrupt_nr << 2;\n        var new_ip = this.read16(index);\n        var new_cs = this.read16(index + 2 | 0);\n\n        // push flags, cs:ip\n        this.push16(this.get_eflags());\n        this.push16(this.sreg[reg_cs]);\n        this.push16(this.get_real_eip());\n\n        this.flags &= ~flag_interrupt;\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\n    }\n\n    //dbg_log(\"int to:\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n};\n\nCPU.prototype.iret16 = function()\n{\n    this.iret(true);\n};\n\nCPU.prototype.iret32 = function()\n{\n    this.iret(false);\n};\n\nCPU.prototype.iret = function(is_16)\n{\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\n    //this.debug.dump_regs();\n\n    if(this.vm86_mode() && this.getiopl() < 3)\n    {\n        // vm86 mode, iopl != 3\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(is_16)\n    {\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\n    }\n    else\n    {\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\n    }\n\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\n    {\n        if(new_eip & 0xFFFF0000)\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n            this.adjust_stack_reg(3 * 2);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n            this.adjust_stack_reg(3 * 4);\n        }\n\n        //dbg_log(\"iret32 to:\", LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n\n        this.handle_irqs();\n        return;\n    }\n\n    dbg_assert(!this.vm86_mode());\n\n    if(this.flags & flag_nt)\n    {\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\n        this.trigger_gp(0);\n    }\n\n    if(new_flags & flag_vm)\n    {\n        if(this.cpl === 0)\n        {\n            // return to virtual 8086 mode\n\n            // vm86 cannot be set in 16 bit flag\n            dbg_assert(!is_16);\n\n            dbg_assert((new_eip & ~0xFFFF) === 0);\n\n            //dbg_log(\"in vm86 mode now \" +\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\n\n\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\n\n            // no exceptions below\n\n            this.update_eflags(new_flags);\n            this.flags |= flag_vm;\n\n            this.switch_cs_real_mode(new_cs);\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\n\n            this.switch_seg(reg_es, new_es);\n            this.switch_seg(reg_ds, new_ds);\n            this.switch_seg(reg_fs, new_fs);\n            this.switch_seg(reg_gs, new_gs);\n\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\n\n            this.reg32s[reg_esp] = temp_esp;\n            this.switch_seg(reg_ss, temp_ss);\n\n            this.cpl = 3;\n            this.cpl_changed();\n\n            this.update_cs_size(false);\n\n            //dbg_log(\"iret32 to:\", LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n            //this.debug.dump_regs();\n\n            return;\n        }\n        else\n        {\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\n            new_flags &= ~flag_vm;\n        }\n    }\n\n    // protected mode return\n\n    var info = this.lookup_segment_selector(new_cs);\n\n    dbg_assert(info.is_valid);\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\n\n    if(info.is_null)\n    {\n        throw this.debug.unimpl(\"is null\");\n    }\n    if(!info.is_present)\n    {\n        throw this.debug.unimpl(\"not present\");\n    }\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"not exec\");\n    }\n    if(info.rpl < this.cpl)\n    {\n        throw this.debug.unimpl(\"rpl < cpl\");\n    }\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\n    }\n\n    if(!info.dc_bit && info.rpl !== info.dpl)\n    {\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\n        this.trigger_gp(new_cs & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        // outer privilege return\n        if(is_16)\n        {\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\n        }\n        else\n        {\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n        }\n\n        var ss_info = this.lookup_segment_selector(temp_ss);\n        var new_cpl = info.rpl;\n\n        if(ss_info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!ss_info.is_valid ||\n           ss_info.is_system ||\n           ss_info.rpl !== new_cpl ||\n           !ss_info.is_writable ||\n           ss_info.dpl !== new_cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(temp_ss & ~3);\n        }\n\n        if(!ss_info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(temp_ss & ~3);\n        }\n\n        // no exceptions below\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\n\n        this.switch_seg(reg_ss, temp_ss);\n\n        this.set_stack_reg(temp_esp);\n\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n\n\n        // XXX: Set segment to 0 if it's not usable in the new cpl\n        // XXX: Use cached segment information\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\n        // ...\n    }\n    else if(info.rpl === this.cpl)\n    {\n        // same privilege return\n        // no exceptions below\n        if(is_16)\n        {\n            this.adjust_stack_reg(3 * 2);\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.adjust_stack_reg(3 * 4);\n            this.update_eflags(new_flags);\n        }\n\n        // update vip and vif, which are not changed by update_eflags\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n\n    this.sreg[reg_cs] = new_cs;\n    dbg_assert((new_cs & 3) === this.cpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\n\n    this.handle_irqs();\n};\n\nCPU.prototype.switch_cs_real_mode = function(selector)\n{\n    dbg_assert(!this.protected_mode || this.vm86_mode());\n\n    this.sreg[reg_cs] = selector;\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_offsets[reg_cs] = selector << 4;\n};\n\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\n\n    if(!this.protected_mode)\n    {\n        dbg_assert(!this.is_32);\n        //dbg_assert(!this.stack_size_32);\n    }\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(false, \"is system in far return\");\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_executable)\n    {\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.rpl < this.cpl)\n    {\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        dbg_trace(LOG_CPU);\n        this.trigger_np(selector & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\n\n        if(this.is_osize_32())\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\n        }\n        else\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        // XXX: Can raise, conditions should be checked before side effects\n        this.switch_seg(reg_ss, temp_ss);\n        this.set_stack_reg(temp_esp + stack_adjust);\n\n        //if(this.is_osize_32())\n        //{\n        //    this.adjust_stack_reg(2 * 4);\n        //}\n        //else\n        //{\n        //    this.adjust_stack_reg(2 * 2);\n        //}\n\n        //throw this.debug.unimpl(\"privilege change\");\n\n        //this.adjust_stack_reg(stack_adjust);\n    }\n    else\n    {\n        if(this.is_osize_32())\n        {\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\n        }\n        else\n        {\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\n        }\n    }\n\n    //dbg_assert(this.cpl === info.dpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    //this.segment_infos[reg_cs] = 0; // TODO\n\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = selector;\n\n    dbg_assert((selector & 3) === this.cpl);\n\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n\n    //dbg_log(\"far return to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\n};\n\nCPU.prototype.far_jump = function(eip, selector, is_call)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"#gp null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(is_call, \"TODO: Jump\");\n\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\n\n        if(info.type === 0xC || info.type === 4)\n        {\n            // call gate\n            var is_16 = info.type === 4;\n\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\n            {\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n\n            if(!info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\n                this.trigger_np(selector & ~3);\n            }\n\n            var cs_selector = info.raw0 >>> 16;\n            var cs_info = this.lookup_segment_selector(cs_selector);\n\n            if(cs_info.is_null)\n            {\n                dbg_log(\"#gp null cs\", LOG_CPU);\n                this.trigger_gp(0);\n            }\n\n            if(!cs_info.is_valid)\n            {\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_executable)\n            {\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(cs_info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\n                this.trigger_np(cs_selector & ~3);\n            }\n\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\n            {\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\n\n                if(this.tss_size_32)\n                {\n                    var new_esp = this.read32s(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\n                }\n                else\n                {\n                    var new_esp = this.read16(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\n                }\n                var ss_info = this.lookup_segment_selector(new_ss);\n\n                // Disabled: Incorrect handling of direction bit\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n                //    debugger;\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n                if(ss_info.is_null)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(!ss_info.is_present)\n                {\n                    throw this.debug.unimpl(\"#SS handler\");\n                }\n\n                var parameter_count = info.raw1 & 0x1F;\n                var stack_space = is_16 ? 4 : 8;\n                if(is_call)\n                {\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\n                }\n                if(ss_info.size)\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n                else\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n\n                var old_esp = this.reg32s[reg_esp];\n                var old_ss = this.sreg[reg_ss];\n                var old_stack_pointer = this.get_stack_pointer(0);\n\n                //dbg_log(\"old_esp=\" + h(old_esp));\n\n                this.cpl = cs_info.dpl;\n                this.cpl_changed();\n\n                this.update_cs_size(cs_info.size);\n\n                this.switch_seg(reg_ss, new_ss);\n                this.set_stack_reg(new_esp);\n\n                //dbg_log(\"parameter_count=\" + parameter_count);\n                //dbg_assert(parameter_count === 0, \"TODO\");\n\n                if(is_16)\n                {\n                    this.push16(old_ss);\n                    this.push16(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n                else\n                {\n                    this.push32(old_ss);\n                    this.push32(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\n                            this.push16(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\n                            this.push32(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n            else\n            {\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\n                // ok\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n\n            // Note: eip from call is ignored\n            var new_eip = info.raw0 & 0xFFFF;\n            if(!is_16)\n            {\n                new_eip |= info.raw1 & 0xFFFF0000;\n            }\n\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\n\n            this.update_cs_size(cs_info.size);\n\n            this.segment_is_null[reg_cs] = 0;\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\n            //this.segment_infos[reg_cs] = 0; // TODO\n            this.segment_offsets[reg_cs] = cs_info.base;\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n        }\n        else\n        {\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\n        }\n    }\n    else\n    {\n        if(!info.is_executable)\n        {\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(info.dc_bit)\n        {\n            // conforming code segment\n            if(info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n        else\n        {\n            // non-conforming code segment\n\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\n            {\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n\n        this.update_cs_size(info.size);\n\n        this.segment_is_null[reg_cs] = 0;\n        this.segment_limits[reg_cs] = info.effective_limit;\n        //this.segment_infos[reg_cs] = 0; // TODO\n\n        this.segment_offsets[reg_cs] = info.base;\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n    }\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\n};\n\nCPU.prototype.get_tss_stack_addr = function(dpl)\n{\n    if(this.tss_size_32)\n    {\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\n    }\n    else\n    {\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\n    }\n\n    if(this.paging)\n    {\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\n    }\n\n    return tss_stack_addr;\n};\n\nCPU.prototype.do_task_switch = function(selector, error_code)\n{\n    dbg_assert(this.tss_size_32, \"TODO\");\n\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\n    var descriptor = this.lookup_segment_selector(selector);\n\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\n    var tss_is_16 = descriptor.type <= 3;\n    var tss_is_busy = (descriptor.type & 2) === 2;\n\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\n    {\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if((descriptor.access & 31) === 0xB)\n    {\n        // is busy\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!descriptor.is_present)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    if(descriptor.effective_limit < 103)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    var tsr_size = this.segment_limits[reg_tr];\n    var tsr_offset = this.segment_offsets[reg_tr];\n\n    var old_eflags = this.get_eflags();\n\n    if(tss_is_busy)\n    {\n        old_eflags &= ~flag_nt;\n    }\n\n    this.writable_or_pagefault(tsr_offset, 0x66);\n\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\n\n    // TODO: Write 16 bit values if old tss is 16 bit\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\n\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\n\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\n\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\n\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\n\n    if(true /* is jump or call or int */)\n    {\n        // mark as busy\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\n    }\n\n    //var new_tsr_size = descriptor.effective_limit;\n    var new_tsr_offset = descriptor.base;\n\n    dbg_assert(!tss_is_16, \"unimplemented\");\n\n    if(true /* is call or int */)\n    {\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\n    }\n\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\n\n    this.flags &= ~flag_vm;\n\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\n    var info = this.lookup_segment_selector(new_cs);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.is_system)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = new_cs;\n\n    this.cpl = info.dpl;\n    this.cpl_changed();\n\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n    this.update_cs_size(info.size);\n\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\n\n    if(true /* is call or int */)\n    {\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\n        new_eflags |= flag_nt;\n    }\n\n    if(new_eflags & flag_vm)\n    {\n        throw this.debug.unimpl(\"task switch to VM mode\");\n    }\n\n    this.update_eflags(new_eflags);\n\n    if(true /* call or int */)\n    {\n        this.flags |= flag_nt;\n    }\n\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\n    this.load_ldt(new_ldt);\n\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\n\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\n\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\n\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n\n    this.segment_offsets[reg_tr] = descriptor.base;\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    this.cr[3] = new_cr3;\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\n    this.clear_tlb();\n\n    this.cr[0] |= CR0_TS;\n\n    if(error_code !== false)\n    {\n        if(tss_is_16)\n        {\n            this.push16(error_code & 0xFFFF);\n        }\n        else\n        {\n            this.push32(error_code);\n        }\n    }\n};\n\nCPU.prototype.hlt_op = function()\n{\n    if(this.cpl)\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.flags & flag_interrupt) === 0)\n    {\n        this.debug.show(\"cpu halted\");\n        this.bus.send(\"cpu-event-halt\");\n        if(DEBUG) this.debug.dump_regs();\n        throw \"HALT\";\n    }\n    else\n    {\n        // get out of here and into hlt_loop\n        this.in_hlt = true;\n\n        //if(false) // possibly unsafe, test in safari\n        //{\n        //    this.hlt_loop();\n        //    this.diverged();\n        //    if(this.in_hlt)\n        //    {\n        //        throw MAGIC_CPU_EXCEPTION;\n        //    }\n        //}\n        //else\n        {\n            throw MAGIC_CPU_EXCEPTION;\n        }\n    }\n};\n\n// assumes ip to point to the byte before the next instruction\nCPU.prototype.raise_exception = function(interrupt_nr)\n{\n    //if(DEBUG && interrupt_nr !== 7)\n    //{\n    //    // show interesting exceptions\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //    this.debug.dump_state();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, false);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\n{\n    dbg_assert(typeof error_code === \"number\");\n\n    //if(DEBUG)\n    //{\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.trigger_de = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(0);\n};\n\nCPU.prototype.trigger_ud = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(6);\n};\n\nCPU.prototype.trigger_nm = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(7);\n};\n\nCPU.prototype.trigger_ts = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(10, code);\n};\n\nCPU.prototype.trigger_gp = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(13, code);\n};\n\nCPU.prototype.trigger_np = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(11, code);\n};\n\nCPU.prototype.trigger_ss = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(12, code);\n};\n\n// used before fpu instructions\nCPU.prototype.task_switch_test = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        this.trigger_nm();\n    }\n};\n\n// used before mmx instructions\nCPU.prototype.task_switch_test_mmx = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        if(this.cr[0] & CR0_TS)\n        {\n            this.trigger_nm();\n        }\n        else\n        {\n            this.trigger_ud();\n        }\n    }\n\n};\n\nCPU.prototype.todo = function()\n{\n    if(DEBUG)\n    {\n        dbg_trace();\n        throw \"TODO\";\n    }\n\n    this.trigger_ud();\n};\n\nCPU.prototype.undefined_instruction = function()\n{\n    dbg_assert(false, \"Possible fault: undefined instruction\");\n    this.trigger_ud();\n};\n\nCPU.prototype.unimplemented_sse = function()\n{\n    dbg_log(\"No SSE\", LOG_CPU);\n    dbg_assert(false);\n    this.trigger_ud();\n};\n\nCPU.prototype.get_seg_prefix_ds = function()\n{\n    return this.get_seg_prefix(reg_ds);\n};\n\nCPU.prototype.get_seg_prefix_ss = function()\n{\n    return this.get_seg_prefix(reg_ss);\n};\n\nCPU.prototype.get_seg_prefix_cs = function()\n{\n    return this.get_seg_prefix(reg_cs);\n};\n\n/**\n * Get segment base by prefix or default\n * @param {number} default_segment\n */\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\n{\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\n\n    if(prefix)\n    {\n        if(prefix === SEG_PREFIX_ZERO)\n        {\n            return 0;\n        }\n        else\n        {\n            return this.get_seg(prefix - 1 /*, offset*/);\n        }\n    }\n    else\n    {\n        return this.get_seg(default_segment /*, offset*/);\n    }\n};\n\n/**\n * Get segment base\n * @param {number} segment\n */\nCPU.prototype.get_seg = function(segment /*, offset*/)\n{\n    dbg_assert(segment >= 0 && segment < 8);\n\n    if(this.protected_mode)\n    {\n        if(this.segment_is_null[segment])\n        {\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\n            dbg_trace();\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\n\n            this.trigger_gp(0);\n        }\n\n        // TODO:\n        // - validate segment limits\n        // - validate if segment is writable\n    }\n\n    return this.segment_offsets[segment];\n};\n\nCPU.prototype.read_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.read_e8s = function()\n{\n    return this.read_e8() << 24 >> 24;\n};\n\nCPU.prototype.read_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.read_e16s = function()\n{\n    return this.read_e16() << 16 >> 16;\n};\n\nCPU.prototype.read_e32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.read_e32 = function()\n{\n    return this.read_e32s() >>> 0;\n};\n\nCPU.prototype.read_mmx_mem32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        // Returning lower dword of qword\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\n    }\n};\n\nCPU.prototype.read_mmx_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.create_atom64s(\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom64s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s_unaligned = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.set_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write8(addr, value);\n    } else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.set_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write16(addr, value);\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.set_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write32(addr, value);\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.set_mmx_mem64s = function(low, high)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write64(addr, low, high);\n    } else {\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\n    }\n};\n\nCPU.prototype.read_write_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        return this.read8(this.phys_addr);\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.write_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        this.write8(this.phys_addr, value);\n    }\n    else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.read_write_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read16(this.phys_addr);\n        }\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.write_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write16(this.phys_addr, value);\n        }\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.read_write_e32 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read32s(this.phys_addr);\n        }\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.write_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write32(this.phys_addr, value);\n        }\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.read_reg_e16 = function()\n{\n    return this.reg16[this.modrm_byte << 1 & 14];\n};\n\nCPU.prototype.write_reg_e16 = function(value)\n{\n    this.reg16[this.modrm_byte << 1 & 14] = value;\n};\n\nCPU.prototype.read_reg_e32s = function()\n{\n    return this.reg32s[this.modrm_byte & 7];\n};\n\nCPU.prototype.write_reg_e32 = function(value)\n{\n    this.reg32s[this.modrm_byte & 7] = value;\n};\n\nCPU.prototype.read_g8 = function()\n{\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\n};\n\nCPU.prototype.write_g8 = function(value)\n{\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\n};\n\nCPU.prototype.read_g16 = function()\n{\n    return this.reg16[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.read_g16s = function()\n{\n    return this.reg16s[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.write_g16 = function(value)\n{\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\n};\n\nCPU.prototype.read_g32s = function()\n{\n    return this.reg32s[this.modrm_byte >> 3 & 7];\n};\n\nCPU.prototype.write_g32 = function(value)\n{\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\n};\n\nCPU.prototype.read_xmm64s = function()\n{\n    return this.create_atom64s(\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\n    );\n};\n\nCPU.prototype.read_xmm128s = function()\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    return this.create_atom128s(\n        this.reg_xmm32s[i | 0],\n        this.reg_xmm32s[i | 1],\n        this.reg_xmm32s[i | 2],\n        this.reg_xmm32s[i | 3]\n    );\n};\n\nCPU.prototype.read_mmx64s = function()\n{\n    return this.create_atom64s(\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\n    );\n};\n\nCPU.prototype.write_mmx64s = function(low, high)\n{\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\n};\n\nCPU.prototype.write_xmm64 = function(low, high)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = low;\n    this.reg_xmm32s[i + 1] = high;\n};\n\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = d0;\n    this.reg_xmm32s[i + 1] = d1;\n    this.reg_xmm32s[i + 2] = d2;\n    this.reg_xmm32s[i + 3] = d3;\n};\n\nCPU.prototype.pic_call_irq = function(int)\n{\n    try\n    {\n        this.previous_ip = this.instruction_pointer;\n        this.call_interrupt_vector(int, false, false);\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.handle_irqs = function()\n{\n    dbg_assert(!this.page_fault);\n\n    this.diverged();\n\n    if((this.flags & flag_interrupt) && !this.page_fault)\n    {\n        if(this.devices.pic)\n        {\n            this.devices.pic.acknowledge_irq();\n        }\n\n        if(this.devices.apic)\n        {\n            this.devices.apic.acknowledge_irq();\n        }\n    }\n};\n\nCPU.prototype.device_raise_irq = function(i)\n{\n    dbg_assert(arguments.length === 1);\n    if(this.devices.pic)\n    {\n        this.devices.pic.set_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.set_irq(i);\n    }\n};\n\nCPU.prototype.device_lower_irq = function(i)\n{\n    if(this.devices.pic)\n    {\n        this.devices.pic.clear_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.clear_irq(i);\n    }\n};\n\nCPU.prototype.test_privileges_for_io = function(port, size)\n{\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\n    {\n        if(!this.tss_size_32)\n        {\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state();\n            this.trigger_gp(0);\n        }\n\n        var tsr_size = this.segment_limits[reg_tr];\n        var tsr_offset = this.segment_offsets[reg_tr];\n\n        if(tsr_size >= 0x67)\n        {\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\n\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\n                high_port = port + size - 1 | 0;\n\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\n            {\n                var mask = ((1 << size) - 1) << (port & 7),\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\n                    port_info = (mask & 0xFF00) ?\n                        this.read16(addr) : this.read8(addr);\n\n                dbg_assert((addr & 0xFFF) < 0xFFF);\n\n                if(!(port_info & mask))\n                {\n                    return;\n                }\n            }\n        }\n\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state();\n        this.trigger_gp(0);\n    }\n};\n\nCPU.prototype.cpuid = function()\n{\n    // cpuid\n    // TODO: Fill in with less bogus values\n\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\n    // http://www.sandpile.org/x86/cpuid.htm\n\n    var eax = 0;\n    var ecx = 0;\n    var edx = 0;\n    var ebx = 0;\n\n    var winnt_fix = false;\n\n    switch(this.reg32s[reg_eax])\n    {\n        case 0:\n            // maximum supported level\n            if(winnt_fix)\n            {\n                eax = 2;\n            }\n            else\n            {\n                eax = 5;\n            }\n\n            ebx = 0x756E6547|0; // Genu\n            edx = 0x49656E69|0; // ineI\n            ecx = 0x6C65746E|0; // ntel\n            break;\n\n        case 1:\n            // pentium\n            eax = 3 | 6 << 4 | 15 << 8;\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\n            var vme = 0 << 1;\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\n            edx = (this.fpu ? 1 : 0) |                // fpu\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\n                    1 << 23 | 1 << 24 | 1 << 25 | 1 << 26;   // mmx, fxsr, sse1, sse2\n\n            if(ENABLE_ACPI && this.apic_enabled)\n            {\n                edx |= 1 << 9; // apic\n            }\n            break;\n\n        case 2:\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\n            eax = 0x665B5001|0;\n            ebx = 0;\n            ecx = 0;\n            edx = 0x007A7000;\n            break;\n\n        case 4:\n            // from my local machine\n            switch(this.reg32s[reg_ecx])\n            {\n                case 0:\n                    eax = 0x00000121;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 1:\n                    eax = 0x00000122;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 2:\n                    eax = 0x00000143;\n                    ebx = 0x05c0003f;\n                    ecx = 0x00000fff;\n                    edx = 0x00000001;\n                    break;\n            }\n            break;\n\n        case 5:\n            // from my local machine\n            eax = 0x40;\n            ebx = 0x40;\n            ecx = 3;\n            edx = 0x00142120;\n            break;\n\n        case 0x80000000|0:\n            // maximum supported extended level\n            eax = 5;\n            // other registers are reserved\n            break;\n\n        case 0x40000000|0: // hypervisor\n            if(VMWARE_HYPERVISOR_PORT)\n            {\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\n                ebx = 0x61774D56|0; // VMwa\n                ecx = 0x4D566572|0; // reVM\n                edx = 0x65726177|0; // ware\n            }\n            break;\n\n        default:\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\n    }\n\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\n\n    this.reg32s[reg_eax] = eax;\n    this.reg32s[reg_ecx] = ecx;\n    this.reg32s[reg_edx] = edx;\n    this.reg32s[reg_ebx] = ebx;\n};\n\nCPU.prototype.update_cs_size = function(new_size)\n{\n    dbg_assert(typeof new_size === \"boolean\");\n\n    if(this.is_32 !== new_size)\n    {\n        this.clear_instruction_cache();\n        this.is_32 = new_size;\n        this.update_operand_size();\n    }\n};\n\nCPU.prototype.update_operand_size = function()\n{\n    if(this.is_32)\n    {\n        this.table = this.table32;\n    }\n    else\n    {\n        this.table = this.table16;\n    }\n};\n\n/**\n * @param {number} selector\n */\nCPU.prototype.lookup_segment_selector = function(selector)\n{\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\n\n    var is_gdt = (selector & 4) === 0,\n        selector_offset = selector & ~7,\n        info,\n        table_offset,\n        table_limit;\n\n    info = {\n        rpl: selector & 3,\n        from_gdt: is_gdt,\n        is_null: false,\n        is_valid: true,\n\n        base: 0,\n        access: 0,\n        flags: 0,\n        type: 0,\n        dpl: 0,\n        is_system: false,\n        is_present: false,\n        is_executable: false,\n        rw_bit: false,\n        dc_bit: false,\n        size: false,\n\n        is_conforming_executable: false,\n\n        // limit after applying granularity\n        effective_limit: 0,\n\n        is_writable: false,\n        is_readable: false,\n        table_offset: 0,\n\n        raw0: 0,\n        raw1: 0,\n    };\n\n    if(is_gdt)\n    {\n        table_offset = this.gdtr_offset;\n        table_limit = this.gdtr_size;\n    }\n    else\n    {\n        table_offset = this.segment_offsets[reg_ldtr];\n        table_limit = this.segment_limits[reg_ldtr];\n    }\n\n    if(is_gdt && selector_offset === 0)\n    {\n        info.is_null = true;\n        return info;\n    }\n\n    // limit is the number of entries in the table minus one\n    if((selector | 7) > table_limit)\n    {\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\n        info.is_valid = false;\n        return info;\n    }\n\n    table_offset = table_offset + selector_offset | 0;\n\n    if(this.paging)\n    {\n        table_offset = this.translate_address_system_read(table_offset);\n    }\n    info.table_offset = table_offset;\n\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\n                this.read8(table_offset + 7 | 0) << 24;\n    info.access = this.read8(table_offset + 5 | 0);\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\n\n    info.raw0 = this.read32s(table_offset     | 0);\n    info.raw1 = this.read32s(table_offset + 4 | 0);\n\n    //this.write8(table_offset + 5 | 0, info.access | 1);\n\n    // used if system\n    info.type = info.access & 0xF;\n\n    info.dpl = info.access >> 5 & 3;\n\n    info.is_system = (info.access & 0x10) === 0;\n    info.is_present = (info.access & 0x80) === 0x80;\n    info.is_executable = (info.access & 8) === 8;\n\n    info.rw_bit = (info.access & 2) === 2;\n    info.dc_bit = (info.access & 4) === 4;\n\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\n\n    info.size = (info.flags & 4) === 4;\n\n    var limit = this.read16(table_offset) |\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\n\n    if(info.flags & 8)\n    {\n        // granularity set\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\n    }\n    else\n    {\n        info.effective_limit = limit;\n    }\n\n    info.is_writable = info.rw_bit && !info.is_executable;\n    info.is_readable = info.rw_bit || !info.is_executable;\n\n    return info;\n};\n\n/**\n * @param {number} reg\n * @param {number} selector\n */\nCPU.prototype.switch_seg = function(reg, selector)\n{\n    dbg_assert(reg >= 0 && reg <= 5);\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.sreg[reg] = selector;\n        this.segment_is_null[reg] = 0;\n        this.segment_offsets[reg] = selector << 4;\n\n        if(reg === reg_ss)\n        {\n            this.stack_size_32 = false;\n        }\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(reg === reg_ss)\n    {\n        if(info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           info.rpl !== this.cpl ||\n           !info.is_writable ||\n           info.dpl !== this.cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(selector & ~3);\n        }\n\n        this.stack_size_32 = info.size;\n    }\n    else if(reg === reg_cs)\n    {\n        // handled by switch_cs_real_mode, far_return or far_jump\n        dbg_assert(false);\n    }\n    else\n    {\n        // es, ds, fs, gs\n        if(info.is_null)\n        {\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            //dbg_trace(LOG_CPU);\n            this.sreg[reg] = selector;\n            this.segment_is_null[reg] = 1;\n            return;\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           !info.is_readable ||\n           (!info.is_conforming_executable &&\n            (info.rpl > info.dpl || this.cpl > info.dpl))\n        ) {\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            this.debug.dump_state();\n            this.debug.dump_regs();\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n    }\n\n    this.segment_is_null[reg] = 0;\n    this.segment_limits[reg] = info.effective_limit;\n    //this.segment_infos[reg] = 0; // TODO\n\n    this.segment_offsets[reg] = info.base;\n    this.sreg[reg] = selector;\n};\n\nCPU.prototype.load_tr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    dbg_assert(info.is_valid);\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\n    }\n\n    if(info.is_null)\n    {\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"#GP | ltr: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\n    }\n\n    if(info.type !== 9 && info.type !== 1)\n    {\n        // 0xB: busy 386 TSS (GP)\n        // 0x9: 386 TSS\n        // 0x3: busy 286 TSS (GP)\n        // 0x1: 286 TSS (??)\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NT | present bit not set (ltr)\");\n        throw this.debug.unimpl(\"#NT handler\");\n    }\n\n    this.tss_size_32 = info.type === 9;\n    this.segment_offsets[reg_tr] = info.base;\n    this.segment_limits[reg_tr] = info.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    // Mark task as busy\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\n\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\n};\n\nCPU.prototype.load_ldt = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        // invalid\n        this.segment_offsets[reg_ldtr] = 0;\n        this.segment_limits[reg_ldtr] = 0;\n        return;\n    }\n\n    dbg_assert(info.is_valid);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"lldt: present bit not set\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"lldt: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(info.type !== 2)\n    {\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.segment_offsets[reg_ldtr] = info.base;\n    this.segment_limits[reg_ldtr] = info.effective_limit;\n    this.sreg[reg_ldtr] = selector;\n\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\n};\n\nCPU.prototype.arpl = function(seg, r16)\n{\n    this.flags_changed &= ~flag_zero;\n\n    if((seg & 3) < (this.reg16[r16] & 3))\n    {\n        this.flags |= flag_zero;\n        return seg & ~3 | this.reg16[r16] & 3;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return seg;\n    }\n};\n\nCPU.prototype.lar = function(selector, original)\n{\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.raw1 & 0x00FFFF00;\n    }\n};\n\nCPU.prototype.lsl = function(selector, original)\n{\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.effective_limit | 0;\n    }\n\n};\n\nCPU.prototype.verr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\n    {\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.verw = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\n       info.dpl < this.cpl || info.dpl < info.rpl)\n    {\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verw valid\", LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.clear_tlb = function()\n{\n    // clear tlb excluding global pages\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.tlb_info.set(this.tlb_info_global);\n\n    //dbg_log(\"page table loaded\", LOG_CPU);\n};\n\nCPU.prototype.full_clear_tlb = function()\n{\n    //dbg_log(\"TLB full clear\", LOG_CPU);\n\n    // clear tlb including global pages\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\n    for(var i = 0; i < (1 << 18); )\n    {\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\n    }\n\n    this.clear_tlb();\n};\n\nCPU.prototype.invlpg = function(addr)\n{\n    var page = addr >>> 12;\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\n\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.translate_address_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_read(addr);\n    }\n    else\n    {\n        return this.translate_address_system_read(addr);\n    }\n};\n\nCPU.prototype.translate_address_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_write(addr);\n    }\n    else\n    {\n        return this.translate_address_system_write(addr);\n    }\n};\n\nCPU.prototype.translate_address_user_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_user_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\n    }\n};\n\n/**\n * @return {number}\n */\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\n{\n    var page = addr >>> 12,\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\n        page_dir_entry = this.mem32s[page_dir_addr],\n        high,\n        can_write = true,\n        global,\n        cachable = true,\n        allow_user = true;\n\n    dbg_assert(addr < 0x80000000);\n\n    if(!(page_dir_entry & 1))\n    {\n        // to do at this place:\n        //\n        // - set cr2 = addr (which caused the page fault)\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\n        // - prevent execution of the function that triggered this call\n        //dbg_log(\"#PF not present\", LOG_CPU);\n\n        this.cr[2] = addr;\n        this.trigger_pagefault(for_writing, user, 0);\n\n        // never reached as this.trigger_pagefault throws up\n        dbg_assert(false);\n    }\n\n    if((page_dir_entry & 2) === 0)\n    {\n        can_write = false;\n\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\n        {\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if((page_dir_entry & 4) === 0)\n    {\n        allow_user = false;\n\n        if(user)\n        {\n            // \"Page Fault: page table accessed by non-supervisor\";\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if(page_dir_entry & this.page_size_extensions)\n    {\n        // size bit is set\n\n        // set the accessed and dirty bits\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\n\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\n        global = page_dir_entry & 0x100;\n    }\n    else\n    {\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\n            page_table_entry = this.mem32s[page_table_addr];\n\n        if((page_table_entry & 1) === 0)\n        {\n            //dbg_log(\"#PF not present table\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 0);\n            dbg_assert(false);\n        }\n\n        if((page_table_entry & 2) === 0)\n        {\n            can_write = false;\n\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\n            {\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        if((page_table_entry & 4) === 0)\n        {\n            allow_user = false;\n\n            if(user)\n            {\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        // set the accessed and dirty bits\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\n\n        high = page_table_entry & 0xFFFFF000;\n        global = page_table_entry & 0x100;\n    }\n\n    this.tlb_data[page] = high ^ page << 12;\n\n    var allowed_flag;\n\n    if(allow_user)\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\n        }\n        else\n        {\n            // TODO: Consider if cr0.wp is not set\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\n        }\n    }\n    else\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\n        }\n        else\n        {\n            allowed_flag = TLB_SYSTEM_READ;\n        }\n    }\n\n    this.tlb_info[page] = allowed_flag;\n\n    if(global && (this.cr[4] & CR4_PGE))\n    {\n        this.tlb_info_global[page] = allowed_flag;\n    }\n\n    return high;\n};\n\nCPU.prototype.writable_or_pagefault = function(addr, size)\n{\n    dbg_assert(size < 0x1000, \"not supported yet\");\n    dbg_assert(size > 0);\n\n    if(!this.paging)\n    {\n        return;\n    }\n\n    var user = this.cpl === 3 ? 1 : 0,\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\n        page = addr >>> 12;\n\n    if((this.tlb_info[page] & mask) === 0)\n    {\n        this.do_page_translation(addr, 1, user);\n    }\n\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\n    {\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\n        {\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\n        }\n    }\n};\n\nCPU.prototype.trigger_pagefault = function(write, user, present)\n{\n    if(LOG_PAGE_FAULTS)\n    {\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\n        dbg_trace(LOG_CPU);\n    }\n\n    if(this.page_fault)\n    {\n        dbg_trace(LOG_CPU);\n        throw this.debug.unimpl(\"Double fault\");\n    }\n\n    // invalidate tlb entry\n    var page = this.cr[2] >>> 12;\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.instruction_pointer = this.previous_ip;\n    this.page_fault = true;\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.is_osize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\n};\n\nCPU.prototype.is_asize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\n};\n\nCPU.prototype.get_reg_asize = function(reg)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    var r = this.reg32s[reg];\n\n    if(this.is_asize_32())\n    {\n        return r;\n    }\n    else\n    {\n        return r & 0xFFFF;\n    }\n};\n\nCPU.prototype.set_ecx_asize = function(value)\n{\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg_ecx] = value;\n    }\n    else\n    {\n        this.reg16[reg_cx] = value;\n    }\n};\n\nCPU.prototype.add_reg_asize = function(reg, value)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg] += value;\n    }\n    else\n    {\n        this.reg16[reg << 1] += value;\n    }\n};\n\nCPU.prototype.decr_ecx_asize = function()\n{\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\n};\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"CPU\"] = CPU;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"CPU\"] = CPU;\n}\nelse if(typeof importScripts === \"function\")\n{\n    self[\"CPU\"] = CPU;\n}\n","\"use strict\";\n/*\n * Compile time configuration, some only relevant for debug mode\n */\n\n/**\n * @define {boolean}\n * Overridden for production by closure compiler\n */\nvar DEBUG = true;\n\n/** @const */\nvar LOG_TO_FILE = false;\n\n/**\n * @const\n * Enables logging all IO port reads and writes. Very verbose\n */\nvar LOG_ALL_IO = false;\n\n/**\n * @const\n * Enables logging of page faults, quite verbose\n */\nvar LOG_PAGE_FAULTS = false;\n\n\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\n\n\n/** @const */\nvar ENABLE_HPET = DEBUG && false;\n\n/** @const */\nvar ENABLE_ACPI = true;\n\n\n/**\n * @const\n * How many cycles the CPU does at a time before running hardware timers\n */\nvar LOOP_COUNTER = 11001;\n\n/**\n * @const\n * How often, in milliseconds, to yield to the browser for rendering and\n * running events\n */\nvar TIME_PER_FRAME = 1;\n\n/**\n * @const\n * How many ticks the TSC does per millisecond\n */\nvar TSC_RATE = 8 * 1024;\n\n\n/** @const */\nvar APIC_TIMER_FREQ = TSC_RATE;\n\n\n/** @const */\nvar VMWARE_HYPERVISOR_PORT = true;\n","\"use strict\";\n\nvar v86util = v86util || {};\n\n// pad string with spaces on the right\nv86util.pads = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = str + \" \";\n    }\n\n    return str;\n};\n\n// pad string with zeros on the left\nv86util.pad0 = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = \"0\" + str;\n    }\n\n    return str;\n};\n\n/**\n * number to hex\n * @param {number} n\n * @param {number=} len\n * @return {string}\n */\nfunction h(n, len)\n{\n    if(!n)\n    {\n        var str = \"\";\n    }\n    else\n    {\n        var str = n.toString(16);\n    }\n\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\n}\n\n\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\n{\n    let rand_data = new Int32Array(1);\n\n    v86util.has_rand_int = function()\n    {\n        return true;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        window.crypto.getRandomValues(rand_data);\n        return rand_data[0];\n    };\n}\nelse\n{\n    v86util.has_rand_int = function()\n    {\n        return false;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        console.assert(false);\n    };\n}\n\n\n/**\n * Synchronous access to ArrayBuffer\n * @constructor\n */\nfunction SyncBuffer(buffer)\n{\n    this.buffer = buffer;\n    this.byteLength = buffer.byteLength;\n    this.onload = undefined;\n    this.onprogress = undefined;\n}\n\nSyncBuffer.prototype.load = function()\n{\n    this.onload && this.onload({ buffer: this.buffer });\n};\n\n/**\n * @param {number} start\n * @param {number} len\n * @param {function(!Uint8Array)} fn\n */\nSyncBuffer.prototype.get = function(start, len, fn)\n{\n    dbg_assert(start + len <= this.byteLength);\n    fn(new Uint8Array(this.buffer, start, len));\n};\n\n/**\n * @param {number} start\n * @param {!Uint8Array} slice\n * @param {function()} fn\n */\nSyncBuffer.prototype.set = function(start, slice, fn)\n{\n    dbg_assert(start + slice.byteLength <= this.byteLength);\n\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\n    fn();\n};\n\n/**\n * @param {function(!ArrayBuffer)} fn\n */\nSyncBuffer.prototype.get_buffer = function(fn)\n{\n    fn(this.buffer);\n};\n\n\n\n(function()\n{\n    var int_log2_table = new Int8Array(256);\n\n    for(var i = 0, b = -2; i < 256; i++)\n    {\n        if(!(i & i - 1))\n            b++;\n\n        int_log2_table[i] = b;\n    }\n\n    /**\n     * calculate the integer logarithm base 2 of a byte\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2_byte = function(x)\n    {\n        dbg_assert(x > 0);\n        dbg_assert(x < 0x100);\n\n        return int_log2_table[x];\n    };\n\n    /**\n     * calculate the integer logarithm base 2\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2 = function(x)\n    {\n        dbg_assert(x > 0);\n\n        // http://jsperf.com/integer-log2/6\n        var tt = x >>> 16;\n\n        if(tt)\n        {\n            var t = tt >>> 8;\n            if(t)\n            {\n                return 24 + int_log2_table[t];\n            }\n            else\n            {\n                return 16 + int_log2_table[tt];\n            }\n        }\n        else\n        {\n            var t = x >>> 8;\n            if(t)\n            {\n                return 8 + int_log2_table[t];\n            }\n            else\n            {\n                return int_log2_table[x];\n            }\n        }\n    };\n})();\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Uint8Array\n * Used by devices such as the PS2 controller\n */\nfunction ByteQueue(size)\n{\n    var data = new Uint8Array(size),\n        start,\n        end;\n\n    dbg_assert((size & size - 1) === 0);\n\n    this.length = 0;\n\n    this.push = function(item)\n    {\n        if(this.length === size)\n        {\n            // intentional overwrite\n        }\n        else\n        {\n            this.length++;\n        }\n\n        data[end] = item;\n        end = end + 1 & size - 1;\n    };\n\n    this.shift = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            var item = data[start];\n\n            start = start + 1 & size - 1;\n            this.length--;\n\n            return item;\n        }\n    };\n\n    this.peek = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            return data[start];\n        }\n    };\n\n    this.clear = function()\n    {\n        start = 0;\n        end = 0;\n        this.length = 0;\n    };\n\n    this.clear();\n}\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Float32Array\n * Used by devices such as the sound blaster sound card\n */\nfunction FloatQueue(size)\n{\n    this.size = size;\n    this.data = new Float32Array(size);\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n\n    dbg_assert((size & size - 1) === 0);\n}\n\nFloatQueue.prototype.push = function(item)\n{\n    if(this.length === this.size)\n    {\n        // intentional overwrite\n        this.start = this.start + 1 & this.size - 1;\n    }\n    else\n    {\n        this.length++;\n    }\n\n    this.data[this.end] = item;\n    this.end = this.end + 1 & this.size - 1;\n};\n\nFloatQueue.prototype.shift = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        var item = this.data[this.start];\n\n        this.start = this.start + 1 & this.size - 1;\n        this.length--;\n\n        return item;\n    }\n};\n\nFloatQueue.prototype.shift_block = function(count)\n{\n    var slice = new Float32Array(count);\n\n    if(count > this.length)\n    {\n        count = this.length;\n    }\n    var slice_end = this.start + count;\n\n    var partial = this.data.subarray(this.start, slice_end);\n\n    slice.set(partial);\n    if(slice_end >= this.size)\n    {\n        slice_end -= this.size;\n        slice.set(this.data.subarray(0, slice_end), partial.length);\n    }\n    this.start = slice_end;\n\n    this.length -= count;\n\n    return slice;\n};\n\nFloatQueue.prototype.peek = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.data[this.start];\n    }\n};\n\nFloatQueue.prototype.clear = function()\n{\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n};\n\n\n/**\n * Simple circular queue for logs\n *\n * @param {number} size\n * @constructor\n */\nfunction CircularQueue(size)\n{\n    this.data = [];\n    this.index = 0;\n    this.size = size;\n}\n\nCircularQueue.prototype.add = function(item)\n{\n    this.data[this.index] = item;\n    this.index = (this.index + 1) % this.size;\n};\n\nCircularQueue.prototype.toArray = function()\n{\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\n};\n\nCircularQueue.prototype.clear = function()\n{\n    this.data = [];\n    this.index = 0;\n};\n\n/**\n * @param {Array} new_data\n */\nCircularQueue.prototype.set = function(new_data)\n{\n    this.data = new_data;\n    this.index = 0;\n};\n","\"use strict\";\n\n// Useful documentation, articles, and source codes for reference:\n// ===============================================================\n//\n// Official Hardware Programming Guide\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n//\n// Official Yamaha YMF262 Manual\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\n//\n// OPL3 Programming Guide\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\n//\n// DOSBox\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\n//\n// QEMU\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\n//\n// VirtualBox\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\n\nvar\n\n    // Used for drivers to identify device (DSP command 0xE3).\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\n\n    // Value of the current DSP command that indicates that the\n    // next command/data write in port 2xC should be interpreted\n    // as a command number.\n/** @const */ DSP_NO_COMMAND = 0,\n\n    // Size (bytes) of the DSP write/read buffers\n/** @const */ DSP_BUFSIZE = 64,\n\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\n/** @const */ DSP_DACSIZE = 65536,\n\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\n    // stored before being processed.\n/** @const */ SB_DMA_BUFSIZE = 65536,\n\n    // Number of samples to attempt to retrieve per transfer.\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\n\n    // Usable DMA channels.\n/** @const */ SB_DMA0 = 0,\n/** @const */ SB_DMA1 = 1,\n/** @const */ SB_DMA3 = 3,\n/** @const */ SB_DMA5 = 5,\n/** @const */ SB_DMA6 = 6,\n/** @const */ SB_DMA7 = 7,\n\n    // Default DMA channels.\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\n\n    // Usable IRQ channels.\n/** @const */ SB_IRQ2 = 2,\n/** @const */ SB_IRQ5 = 5,\n/** @const */ SB_IRQ7 = 7,\n/** @const */ SB_IRQ10 = 10,\n\n    // Default IRQ channel.\n/** @const */ SB_IRQ = SB_IRQ5,\n\n    // Indices to the irq_triggered register.\n/** @const */ SB_IRQ_8BIT = 0x1,\n/** @const */ SB_IRQ_16BIT = 0x2,\n/** @const */ SB_IRQ_MIDI = 0x1,\n/** @const */ SB_IRQ_MPU = 0x4;\n\n\n// Probably less efficient, but it's more maintainable, instead\n// of having a single large unorganised and decoupled table.\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\nvar DSP_COMMAND_HANDLERS = [];\nvar MIXER_READ_HANDLERS = [];\nvar MIXER_WRITE_HANDLERS = [];\nvar FM_HANDLERS = [];\n\n\n/**\n * Sound Blaster 16 Emulator, or so it seems.\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction SB16(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cpu_paused = false;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    // I/O Buffers.\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer_lastvalue = 0;\n\n    // Current DSP command info.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    // Mixer.\n    this.mixer_current_address = 0;\n    this.mixer_unhandled_registers = new Uint8Array(256);\n\n    // Dummy status and test registers.\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    // DSP state.\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    // DAC buffer.\n    // The final destination for audio data before being sent off\n    // to Web Audio APIs.\n    // Format:\n    // Floating precision linear PCM, nominal between -1 and 1.\n    this.dac_buffers = [\n      new FloatQueue(DSP_DACSIZE),\n      new FloatQueue(DSP_DACSIZE),\n    ];\n\n    // Number of repeated samples needed to approximate the\n    // emulated sample rate. TODO: This can be improved by\n    // doing some sort of sample rate conversion, or detuning,\n    // as it currently changes the pitch of every audio (slightly sharper).\n    this.dac_rate_ratio = 2;\n\n    // Number of samples requested on each audio-process.\n    this.dac_process_samples = SB_DMA_BLOCK_SAMPLES;\n\n    // Direct Memory Access transfer info.\n    this.dma = cpu.devices.dma;\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\n    this.dma_autoinit = false;\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    // DMA identification data.\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    // ASP data: not understood by me.\n    this.asp_registers = new Uint8Array(256);\n\n    // MPU.\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.mpu_read_buffer_lastvalue = 0;\n\n    // FM Synthesizer.\n    this.fm_current_address0 = 0;\n    this.fm_current_address1 = 0;\n    this.fm_waveform_select_enable = false;\n\n    // Interrupts.\n    this.irq = SB_IRQ;\n    this.irq_triggered = new Uint8Array(0x10);\n\n    // Sample rate of the receiving end, i.e. the Web Audio Context.\n    this.audio_samplerate = 48000;\n\n    // IO Ports.\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n\n    cpu.io.register_read(0x220, this, this.port2x0_read);\n    cpu.io.register_read(0x221, this, this.port2x1_read);\n    cpu.io.register_read(0x222, this, this.port2x2_read);\n    cpu.io.register_read(0x223, this, this.port2x3_read);\n    cpu.io.register_read(0x224, this, this.port2x4_read);\n    cpu.io.register_read(0x225, this, this.port2x5_read);\n    cpu.io.register_read(0x226, this, this.port2x6_read);\n    cpu.io.register_read(0x227, this, this.port2x7_read);\n    cpu.io.register_read(0x228, this, this.port2x8_read);\n    cpu.io.register_read(0x229, this, this.port2x9_read);\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\n    cpu.io.register_read(0x22E, this, this.port2xE_read);\n    cpu.io.register_read(0x22F, this, this.port2xF_read);\n\n    cpu.io.register_write(0x220, this, this.port2x0_write);\n    cpu.io.register_write(0x221, this, this.port2x1_write);\n    cpu.io.register_write(0x222, this, this.port2x2_write);\n    cpu.io.register_write(0x223, this, this.port2x3_write);\n    cpu.io.register_write(0x224, this, this.port2x4_write);\n    cpu.io.register_write(0x225, this, this.port2x5_write);\n    cpu.io.register_write(0x226, this, this.port2x6_write);\n    cpu.io.register_write(0x227, this, this.port2x7_write);\n    cpu.io.register_write(0x228, this, this.port2x8_write);\n    cpu.io.register_write(0x229, this, this.port2x9_write);\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\n\n    cpu.io.register_read(0x330, this, this.port3x0_read);\n    cpu.io.register_read(0x331, this, this.port3x1_read);\n    cpu.io.register_write(0x330, this, this.port3x0_write);\n    cpu.io.register_write(0x331, this, this.port3x1_write);\n\n    this.dma.on_unmask(this.dma_on_unmask, this);\n\n    bus.register(\"speaker-tell-samplerate\", function(rate)\n    {\n        this.audio_samplerate = rate;\n    }, this);\n\n    bus.send(\"speaker-request-samplerate\");\n\n    bus.register(\"speaker-request-data\", function(size)\n    {\n        this.audio_send(size);\n    }, this);\n\n    bus.register(\"cpu-stop\", function()\n    {\n        this.cpu_paused = true;\n        bus.send(\"speaker-update-enable\", false);\n    }, this);\n\n    bus.register(\"cpu-run\", function()\n    {\n        this.cpu_paused = false;\n        bus.send(\"speaker-update-enable\", !this.dma_paused);\n    }, this);\n\n    this.reset_dsp();\n}\n\n//\n// General\n//\n\nSB16.prototype.reset_dsp = function()\n{\n    this.write_buffer.clear();\n    this.read_buffer.clear();\n\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    this.dac_buffers[0].clear();\n    this.dac_buffers[1].clear();\n    this.dac_rate_ratio = 2;\n\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_autoinit = false;\n    this.dma_buffer_uint8.fill(0);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    this.lower_irq(SB_IRQ_8BIT);\n    this.irq_triggered.fill(0);\n\n    this.asp_registers.fill(0);\n    this.asp_registers[5] = 0x01;\n    this.asp_registers[9] = 0xF8;\n};\n\nSB16.prototype.get_state = function()\n{\n    var state = [];\n\n    // state[0] = this.write_buffer;\n    // state[1] = this.read_buffer;\n    state[2] = this.read_buffer_lastvalue;\n\n    state[3] = this.command;\n    state[4] = this.command_size;\n\n    state[5] = this.mixer_current_address;\n    state[6] = this.mixer_unhandled_registers;\n\n    state[7] = this.dummy_speaker_enabled;\n    state[8] = this.test_register;\n\n    state[9] = this.dsp_highspeed;\n    state[10] = this.dsp_stereo;\n    state[11] = this.dsp_16bit;\n    state[12] = this.dsp_signed;\n\n    // state[13] = this.dac_buffers;\n    state[14] = this.dac_rate_ratio;\n\n    state[15] = this.dma_sample_count;\n    state[16] = this.dma_bytes_count;\n    state[17] = this.dma_bytes_left;\n    state[18] = this.dma_bytes_block;\n    state[19] = this.dma_irq;\n    state[20] = this.dma_channel;\n    state[21] = this.dma_channel_8bit;\n    state[22] = this.dma_channel_16bit;\n    state[23] = this.dma_autoinit;\n    state[24] = this.dma_buffer_uint8;\n    state[25] = this.dma_waiting_transfer;\n    state[26] = this.dma_paused;\n    state[27] = this.sampling_rate;\n    state[28] = this.bytes_per_sample;\n\n    state[29] = this.e2_value;\n    state[30] = this.e2_count;\n\n    state[31] = this.asp_registers;\n\n    // state[32] = this.mpu_read_buffer;\n    state[33] = this.mpu_read_buffer_last_value;\n\n    state[34] = this.irq;\n    state[35] = this.irq_triggered;\n    state[36] = this.audio_samplerate;\n\n    return state;\n};\n\nSB16.prototype.set_state = function(state)\n{\n    // this.write_buffer = state[0];\n    // this.read_buffer = state[1];\n    this.read_buffer_lastvalue = state[2];\n\n    this.command = state[3];\n    this.command_size = state[4];\n\n    this.mixer_current_address = state[5];\n    this.mixer_unhandled_registers = state[6];\n\n    this.dummy_speaker_enabled = state[7];\n    this.test_register = state[8];\n\n    this.dsp_highspeed = state[9];\n    this.dsp_stereo = state[10];\n    this.dsp_16bit = state[11];\n    this.dsp_signed = state[12];\n\n    // this.dac_buffers = state[13];\n    this.dac_rate_ratio = state[14];\n\n    this.dma_sample_count = state[15];\n    this.dma_bytes_count = state[16];\n    this.dma_bytes_left = state[17];\n    this.dma_bytes_block = state[18];\n    this.dma_irq = state[19];\n    this.dma_channel = state[20];\n    this.dma_channel_8bit = state[21];\n    this.dma_channel_16bit = state[22];\n    this.dma_autoinit = state[23];\n    this.dma_buffer_uint8 = state[24];\n    this.dma_waiting_transfer = state[25];\n    this.dma_paused = state[26];\n    this.sampling_rate = state[27];\n    this.bytes_per_sample = state[28];\n\n    this.e2_value = state[29];\n    this.e2_count = state[30];\n\n    this.asp_registers = state[31];\n\n    // this.mpu_read_buffer = state[32];\n    this.mpu_read_buffer_last_value = state[33];\n\n    this.irq = state[34];\n    this.irq_triggered = state[35];\n    this.audio_samplerate = state[36];\n\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n\n    this.bus.send(\"speaker-update-enable\", !this.dma_paused);\n};\n\n//\n// I/O handlers\n//\n\nSB16.prototype.port2x0_read = function()\n{\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x1_read = function()\n{\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x2_read = function()\n{\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x3_read = function()\n{\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_read = function()\n{\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\n    return this.mixer_current_address;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_read = function()\n{\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\n    var handler = MIXER_READ_HANDLERS[this.mixer_current_address];\n    if(!handler)\n    {\n        handler = this.mixer_default_read;\n    }\n    return handler.call(this);\n};\n\nSB16.prototype.port2x6_read = function()\n{\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x7_read = function()\n{\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x8_read = function()\n{\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x9_read = function()\n{\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read Data.\n// Used to acces in-bound DSP data.\nSB16.prototype.port2xA_read = function()\n{\n    dbg_log(\"22A read: read data\", LOG_SB16);\n    if(this.read_buffer.length)\n    {\n        this.read_buffer_lastvalue = this.read_buffer.shift();\n    }\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\n    return this.read_buffer_lastvalue;\n};\n\nSB16.prototype.port2xB_read = function()\n{\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Write-Buffer Status.\n// Indicates whether the DSP is ready to accept commands or data.\nSB16.prototype.port2xC_read = function()\n{\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\n    // Always return ready (bit-7 set to low)\n    return 0x7F;\n};\n\nSB16.prototype.port2xD_read = function()\n{\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read-Buffer Status.\n// Indicates whether there is any in-bound data available for reading.\n// Also used to acknowledge DSP 8-bit interrupt.\nSB16.prototype.port2xE_read = function()\n{\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\n    if(this.irq_triggered[SB_IRQ_8BIT])\n    {\n        this.lower_irq(SB_IRQ_8BIT);\n    }\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\n    return (ready << 7) | 0x7F;\n};\n\n// DSP 16-bit interrupt acknowledgement.\nSB16.prototype.port2xF_read = function()\n{\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\n    this.lower_irq(SB_IRQ_16BIT);\n    return 0;\n};\n\n\n// FM Address Port - primary register.\nSB16.prototype.port2x0_write = function(value)\n{\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\n    this.fm_current_address0 = 0;\n};\n\n// FM Data Port - primary register.\nSB16.prototype.port2x1_write = function(value)\n{\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address0];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 0, this.fm_current_address0);\n};\n\n// FM Address Port - secondary register.\nSB16.prototype.port2x2_write = function(value)\n{\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\n    this.fm_current_address1 = 0;\n};\n\n// FM Data Port - secondary register.\nSB16.prototype.port2x3_write = function(value)\n{\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address1];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 1, this.fm_current_address1);\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_write = function(value)\n{\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\n    this.mixer_current_address = value;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_write = function(value)\n{\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\n    var handler = MIXER_WRITE_HANDLERS[this.mixer_current_address];\n    if(!handler)\n    {\n        handler = this.mixer_default_write;\n    }\n    handler.call(this, value);\n};\n\n// Reset.\n// Used to reset the DSP to its default state and to exit highspeed mode.\nSB16.prototype.port2x6_write = function(yesplease)\n{\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\n\n    if(this.dsp_highspeed)\n    {\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\n        this.dsp_highspeed = false;\n    }\n    else if(yesplease)\n    {\n        dbg_log(\" -> reset\", LOG_SB16);\n        this.reset_dsp();\n    }\n\n    // Signal completion.\n    this.read_buffer.clear();\n    this.read_buffer.push(0xAA);\n};\n\nSB16.prototype.port2x7_write = function(value)\n{\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2x8_write = function(value)\n{\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2x9_write = function(value)\n{\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2xA_write = function(value)\n{\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xB_write = function(value)\n{\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\n};\n\n// Write Command/Data.\n// Used to send commands or data to the DSP.\nSB16.prototype.port2xC_write = function(value)\n{\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\n\n    if(this.command === DSP_NO_COMMAND)\n    {\n        // New command.\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\n        this.command = value;\n        this.write_buffer.clear();\n        this.command_size = DSP_COMMAND_SIZES[value];\n    }\n    else\n    {\n        // More data for current command.\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\n        this.write_buffer.push(value);\n    }\n\n    // Perform command when we have all the needed data.\n    if(this.write_buffer.length >= this.command_size)\n    {\n        this.command_do();\n    }\n};\n\nSB16.prototype.port2xD_write = function(value)\n{\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2xE_write = function(value)\n{\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xF_write = function(value)\n{\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\n};\n\n\n// MPU UART Mode - Data Port\nSB16.prototype.port3x0_read = function()\n{\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\n\n    if(this.mpu_read_buffer.length)\n    {\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\n    }\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\n\n    return this.mpu_read_buffer_lastvalue;\n};\nSB16.prototype.port3x0_write = function(value)\n{\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\n};\n\n// MPU UART Mode - Status Port\nSB16.prototype.port3x1_read = function()\n{\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\n\n    var status = 0;\n    status |= 0x40 * 0; // Output Ready\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\n\n    return status;\n};\n\n// MPU UART Mode - Command Port\nSB16.prototype.port3x1_write = function(value)\n{\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\n    if(value == 0xFF)\n    {\n        // Command acknowledge.\n        this.mpu_read_buffer.clear();\n        this.mpu_read_buffer.push(0xFE);\n    }\n};\n\n//\n// DSP command handlers\n//\n\nSB16.prototype.command_do = function()\n{\n    var handler = DSP_COMMAND_HANDLERS[this.command];\n    if(!handler)\n    {\n        handler = this.dsp_default_handler;\n    }\n    handler.call(this);\n\n    // Reset Inputs.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n    this.write_buffer.clear();\n};\n\nSB16.prototype.dsp_default_handler = function()\n{\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\n};\n\n/**\n * @param {Array} commands\n * @param {number} size\n * @param {function()=} handler\n */\nfunction register_dsp_command(commands, size, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.dsp_default_handler;\n    }\n    for(var i = 0; i < commands.length; i++)\n    {\n        DSP_COMMAND_SIZES[commands[i]] = size;\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\n    }\n}\n\nfunction any_first_digit(base)\n{\n    var commands = [];\n    for(var i = 0; i < 16; i++)\n    {\n        commands.push(base + i);\n    }\n    return commands;\n}\n\n// ASP set register\nregister_dsp_command([0x0E], 2, function()\n{\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\n});\n\n// ASP get register\nregister_dsp_command([0x0F], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\n});\n\n// 8-bit direct mode single byte digitized sound output.\nregister_dsp_command([0x10], 1, function()\n{\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\n\n    this.dac_buffers[0].push(value);\n    this.dac_buffers[1].push(value);\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// 8-bit single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x14, 0x15], 2, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = false;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output.\nregister_dsp_command([0x16], 2);\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\n// with reference byte.\nregister_dsp_command([0x17], 2);\n\n// 8-bit auto-init DMA mode digitized sound output.\nregister_dsp_command([0x1C], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x1F], 0);\n\n// 8-bit direct mode single byte digitized sound input.\nregister_dsp_command([0x20], 0, function()\n{\n    // Fake silent input.\n    this.read_buffer.clear();\n    this.read_buffer.push(0x7f);\n});\n\n// 8-bit single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x24], 2);\n\n// 8-bit auto-init DMA mode digitized sound input.\nregister_dsp_command([0x2C], 0);\n\n// Polling mode MIDI input.\nregister_dsp_command([0x30], 0);\n\n// Interrupt mode MIDI input.\nregister_dsp_command([0x31], 0);\n\n// UART polling mode MIDI I/O.\nregister_dsp_command([0x34], 0);\n\n// UART interrupt mode MIDI I/O.\nregister_dsp_command([0x35], 0);\n\n// UART polling mode MIDI I/O with time stamping.\nregister_dsp_command([0x36], 0);\n\n// UART interrupt mode MIDI I/O with time stamping.\nregister_dsp_command([0x37], 0);\n\n// MIDI output.\nregister_dsp_command([0x38], 0);\n\n// Set digitized sound transfer Time Constant.\nregister_dsp_command([0x40], 1, function()\n{\n    this.sampling_rate_change(\n        1000000\n        / (256 - this.write_buffer.shift())\n        / this.get_channel_count()\n    );\n});\n\n// Set digitized sound output sampling rate.\n// Set digitized sound input sampling rate.\nregister_dsp_command([0x41, 0x42], 2, function()\n{\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\n});\n\n// Set DSP block transfer size.\nregister_dsp_command([0x48], 2, function()\n{\n    // TODO: should be in bytes, but if this is only used\n    // for 8 bit transfers, then this number is the same\n    // as number of samples?\n    // Wrong: e.g. stereo requires two bytes per sample.\n    this.dma_transfer_size_set();\n});\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x74], 2);\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x75], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x76], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x77], 2);\n\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7D], 0);\n\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7F], 0);\n\n// Pause DAC for a duration.\nregister_dsp_command([0x80], 2);\n\n// 8-bit high-speed auto-init DMA mode digitized sound output.\nregister_dsp_command([0x90], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_highspeed = true;\n    this.dsp_16bit = false;\n    this.dma_transfer_start();\n});\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x91], 0);\n\n// 8-bit high-speed auto-init DMA mode digitized sound input.\nregister_dsp_command([0x98], 0);\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x99], 0);\n\n// Set input mode to mono.\nregister_dsp_command([0xA0], 0);\n\n// Set input mode to stereo.\nregister_dsp_command([0xA8], 0);\n\n// Program 16-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xB0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_16BIT;\n    this.dma_channel = this.dma_channel_16bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = true;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Program 8-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xC0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Pause 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD0], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"speaker-update-enable\", false);\n});\n\n// Turn on speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD1], 0, function()\n{\n    this.dummy_speaker_enabled = true;\n});\n\n// Turn off speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD3], 0, function()\n{\n    this.dummy_speaker_enabled = false;\n});\n\n// Continue 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD4], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// Pause 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD5], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"speaker-update-enable\", false);\n});\n\n// Continue 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD6], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// Get speaker status.\nregister_dsp_command([0xD8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\n});\n\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\n// Exit 8-bit auto-init mode digitized sound I/O.\nregister_dsp_command([0xD9, 0xDA], 0, function()\n{\n    this.dma_autoinit = false;\n});\n\n// DSP identification\nregister_dsp_command([0xE0], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(~this.write_buffer.shift());\n});\n\n// Get DSP version number.\nregister_dsp_command([0xE1], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(4);\n    this.read_buffer.push(5);\n});\n\n// DMA identification.\nregister_dsp_command([0xE2], 1);\n\n// Get DSP copyright.\nregister_dsp_command([0xE3], 0, function()\n{\n    this.read_buffer.clear();\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\n    {\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\n    }\n    // Null terminator.\n    this.read_buffer.push(0);\n});\n\n// Write test register.\nregister_dsp_command([0xE4], 1, function()\n{\n    this.test_register = this.write_buffer.shift();\n});\n\n// Read test register.\nregister_dsp_command([0xE8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.test_register);\n});\n\n// Trigger IRQ\nregister_dsp_command([0xF2, 0xF3], 0, function()\n{\n    this.raise_irq();\n});\n\n// ASP - unknown function\nvar SB_F9 = new Uint8Array(256);\nSB_F9[0x0E] = 0xFF;\nSB_F9[0x0F] = 0x07;\nSB_F9[0x37] = 0x38;\nregister_dsp_command([0xF9], 1, function()\n{\n    var input = this.write_buffer.shift();\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\n\n    this.read_buffer.clear();\n    this.read_buffer.push(SB_F9[input]);\n});\n\n//\n// Mixer Handlers\n//\n\nSB16.prototype.mixer_default_read = function()\n{\n    dbg_log(\"unhandled mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\n    return this.mixer_unhandled_registers[this.mixer_current_address];\n};\n\nSB16.prototype.mixer_default_write = function(data)\n{\n    dbg_log(\"unhandled mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\n    this.mixer_unhandled_registers[this.mixer_current_address] = data;\n};\n\n/**\n * @param{number} address\n * @param{function():number=} handler\n */\nfunction register_mixer_read(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_read;\n    }\n    MIXER_READ_HANDLERS[address] = handler;\n}\n\n/**\n * @param{number} address\n * @param{function(number)=} handler\n */\nfunction register_mixer_write(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_write;\n    }\n    MIXER_WRITE_HANDLERS[address] = handler;\n}\n\n// Reset.\nregister_mixer_read(0x00, function()\n{\n    return 0;\n});\nregister_mixer_write(0x00);\n\n// Output Stereo Select.\nregister_mixer_write(0x0E, function(bits)\n{\n    this.dsp_stereo = bits & 0x2;\n    this.bus.send(\"speaker-stereo\", this.dsp_stereo);\n    this.bus.send(\"speaker-filter\", bits & 0x20);\n});\n\n// IRQ Select.\nregister_mixer_read(0x80, function()\n{\n    switch(this.irq)\n    {\n        case SB_IRQ2: return 0x1;\n        case SB_IRQ5: return 0x2;\n        case SB_IRQ7: return 0x4;\n        case SB_IRQ10: return 0x8;\n        default: return 0x0;\n    }\n});\nregister_mixer_write(0x80, function(bits)\n{\n    if(bits & 0x1) this.irq = SB_IRQ2;\n    if(bits & 0x2) this.irq = SB_IRQ5;\n    if(bits & 0x4) this.irq = SB_IRQ7;\n    if(bits & 0x8) this.irq = SB_IRQ10;\n});\n\n// DMA Select.\nregister_mixer_read(0x81, function()\n{\n    var ret = 0;\n    switch(this.dma_channel_8bit)\n    {\n        case SB_DMA0: ret |= 0x1; break;\n        case SB_DMA1: ret |= 0x2; break;\n        // Channel 2 is hardwired to floppy disk.\n        case SB_DMA3: ret |= 0x8; break;\n    }\n    switch(this.dma_channel_16bit)\n    {\n        // Channel 4 cannot be used.\n        case SB_DMA5: ret |= 0x20; break;\n        case SB_DMA6: ret |= 0x40; break;\n        case SB_DMA7: ret |= 0x80; break;\n    }\n    return ret;\n});\nregister_mixer_write(0x81, function(bits)\n{\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\n});\n\n// IRQ Status.\nregister_mixer_read(0x82, function()\n{\n    var ret = 0x20;\n    for(var i = 0; i < 16; i++)\n    {\n        ret |= i * this.irq_triggered[i];\n    }\n    return ret;\n});\n\n//\n// FM Handlers\n//\n\nSB16.prototype.fm_default_write = function(data, register, address)\n{\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    // No need to save into a dummy register as the registers are write-only.\n};\n\n/**\n * @param{Array} addresses\n * @param{function(number, number, number)=} handler\n */\nfunction register_fm_write(addresses, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.fm_default_write;\n    }\n    for(var i = 0; i < addresses.length; i++)\n    {\n        FM_HANDLERS[addresses[i]] = handler;\n    }\n}\n\nfunction between(start, end)\n{\n    var a = [];\n    for(var i = start; i <= end; i++)\n    {\n        a.push(i);\n    }\n    return a;\n}\n\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\n\nfunction get_fm_operator(register, offset)\n{\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\n}\n\nregister_fm_write([0x01], function(bits, register, address)\n{\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\n    this.fm_update_waveforms();\n});\n\n// Timer 1 Count.\nregister_fm_write([0x02]);\n\n// Timer 2 Count.\nregister_fm_write([0x03]);\n\nregister_fm_write([0x04], function(bits, register, address)\n{\n    switch(register)\n    {\n        case 0:\n            // if(bits & 0x80)\n            // {\n            //     // IQR Reset\n            // }\n            // else\n            // {\n            //     // Timer masks and on/off\n            // }\n            break;\n        case 1:\n            // Four-operator enable\n            break;\n    }\n});\n\nregister_fm_write([0x05], function(bits, register, address)\n{\n    if(register === 0)\n    {\n        // No registers documented here.\n        this.fm_default_write(bits, register, address);\n        return;\n    }\n    // OPL3 Mode Enable\n});\n\nregister_fm_write([0x08], function(bits, register, address)\n{\n    // Composite sine wave on/off\n    // Note select (keyboard split selection method)\n});\n\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x20);\n    // Tremolo\n    // Vibrato\n    // Sustain\n    // KSR Envelope Scaling\n    // Frequency Multiplication Factor\n});\n\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x40);\n    // Key Scale Level\n    // Output Level\n});\n\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x60);\n    // Attack Rate\n    // Decay Rate\n});\n\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x80);\n    // Sustain Level\n    // Release Rate\n});\n\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\n{\n    var channel = address - 0xA0;\n    // Frequency Number (Lower 8 bits)\n});\n\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\n{\n    // Key-On\n    // Block Number\n    // Frequency Number (Higher 2 bits)\n});\n\nregister_fm_write([0xBD], function(bits, register, address)\n{\n    // Tremelo Depth\n    // Vibrato Depth\n    // Percussion Mode\n    // Bass Drum Key-On\n    // Snare Drum Key-On\n    // Tom-Tom Key-On\n    // Cymbal Key-On\n    // Hi-Hat Key-On\n});\n\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\n{\n    // Right Speaker Enable\n    // Left Speaker Enable\n    // Feedback Modulation Factor\n    // Synthesis Type\n});\n\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0xE0);\n    // Waveform Select\n});\n\n//\n// FM behaviours\n//\n\nSB16.prototype.fm_update_waveforms = function()\n{\n    // To be implemented.\n}\n\n//\n// General behaviours\n//\n\nSB16.prototype.sampling_rate_change = function(rate)\n{\n    this.sampling_rate = rate;\n};\n\nSB16.prototype.get_channel_count = function()\n{\n    return this.dsp_stereo ? 2 : 1;\n};\n\nSB16.prototype.dma_transfer_size_set = function()\n{\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\n};\n\nSB16.prototype.dma_transfer_start = function()\n{\n    dbg_log(\"begin dma transfer\", LOG_SB16);\n\n    // (1) Setup appropriate settings.\n\n    this.bytes_per_sample = 1;\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\n\n    // Don't count stereo interleaved bits apparently.\n    // Disabling this line is needed for sounds to work correctly,\n    // especially double buffering autoinit mode.\n    // Learnt the hard way.\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\n\n    this.dac_rate_ratio = Math.round(this.audio_samplerate / this.sampling_rate);\n\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\n\n    // (2) Wait for unmask event.\n    this.dma_waiting_transfer = true;\n};\n\nSB16.prototype.dma_on_unmask = function(channel)\n{\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\n    {\n        return;\n    }\n\n    // (3) Configure amount of bytes left to transfer and begin first\n    // block of transfer when the DMA channel has been unmasked.\n    this.dma_waiting_transfer = false;\n    this.dma_bytes_left = this.dma_bytes_count;\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n    this.dma_transfer_next();\n};\n\nSB16.prototype.dma_transfer_next = function()\n{\n    // No more data to transfer.\n    if(!this.dma_bytes_left) return;\n\n    // DAC has enough samples buffered for now.\n    // Don't transfer too much too early, or else the DMA counters will not\n    // accurately reflect the amount of audio that has already been\n    // played back by the Web Audio API.\n    if(this.dac_buffers[0].length > this.dac_process_samples * 2) return;\n\n    // Do not transfer if paused.\n    if(this.cpu_paused || this.dma_paused) return;\n\n    dbg_log(\"dma transfering next block\", LOG_SB16);\n\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\n    var samples = Math.floor(size / this.bytes_per_sample);\n\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\n    {\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\n        if(error) return;\n\n        this.dma_to_dac(samples);\n        this.dma_bytes_left -= size;\n\n        if(!this.dma_bytes_left)\n        {\n            // Completed requested transfer of given size.\n            this.raise_irq(this.dma_irq);\n\n            if(this.dma_autoinit)\n            {\n                // Restart the transfer.\n                this.dma_bytes_left = this.dma_bytes_count;\n            }\n        }\n\n        // Keep transfering until dac_buffer contains enough data.\n        setTimeout(() => { this.dma_transfer_next(); }, 0);\n    });\n};\n\nSB16.prototype.dma_to_dac = function(sample_count)\n{\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\n    var offset = this.dsp_signed ? 0 : -1;\n    var repeats = (this.dsp_stereo ? 1 : 2) * this.dac_rate_ratio;\n\n    var buffer;\n    if(this.dsp_16bit)\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\n    }\n    else\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\n    }\n\n    var channel = 0;\n    for(var i = 0; i < sample_count; i++)\n    {\n        var sample = audio_normalize(buffer[i], amplitude, offset);\n        for(var j = 0; j < repeats; j++)\n        {\n            this.dac_buffers[channel].push(sample);\n            channel ^= 1;\n        }\n    }\n};\n\nSB16.prototype.audio_send = function(size)\n{\n    this.dac_process_samples = size;\n\n    if(this.dac_buffers[0].length && this.dac_buffers[0].length < this.dac_process_samples * 2)\n    {\n        dbg_log(\"dac_buffer contains only \" +\n            (this.dac_buffers[0].length / 2) +\n            \" samples out of \" + this.dac_process_samples + \" needed\", LOG_SB16);\n    }\n\n    var out0 = this.dac_buffers[0].shift_block(size);\n    var out1 = this.dac_buffers[1].shift_block(size);\n    this.bus.send(\"speaker-update-data\", [out0, out1], [out0.buffer, out1.buffer]);\n\n    setTimeout(() => { this.dma_transfer_next(); }, 0);\n};\n\nSB16.prototype.raise_irq = function(type)\n{\n    dbg_log(\"raise irq\", LOG_SB16);\n    this.irq_triggered[type] = 1;\n    this.cpu.device_raise_irq(this.irq);\n};\n\nSB16.prototype.lower_irq = function(type)\n{\n    dbg_log(\"lower irq\", LOG_SB16);\n    this.irq_triggered[type] = 0;\n    this.cpu.device_lower_irq(this.irq);\n};\n\n//\n// Helpers\n//\n\nfunction audio_normalize(value, amplitude, offset)\n{\n    return audio_clip(value / amplitude + offset, -1, 1);\n}\n\nfunction audio_clip(value, low, high)\n{\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\n}\n","\"use strict\";\n\n/** @const */\nvar FPU_LOG_OP = false;\n\nvar\n    /** @const */\n    FPU_C0 = 0x100,\n    /** @const */\n    FPU_C1 = 0x200,\n    /** @const */\n    FPU_C2 = 0x400,\n    /** @const */\n    FPU_C3 = 0x4000,\n    /** @const */\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\n    /** @const */\n    FPU_STACK_TOP = 0x3800;\n\nvar\n    // precision, round & infinity control\n    /** @const */\n    FPU_PC = 3 << 8,\n    /** @const */\n    FPU_RC = 3 << 10,\n    /** @const */\n    FPU_IF = 1 << 12;\n\n// exception bits in the status word\nvar\n    /** @const */\n    FPU_EX_SF = 1 << 6,\n    /** @const */\n    FPU_EX_P = 1 << 5,\n    /** @const */\n    FPU_EX_U = 1 << 4,\n    /** @const */\n    FPU_EX_O = 1 << 3,\n    /** @const */\n    FPU_EX_Z = 1 << 2,\n    /** @const */\n    FPU_EX_D = 1 << 1,\n    /** @const */\n    FPU_EX_I = 1 << 0;\n\nvar\n    /** @const */\n    TWO_POW_63 =  0x8000000000000000;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction FPU(cpu)\n{\n    // TODO:\n    // - Precision Control\n    // - QNaN, unordered comparison\n    // - Exceptions\n\n    this.cpu = cpu;\n\n    // Why no Float80Array :-(\n    this.st = new Float64Array(8);\n\n    // used for conversion\n    /** @const */ this.float32 = new Float32Array(1);\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\n    /** @const */ this.float64 = new Float64Array(1);\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\n\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\n\n\n    // bitmap of which stack registers are empty\n    this.stack_empty = 0xff;\n    this.stack_ptr = 0;\n\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_ip_selector = 0;\n    this.fpu_opcode = 0;\n    this.fpu_dp = 0;\n    this.fpu_dp_selector = 0;\n\n    /** @const */\n    this.indefinite_nan = NaN;\n\n    /** @const */\n    this.constants = new Float64Array([\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\n        Math.log(2) / Math.LN10, Math.LN2, 0\n    ]);\n\n}\n\nFPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.st;\n    state[1] = this.stack_empty;\n    state[2] = this.stack_ptr;\n    state[3] = this.control_word;\n    state[4] = this.fpu_dp_selector;\n    state[5] = this.fpu_ip;\n    state[6] = this.fpu_ip_selector;\n    state[7] = this.fpu_dp;\n    state[8] = this.fpu_dp_selector;\n    state[9] = this.fpu_opcode;\n\n    return state;\n};\n\nFPU.prototype.set_state = function(state)\n{\n    this.st.set(state[0]);\n    this.stack_empty = state[1];\n    this.stack_ptr = state[2];\n    this.control_word = state[3];\n    this.fpu_dp_selector = state[4];\n    this.fpu_ip = state[5];\n    this.fpu_ip_selector = state[6];\n    this.fpu_dp = state[7];\n    this.fpu_dp_selector = state[8];\n    this.fpu_opcode = state[9];\n};\n\nFPU.prototype.fpu_unimpl = function()\n{\n    dbg_trace();\n    if(DEBUG) throw \"fpu: unimplemented\";\n    else this.cpu.trigger_ud();\n}\n\nFPU.prototype.stack_fault = function()\n{\n    // TODO: Interrupt\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\n}\n\nFPU.prototype.invalid_arithmatic = function()\n{\n    this.status_word |= FPU_EX_I;\n}\n\nFPU.prototype.fcom = function(y)\n{\n    var x = this.get_st0();\n\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === y)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else\n    {\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\n    }\n}\n\nFPU.prototype.fucom = function(y)\n{\n    // TODO\n    this.fcom(y);\n}\n\n\nFPU.prototype.fcomi = function(y)\n{\n    var x = this.st[this.stack_ptr];\n\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        this.cpu.flags |= flag_zero;\n    }\n    else\n    {\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\n    }\n}\n\nFPU.prototype.fucomi = function(y)\n{\n    // TODO\n    this.fcomi(y);\n}\n\nFPU.prototype.ftst = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(isNaN(x))\n    {\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x < 0)\n    {\n        this.status_word |= FPU_C0;\n    }\n\n    // TODO: unordered (x is nan, etc)\n}\n\nFPU.prototype.fxam = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n    this.status_word |= this.sign(0) << 9;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word |= FPU_C3 | FPU_C0;\n    }\n    else if(isNaN(x))\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x === Infinity || x === -Infinity)\n    {\n        this.status_word |= FPU_C2 | FPU_C0;\n    }\n    else\n    {\n        this.status_word |= FPU_C2;\n    }\n    // TODO:\n    // Unsupported, Denormal\n}\n\nFPU.prototype.finit = function()\n{\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_dp = 0;\n    this.fpu_opcode = 0;\n\n    this.stack_empty = 0xFF;\n    this.stack_ptr = 0;\n}\n\nFPU.prototype.load_status_word = function()\n{\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\n}\n\nFPU.prototype.set_status_word = function(sw)\n{\n    this.status_word = sw & ~(7 << 11);\n    this.stack_ptr = sw >> 11 & 7;\n}\n\nFPU.prototype.load_tag_word = function()\n{\n    var tag_word = 0,\n        value;\n\n    for(var i = 0; i < 8; i++)\n    {\n        value = this.st[i];\n\n        if(this.stack_empty >> i & 1)\n        {\n            tag_word |= 3 << (i << 1);\n        }\n        else if(value === 0)\n        {\n            tag_word |= 1 << (i << 1);\n        }\n        else if(!isFinite(value))\n        {\n            tag_word |= 2 << (i << 1);\n        }\n    }\n\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\n\n    return tag_word;\n}\n\nFPU.prototype.set_tag_word = function(tag_word)\n{\n    this.stack_empty = 0;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\n    }\n\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\n}\n\nFPU.prototype.fstenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.cpu.writable_or_pagefault(addr, 26);\n\n        this.cpu.safe_write16(addr, this.control_word);\n\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\n\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fldenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.control_word = this.cpu.safe_read16(addr);\n\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\n\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fsave = function(addr)\n{\n    this.cpu.writable_or_pagefault(addr, 108);\n\n    this.fstenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\n        addr += 10;\n    }\n\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n\n    this.finit();\n}\n\nFPU.prototype.frstor = function(addr)\n{\n    this.fldenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\n        addr += 10;\n    }\n\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n}\n\nFPU.prototype.fxtract = function()\n{\n    this.float64[0] = this.get_st0();\n\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\n\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\n    this.float64_byte[6] |= 0xF0;\n\n    this.st[this.stack_ptr] = exponent;\n    this.push(this.float64[0]);\n};\n\nFPU.prototype.integer_round = function(f)\n{\n    var rc = this.control_word >> 10 & 3;\n\n    if(rc === 0)\n    {\n        // Round to nearest, or even if equidistant\n        var rounded = Math.round(f);\n\n        if(rounded - f === 0.5 && (rounded % 2))\n        {\n            // Special case: Math.round rounds to positive infinity\n            // if equidistant\n            rounded--;\n        }\n\n        return rounded;\n    }\n        // rc=3 is truncate -> floor for positive numbers\n    else if(rc === 1 || (rc === 3 && f > 0))\n    {\n        return Math.floor(f);\n    }\n    else\n    {\n        return Math.ceil(f);\n    }\n}\n\nFPU.prototype.truncate = function(x)\n{\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nFPU.prototype.push = function(x)\n{\n    this.stack_ptr = this.stack_ptr - 1 & 7;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_empty &= ~(1 << this.stack_ptr);\n        this.st[this.stack_ptr] = x;\n    }\n    else\n    {\n        this.status_word |= FPU_C1;\n        this.stack_fault();\n        this.st[this.stack_ptr] = this.indefinite_nan;\n    }\n}\n\nFPU.prototype.pop = function()\n{\n    this.stack_empty |= 1 << this.stack_ptr;\n    this.stack_ptr = this.stack_ptr + 1 & 7;\n}\n\nFPU.prototype.get_sti = function(i)\n{\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\n\n    i = i + this.stack_ptr & 7;\n\n    if(this.stack_empty >> i & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[i];\n    }\n}\n\nFPU.prototype.get_st0 = function()\n{\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[this.stack_ptr];\n    }\n}\n\nFPU.prototype.load_m80 = function(addr)\n{\n    var exponent = this.cpu.safe_read16(addr + 8),\n        sign,\n        low = this.cpu.safe_read32s(addr) >>> 0,\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\n\n    sign = exponent >> 15;\n    exponent &= ~0x8000;\n\n    if(exponent === 0)\n    {\n        // TODO: denormal numbers\n        return 0;\n    }\n\n    if(exponent < 0x7FFF)\n    {\n        exponent -= 0x3FFF;\n    }\n    else\n    {\n        // TODO: NaN, Infinity\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\n        this.float64_byte[7] = 0x7F | sign << 7;\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\n\n        this.float64_byte[5] = 0;\n        this.float64_byte[4] = 0;\n\n        this.float64_int[0] = 0;\n\n        return this.float64[0];\n    }\n\n    // Note: some bits might be lost at this point\n    var mantissa = low + 0x100000000 * high;\n\n    if(sign)\n    {\n        mantissa = -mantissa;\n    }\n\n    //console.log(\"m: \" + mantissa);\n    //console.log(\"e: \" + exponent);\n    //console.log(\"s: \" + this.sign);\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\n\n    // Simply compute the 64 bit floating point number.\n    // An alternative write the mantissa, sign and exponent in the\n    // float64_byte and return float64[0]\n\n    return mantissa * Math.pow(2, exponent - 63);\n}\n\nFPU.prototype.store_m80 = function(addr, n)\n{\n    this.float64[0] = n;\n\n    var sign = this.float64_byte[7] & 0x80,\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\n        low,\n        high;\n\n    if(exponent === 0x7FF)\n    {\n        // all bits set (NaN and infinity)\n        exponent = 0x7FFF;\n        low = 0;\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\n    }\n    else if(exponent === 0)\n    {\n        // zero and denormal numbers\n        // Just assume zero for now\n        low = 0;\n        high = 0;\n    }\n    else\n    {\n        exponent += 0x3FFF - 0x3FF;\n\n        // does the mantissa need to be adjusted?\n        low = this.float64_int[0] << 11;\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\n    }\n\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\n\n    this.cpu.safe_write32(addr, low);\n    this.cpu.safe_write32(addr + 4, high);\n\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\n}\n\nFPU.prototype.load_m64 = function(addr)\n{\n    var low = this.cpu.safe_read32s(addr),\n        high = this.cpu.safe_read32s(addr + 4);\n\n    this.float64_int[0] = low;\n    this.float64_int[1] = high;\n\n    return this.float64[0];\n};\n\nFPU.prototype.store_m64 = function(addr, i)\n{\n    this.cpu.writable_or_pagefault(addr, 8);\n\n    this.float64[0] = this.get_sti(i);\n\n    this.cpu.safe_write32(addr, this.float64_int[0]);\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\n};\n\nFPU.prototype.load_m32 = function(addr)\n{\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\n\n    return this.float32[0];\n};\n\nFPU.prototype.store_m32 = function(addr, x)\n{\n    this.float32[0] = x;\n\n    this.cpu.safe_write32(addr, this.float32_int[0]);\n};\n\n// sign of a number on the stack\nFPU.prototype.sign = function(i)\n{\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\n};\n\n\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\n{\n    if(!FPU_LOG_OP)\n    {\n        return;\n    }\n\n    if(imm8 >= 0xC0)\n    {\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n    else\n    {\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n}\n\n\nFPU.prototype.fwait = function()\n{\n    // NOP unless FPU instructions run in parallel with CPU instructions\n};\n\n\nFPU.prototype.op_D8_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + sti;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * sti;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D8_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.load_m32(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var sti = this.get_sti(low);\n            this.push(sti);\n            break;\n        case 1:\n            // fxch\n            var sti = this.get_sti(low);\n\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            this.st[this.stack_ptr] = sti;\n            break;\n        case 2:\n            switch(low)\n            {\n                case 0:\n                    // fnop\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 3:\n            // fstp1\n            this.fpu_unimpl();\n            break;\n        case 4:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fchs\n                    this.st[this.stack_ptr] = -st0;\n                    break;\n                case 1:\n                    // fabs\n                    this.st[this.stack_ptr] = Math.abs(st0);\n                    break;\n                case 4:\n                    this.ftst(st0);\n                    break;\n                case 5:\n                    this.fxam(st0);\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.push(this.constants[low]);\n            break;\n        case 6:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // f2xm1\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\n                    break;\n                case 1:\n                    // fyl2x\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    // fptan\n                    this.st[this.stack_ptr] = Math.tan(st0);\n                    this.push(1); // no bug: push constant 1\n                    break;\n                case 3:\n                    // fpatan\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\n                    this.pop();\n                    break;\n                case 4:\n                    this.fxtract();\n                    break;\n                case 5:\n                    // fprem1\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\n                    break;\n                case 6:\n                    // fdecstp\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                case 7:\n                    // fincstp\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        case 7:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fprem\n                    var st1 = this.get_sti(1);\n                    var fprem_quotient = Math.trunc(st0 / st1);\n                    this.st[this.stack_ptr] = st0 % st1;\n\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\n                    if (fprem_quotient & 1) {\n                        this.status_word |= FPU_C1;\n                    }\n                    if (fprem_quotient & (1 << 1)) {\n                        this.status_word |= FPU_C3;\n                    }\n                    if (fprem_quotient & (1 << 2)) {\n                        this.status_word |= FPU_C0;\n                    }\n\n                    this.status_word &= ~FPU_C2;\n                    break;\n                case 1:\n                    // fyl2xp1: y * log2(x+1) and pop\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\n                    break;\n                case 3:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    this.push(Math.cos(st0));\n                    break;\n                case 4:\n                    // frndint\n                    this.st[this.stack_ptr] = this.integer_round(st0);\n                    break;\n                case 5:\n                    // fscale\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\n                    break;\n                case 6:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    break;\n                case 7:\n                    this.st[this.stack_ptr] = Math.cos(st0);\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m32(addr);\n            this.push(data);\n            break;\n        case 1:\n            // not defined\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m32(addr, this.get_st0());\n            break;\n        case 3:\n            // fstp\n            this.store_m32(addr, this.get_st0());\n            this.pop();\n            break;\n        case 4:\n            this.fldenv(addr);\n            break;\n        case 5:\n            // fldcw\n            var word = this.cpu.safe_read16(addr);\n            this.control_word = word;\n            break;\n        case 6:\n            this.fstenv(addr);\n            break;\n        case 7:\n            // fstcw\n            this.cpu.safe_write16(addr, this.control_word);\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DA_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovb\n            if(this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmove\n            if(this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovbe\n            if(this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovu\n            if(this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 5:\n            if(low === 1)\n            {\n                // fucompp\n                this.fucom(this.get_sti(1));\n                this.pop();\n                this.pop();\n            }\n            else\n            {\n                dbg_log(mod); this.fpu_unimpl();\n            }\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DA_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.cpu.safe_read32s(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DB_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovnb\n            if(!this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmovne\n            if(!this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovnbe\n            if(!this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovnu\n            if(!this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 4:\n            if(imm8 === 0xE3)\n            {\n                this.finit();\n            }\n            else if(imm8 === 0xE4)\n            {\n                // fsetpm\n                // treat as nop\n            }\n            else if(imm8 === 0xE1)\n            {\n                // fdisi\n                // also treat as nop\n            }\n            else if(imm8 === 0xE2)\n            {\n                // fclex\n                this.status_word = 0;\n            }\n            else\n            {\n                dbg_log(h(imm8));\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.fucomi(this.get_sti(low));\n            break;\n        case 6:\n            this.fcomi(this.get_sti(low));\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DB_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fild\n            var int32 = this.cpu.safe_read32s(addr);\n            this.push(int32);\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                // TODO: Invalid operation\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            this.pop();\n            break;\n        case 5:\n            // fld\n            this.push(this.load_m80(addr));\n            break;\n        case 7:\n            // fstp\n            this.cpu.writable_or_pagefault(addr, 10);\n            this.store_m80(addr, this.get_st0());\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DC_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmul\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsubr\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsub\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivr\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdiv\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DC_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var\n        mod = imm8 >> 3 & 7,\n        m64 = this.load_m64(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m64;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m64;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m64);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m64);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m64;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m64 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m64;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m64 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DD_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // ffree\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\n            break;\n        case 2:\n            // fst\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            break;\n        case 3:\n            // fstp\n            if(low === 0)\n            {\n                this.pop();\n            }\n            else\n            {\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\n                this.pop();\n            }\n            break;\n        case 4:\n            this.fucom(this.get_sti(low));\n            break;\n        case 5:\n            // fucomp\n            this.fucom(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DD_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m64(addr);\n            this.push(data);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m64(addr, 0);\n            break;\n        case 3:\n            // fstp\n            this.store_m64(addr, 0);\n            this.pop();\n            break;\n        case 4:\n            this.frstor(addr);\n            break;\n        case 5:\n            // nothing\n            this.fpu_unimpl();\n            break;\n        case 6:\n            // fsave\n            this.fsave(addr);\n            break;\n        case 7:\n            // fnstsw / store status word\n            this.cpu.safe_write16(addr, this.load_status_word());\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\n\nFPU.prototype.op_DE_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // faddp\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmulp\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcomp\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcompp\n            if(low === 1)\n            {\n                this.fcom(this.st[low_ptr]);\n                this.pop();\n            }\n            else\n            {\n                // not a valid encoding\n                dbg_log(mod);\n                this.fpu_unimpl();\n            }\n            break;\n        case 4:\n            // fsubrp\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubp\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivrp\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivp\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n\n    this.pop();\n};\n\nFPU.prototype.op_DE_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m16;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m16;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m16);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m16);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m16;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m16 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m16;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m16 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DF_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 4:\n            if(imm8 === 0xE0)\n            {\n                // fnstsw\n                this.cpu.reg16[reg_ax] = this.load_status_word();\n            }\n            else\n            {\n                dbg_log(imm8);\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            // fucomip\n            this.fucomi(this.get_sti(low));\n            this.pop();\n            break;\n        case 6:\n            // fcomip\n            this.fcomi(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DF_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n            this.push(m16);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            this.pop();\n            break;\n        case 4:\n            // fbld\n            this.fpu_unimpl();\n            break;\n        case 5:\n            // fild\n            var low = this.cpu.safe_read32s(addr) >>> 0,\n                high = this.cpu.safe_read32s(addr + 4);\n\n            var m64 = low + 0x100000000 * high;\n\n            this.push(m64);\n            break;\n        case 6:\n            // fbstp\n            this.fpu_unimpl();\n            break;\n        case 7:\n            this.cpu.writable_or_pagefault(addr, 8);\n\n            // fistp\n            var st0 = this.integer_round(this.get_st0()),\n                st0_low,\n                st0_high;\n\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\n            {\n                st0_low = st0 | 0;\n                st0_high = st0 / 0x100000000 | 0;\n\n                if(st0_high === 0 && st0 < 0)\n                    st0_high = -1;\n            }\n            else\n            {\n                // write 0x8000000000000000\n                st0_low  = 0;\n                st0_high = 0x80000000 | 0;\n                this.invalid_arithmatic();\n            }\n\n            this.cpu.safe_write32(addr, st0_low);\n            this.cpu.safe_write32(addr + 4, st0_high);\n\n            this.pop();\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n","\"use strict\";\n\n/** @param {number=} length */\nfunction hex_dump(buffer, length)\n{\n    var result = [];\n    length = length || buffer.byteLength;\n    var addr = 0;\n    var line, byt;\n\n    for(var i = 0; i < length >> 4; i++)\n    {\n        line = h(addr + (i << 4), 5) + \"   \";\n\n        for(var j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += h(byt, 2) + \" \";\n        }\n\n        line += \"  \";\n\n        for(j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n        }\n\n        result.push(line);\n    }\n\n    return \"\\n\" + result.join(\"\\n\");\n}\n\n/** @const */\nvar CDROM_SECTOR_SIZE = 2048;\n/** @const */\nvar HD_SECTOR_SIZE = 512;\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {boolean} is_cd\n * @param {number} nr\n * @param {BusConnector} bus\n * */\nfunction IDEDevice(cpu, buffer, is_cd, nr, bus)\n{\n    this.master = new IDEInterface(this, cpu, buffer, is_cd, nr, 0, bus);\n    this.slave = new IDEInterface(this, cpu, undefined, false, nr, 1, bus);\n\n    this.current_interface = this.master;\n\n    this.cpu = cpu;\n\n    // gets set via PCI in seabios, likely doesn't matter\n    if(nr === 0)\n    {\n        this.ata_port = 0x1F0;\n        this.irq = 14;\n\n        this.pci_id = 0x1E << 3;\n    }\n    else if(nr === 1)\n    {\n        this.ata_port = 0x170;\n        this.irq = 15;\n\n        this.pci_id = 0x1F << 3;\n    }\n    else\n    {\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\n    }\n\n    // alternate status, starting at 3f4/374\n    /** @type {number} */\n    this.ata_port_high = this.ata_port | 0x204;\n\n    /** @type {number} */\n    this.master_port = 0xB400;\n\n    this.pci_space = [\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // second device\n        0x00, 0x00, 0x00, 0x00, // second device\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x43, 0x10, 0xD4, 0x82,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\n\n        // 0x40\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        // 0x80\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    this.pci_bars = [\n        {\n            size: 8,\n        },\n        {\n            size: 4,\n        },\n        undefined,\n        undefined,\n        {\n            size: 0x10,\n        },\n    ];\n    this.name = \"ide\" + nr;\n\n    /** @type {number} */\n    this.device_control = 2;\n\n    // status\n    cpu.io.register_read(this.ata_port | 7, this, function() {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        return this.read_status();\n    });\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\n\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\n    cpu.io.register_read(this.ata_port | 0, this, function()\n    {\n        return this.current_interface.read_data(1);\n    }, function()\n    {\n        return this.current_interface.read_data(2);\n    }, function()\n    {\n        return this.current_interface.read_data(4);\n    });\n\n    cpu.io.register_read(this.ata_port | 1, this, function()\n    {\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\n        return this.current_interface.error;\n    });\n    cpu.io.register_read(this.ata_port | 2, this, function()\n    {\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\n        return this.current_interface.bytecount & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 3, this, function()\n    {\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\n        return this.current_interface.sector & 0xFF;\n    });\n\n    cpu.io.register_read(this.ata_port | 4, this, function()\n    {\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_low & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 5, this, function()\n    {\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_high & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 6, this, function()\n    {\n        dbg_log(\"Read 1F6\", LOG_DISK);\n        return this.current_interface.drive_head;\n    });\n\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\n    {\n        this.current_interface.write_data_port8(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port16(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port32(data);\n    });\n\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\n    {\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\n    {\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\n    {\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\n    });\n\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\n    {\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\n    {\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\n    {\n        var slave = data & 0x10;\n        var mode = data & 0xE0;\n\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\n\n        if(slave)\n        {\n            dbg_log(\"Slave\", LOG_DISK);\n            this.current_interface = this.slave;\n        }\n        else\n        {\n            this.current_interface = this.master;\n        }\n\n        this.master.drive_head = data;\n        this.slave.drive_head = data;\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\n        this.master.head = this.slave.head = data & 0xF;\n    });\n\n    /** @type {number} */\n    this.prdt_addr = 0;\n\n    /** @type {number} */\n    this.dma_status = 0;\n\n    /** @type {number} */\n    this.dma_command = 0;\n\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\n    {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        this.current_interface.ata_command(data);\n    });\n\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\n\n    cpu.io.register_read(this.master_port, this,\n                         this.dma_read_command8, undefined, this.dma_read_command);\n    cpu.io.register_write(this.master_port, this,\n                          this.dma_write_command8, undefined, this.dma_write_command);\n\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\n\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\n    });\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\n    });\n\n    cpu.devices.pci.register_device(this);\n\n    DEBUG && Object.seal(this);\n}\n\nIDEDevice.prototype.read_status = function()\n{\n    if(this.current_interface.buffer)\n    {\n        var ret = this.current_interface.status;\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\n        return ret;\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nIDEDevice.prototype.write_control = function(data)\n{\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\n\n    if(data & 4)\n    {\n        dbg_log(\"Reset via control port\", LOG_DISK);\n\n        this.cpu.device_lower_irq(this.irq);\n\n        this.master.device_reset();\n        this.slave.device_reset();\n    }\n\n    this.device_control = data;\n};\n\nIDEDevice.prototype.dma_read_addr = function()\n{\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\n    return this.prdt_addr;\n};\n\nIDEDevice.prototype.dma_set_addr = function(data)\n{\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\n    this.prdt_addr = data;\n};\n\nIDEDevice.prototype.dma_read_status = function()\n{\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\n    return this.dma_status;\n};\n\nIDEDevice.prototype.dma_write_status = function(value)\n{\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\n    this.dma_status &= ~(value & 6);\n};\n\nIDEDevice.prototype.dma_read_command = function()\n{\n    return this.dma_read_command8() | this.dma_read_status() << 16;\n};\n\nIDEDevice.prototype.dma_read_command8 = function()\n{\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\n    return this.dma_command;\n};\n\nIDEDevice.prototype.dma_write_command = function(value)\n{\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\n\n    this.dma_write_command8(value & 0xFF);\n    this.dma_write_status(value >> 16 & 0xFF);\n};\n\nIDEDevice.prototype.dma_write_command8 = function(value)\n{\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\n\n    let old_command = this.dma_command;\n    this.dma_command = value & 0x9;\n\n    if((old_command & 1) === (value & 1))\n    {\n        return;\n    }\n\n    if((value & 1) === 0)\n    {\n        this.dma_status &= ~1;\n        return;\n    }\n\n    this.dma_status |= 1;\n\n    switch(this.current_interface.current_command)\n    {\n        case 0x25:\n        case 0xC8:\n            this.current_interface.do_ata_read_sectors_dma();\n            break;\n\n        case 0xCA:\n        case 0x35:\n            this.current_interface.do_ata_write_sectors_dma();\n            break;\n\n        case 0xA0:\n            this.current_interface.do_atapi_dma();\n            break;\n\n        default:\n            dbg_log(\"Spurious dma command write, current command: \" +\n                    h(this.current_interface.current_command), LOG_DISK);\n            dbg_assert(false);\n    }\n};\n\nIDEDevice.prototype.push_irq = function()\n{\n    if((this.device_control & 2) === 0)\n    {\n        dbg_log(\"push irq\", LOG_DISK);\n        this.dma_status |= 4;\n        this.cpu.device_raise_irq(this.irq);\n    }\n};\n\nIDEDevice.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.master;\n    state[1] = this.slave;\n    state[2] = this.ata_port;\n    state[3] = this.irq;\n    state[4] = this.pci_id;\n    state[5] = this.ata_port_high;\n    state[6] = this.master_port;\n    state[7] = this.name;\n    state[8] = this.device_control;\n    state[9] = this.prdt_addr;\n    state[10] = this.dma_status;\n    state[11] = this.current_interface === this.master;\n    state[12] = this.dma_command;\n    return state;\n};\n\nIDEDevice.prototype.set_state = function(state)\n{\n    this.master = state[0];\n    this.slave = state[1];\n    this.ata_port = state[2];\n    this.irq = state[3];\n    this.pci_id = state[4];\n    this.ata_port_high = state[5];\n    this.master_port = state[6];\n    this.name = state[7];\n    this.device_control = state[8];\n    this.prdt_addr = state[9];\n    this.dma_status = state[10];\n    this.current_interface = state[11] ? this.master : this.slave;\n    this.dma_command = state[12];\n};\n\n\n/**\n * @constructor\n */\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\n{\n    this.device = device;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.nr = device_nr;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\n\n    /** @type {boolean} */\n    this.is_atapi = is_cd;\n\n    /** @type {number} */\n    this.sector_count = 0;\n\n    /** @type {number} */\n    this.head_count = 0;\n\n    /** @type {number} */\n    this.sectors_per_track = 0;\n\n    /** @type {number} */\n    this.cylinder_count = 0;\n\n    if(this.buffer)\n    {\n        this.sector_count = this.buffer.byteLength / this.sector_size;\n\n        if(this.sector_count !== (this.sector_count | 0))\n        {\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\n            this.sector_count = Math.ceil(this.sector_count);\n        }\n\n        if(is_cd)\n        {\n            this.head_count = 1;\n            this.sectors_per_track = 0;\n        }\n        else\n        {\n            // \"default\" values: 16/63\n            // common: 255, 63\n            this.head_count = 16;\n            this.sectors_per_track = 63;\n        }\n\n\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\n\n        if(this.cylinder_count !== (this.cylinder_count | 0))\n        {\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\n            this.cylinder_count = Math.floor(this.cylinder_count);\n            //this.sector_count = this.cylinder_count * this.head_count *\n            //                        this.sectors_per_track * this.sector_size;\n        }\n\n        //if(this.cylinder_count > 16383)\n        //{\n        //    this.cylinder_count = 16383;\n        //}\n\n        // disk translation: lba\n        var rtc = cpu.devices.rtc;\n\n        // master\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\n\n        var reg = CMOS_DISK_DRIVE1_CYL;\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\n        rtc.cmos_write(reg + 3, 0xFF);\n        rtc.cmos_write(reg + 4, 0xFF);\n        rtc.cmos_write(reg + 5, 0xC8);\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\n\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\n    }\n\n    /** @const */\n    this.stats = {\n        sectors_read: 0,\n        sectors_written: 0,\n        bytes_read: 0,\n        bytes_written: 0,\n        loading: false,\n    };\n\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.is_lba = 0;\n\n    /** @type {number} */\n    this.bytecount = 0;\n\n    /** @type {number} */\n    this.sector = 0;\n\n    /** @type {number} */\n    this.lba_count = 0;\n\n    /** @type {number} */\n    this.cylinder_low = 0;\n\n    /** @type {number} */\n    this.cylinder_high = 0;\n\n    /** @type {number} */\n    this.head = 0;\n\n    /** @type {number} */\n    this.drive_head = 0;\n\n    /** @type {number} */\n    this.status = 0x50;\n\n    /** @type {number} */\n    this.sectors_per_drq = 0x80;\n\n    /** @type {number} */\n    this.error = 0;\n\n    /** @type {number} */\n    this.data_pointer = 0;\n\n    this.data = new Uint8Array(64 * 1024);\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n\n    /** @type {number} */\n    this.data_length = 0;\n\n    /** @type {number} */\n    this.data_end = 0;\n\n    /** @type {number} */\n    this.current_command = -1;\n\n    /** @type {number} */\n    this.current_atapi_command = -1;\n\n    /** @type {number} */\n    this.write_dest = 0;\n\n    Object.seal(this);\n}\n\nIDEInterface.prototype.device_reset = function()\n{\n    if(this.is_atapi)\n    {\n        this.status = 0;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n        this.cylinder_low = 0x14; // lba_mid\n        this.cylinder_high = 0xEB; // lba_high\n    }\n    else\n    {\n        this.status = 0x50 | 1;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n\n        // 0, 0 needed by bochs bios\n        this.cylinder_low = 0; // lba_mid\n        this.cylinder_high = 0; // lba_high\n    }\n};\n\nIDEInterface.prototype.push_irq = function()\n{\n    this.device.push_irq();\n};\n\nIDEInterface.prototype.ata_command = function(cmd)\n{\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    if(!this.buffer)\n    {\n        dbg_log(\"abort: No buffer\", LOG_DISK);\n        this.error = 4;\n        this.status = 0x41;\n        this.push_irq();\n        return;\n    }\n\n    this.current_command = cmd;\n    this.error = 0;\n\n    switch(cmd)\n    {\n        case 0x08:\n            dbg_log(\"ATA device reset\", LOG_DISK);\n            this.data_pointer = 0;\n            this.data_end = 0;\n            this.data_length = 0;\n            this.device_reset();\n            this.push_irq();\n            break;\n\n        case 0x10:\n            // calibrate drive\n            this.status = 0x50;\n            this.cylinder_low = 0;\n            this.push_irq();\n            break;\n\n        case 0xF8:\n            // read native max address\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\n            this.push_irq();\n            break;\n\n        case 0x27:\n            // read native max address ext\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\n            this.push_irq();\n            break;\n\n        case 0x20:\n        case 0x24:\n        case 0x29:\n        case 0xC4:\n            // 0x20 read sectors\n            // 0x24 read sectors ext\n            // 0xC4 read multiple\n            // 0x29 read multiple ext\n            this.ata_read_sectors(cmd);\n            break;\n\n        case 0x30:\n        case 0x34:\n        case 0x39:\n        case 0xC5:\n            // 0x30 write sectors\n            // 0x34 write sectors ext\n            // 0xC5 write multiple\n            // 0x39 write multiple ext\n            this.ata_write_sectors(cmd);\n            break;\n\n        case 0x90:\n            // execute device diagnostic\n            this.push_irq();\n            this.error = 0x101;\n            this.status = 0x50;\n            break;\n\n        case 0x91:\n            // initialize device parameters\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xA0:\n            // ATA packet\n            if(this.is_atapi)\n            {\n                this.status = 0x58;\n                this.data_allocate(12);\n                this.data_end = 12;\n                this.bytecount = 1;\n                this.push_irq();\n            }\n            break;\n\n        case 0xA1:\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.create_identify_packet();\n                this.status = 0x58;\n\n                this.cylinder_low = 0x14;\n                this.cylinder_high = 0xEB;\n\n                this.push_irq();\n            }\n            else\n            {\n                this.status = 0x41;\n                this.push_irq();\n            }\n            break;\n\n        case 0xC6:\n            // set multiple mode\n            // Logical sectors per DRQ Block in word 1\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.sectors_per_drq = this.bytecount & 0xFF;\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0x25: // read dma ext\n        case 0xC8: // read dma\n            this.ata_read_sectors_dma(cmd);\n            break;\n\n        case 0x35: // write dma ext\n        case 0xCA: // write dma\n            this.ata_write_sectors_dma(cmd);\n            break;\n\n        case 0x40:\n            dbg_log(\"read verify sectors\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xDA:\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            this.push_irq();\n            break;\n\n        case 0xE0:\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE1:\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE7:\n            dbg_log(\"ATA flush cache\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEC:\n            dbg_log(\"ATA identify device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.status = 0x41;\n                this.error = 4;\n                this.push_irq();\n                return;\n            }\n\n            this.create_identify_packet();\n            this.status = 0x58;\n\n            this.push_irq();\n            break;\n\n        case 0xEA:\n            dbg_log(\"flush cache ext\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEF:\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF5:\n            dbg_log(\"security freeze lock\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF9:\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            break;\n\n        default:\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\n\n            this.status = 0x41;\n            // abort bit set\n            this.error = 4;\n    }\n};\n\nIDEInterface.prototype.atapi_handle = function()\n{\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    this.data_pointer = 0;\n    this.current_atapi_command = this.data[0];\n\n    switch(this.current_atapi_command)\n    {\n        case 0x00:\n            dbg_log(\"test unit ready\", LOG_DISK);\n            // test unit ready\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x03:\n            // request sense\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n\n            this.data[0] = 0x80 | 0x70;\n            this.data[2] = 5; // illegal request\n            this.data[7] = 8;\n            break;\n\n        case 0x12:\n            // inquiry\n            var length = this.data[4];\n            this.status = 0x58;\n\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\n\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\n            //this.data_allocate(36);\n            this.data.set([\n                0x05, 0x80, 0x01, 0x31,\n                // additional length\n                31,\n                0, 0, 0,\n\n                // 8\n                0x53, 0x4F, 0x4E, 0x59,\n                0x20, 0x20, 0x20, 0x20,\n\n                // 16\n                0x43, 0x44, 0x2D, 0x52,\n                0x4F, 0x4D, 0x20, 0x43,\n                0x44, 0x55, 0x2D, 0x31,\n                0x30, 0x30, 0x30, 0x20,\n\n                // 32\n                0x31, 0x2E, 0x31, 0x61,\n            ]);\n            this.data_end = this.data_length = Math.min(36, length);\n            break;\n\n        case 0x1A:\n            // mode sense (6)\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x1E:\n            // prevent/allow medium removal\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x25:\n            // read capacity\n            var count = this.sector_count - 1;\n            this.data_set(new Uint8Array([\n                count >> 24 & 0xFF,\n                count >> 16 & 0xFF,\n                count >> 8 & 0xFF,\n                count & 0xFF,\n                0,\n                0,\n                this.sector_size >> 8 & 0xFF,\n                this.sector_size & 0xFF,\n            ]));\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x28:\n            // read\n            if(this.lba_count & 1)\n            {\n                this.atapi_read_dma(this.data);\n            }\n            else\n            {\n                this.atapi_read(this.data);\n            }\n            break;\n\n        case 0x42:\n            var length = this.data[8];\n            this.data_allocate(Math.min(8, length));\n            this.data_end = this.data_length;\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\n            this.status = 0x58;\n            break;\n\n        case 0x43:\n            // read toc\n            var length = this.data[8] | this.data[7] << 8;\n            var format = this.data[9] >> 6;\n\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            dbg_log(\"read toc: \" + h(format, 2) +\n                    \" length=\" + length +\n                    \" \" + (this.data[1] & 2) +\n                    \" \" + h(this.data[6]), LOG_DISK);\n\n            if(format === 0)\n            {\n                var sector_count = this.sector_count;\n                this.data.set(new Uint8Array([\n                    0, 18, // length\n                    1, 1, // first and last session\n\n                    0,\n                    0x14,\n                    1, // track number\n                    0,\n                    0, 0, 0, 0,\n\n                    0,\n                    0x16,\n                    0xAA, // track number\n                    0,\n                    sector_count >> 24,\n                    sector_count >> 16 & 0xFF,\n                    sector_count >> 8 & 0xFF,\n                    sector_count & 0xFF,\n                ]));\n            }\n            else if(format === 1)\n            {\n                this.data.set(new Uint8Array([\n                    0, 10, // length\n                    1, 1, // first and last session\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                ]));\n            }\n            else\n            {\n                dbg_assert(false, \"Unimplemented format: \" + format);\n            }\n\n            this.status = 0x58;\n            break;\n\n        case 0x46:\n            // get configuration\n            var length = this.data[8] | this.data[7] << 8;\n            length = Math.min(length, 32);\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            this.data[0] = length - 4 >> 24 & 0xFF;\n            this.data[1] = length - 4 >> 16 & 0xFF;\n            this.data[2] = length - 4 >> 8 & 0xFF;\n            this.data[3] = length - 4 & 0xFF;\n            this.data[6] = 0x08;\n            this.data[10] = 3;\n            this.status = 0x58;\n            break;\n\n        case 0x51:\n            // read disk information\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x52:\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            break;\n\n        case 0x5A:\n            // mode sense\n            var length = this.data[8] | this.data[7] << 8;\n            var page_code = this.data[2];\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\n            if(page_code === 0x2A)\n            {\n                this.data_allocate(Math.min(30, length));\n            }\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0xBD:\n            // mechanism status\n            this.data_allocate(this.data[9] | this.data[8] << 8);\n            this.data_end = this.data_length;\n            this.data[5] = 1;\n            this.status = 0x58;\n            break;\n\n        case 0x4A:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            break;\n\n        default:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            dbg_assert(false);\n    }\n\n    this.bytecount = this.bytecount & ~7 | 2;\n\n    if((this.status & 0x80) === 0)\n    {\n        this.push_irq();\n    }\n\n    if((this.status & 0x80) === 0 && this.data_length === 0)\n    {\n        this.bytecount |= 1;\n        this.status &= ~8;\n    }\n};\n\nIDEInterface.prototype.do_write = function()\n{\n    this.status = 0x50;\n\n    dbg_assert(this.data_length <= this.data.length);\n    var data = this.data.subarray(0, this.data_length);\n\n    //dbg_log(hex_dump(data), LOG_DISK);\n    dbg_assert(this.data_length % 512 === 0);\n    this.ata_advance(this.current_command, this.data_length / 512);\n    this.push_irq();\n\n    this.buffer.set(this.write_dest, data, function()\n    {\n    });\n\n    this.report_write(this.data_length);\n};\n\nIDEInterface.prototype.atapi_read = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    this.data_length = 0;\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\n\n    if(req_length === 0xFFFF)\n        req_length--;\n\n    if(req_length > byte_count)\n    {\n        req_length = byte_count;\n    }\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else if(byte_count === 0)\n    {\n        this.status = 0x50;\n\n        this.data_pointer = 0;\n        //this.push_irq();\n    }\n    else\n    {\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\n            this.data_set(data);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n\n            this.push_irq();\n\n            req_length &= ~3;\n\n            this.data_end = req_length;\n            if(this.data_end > this.data_length)\n            {\n                this.data_end = this.data_length;\n            }\n            this.cylinder_low = this.data_end & 0xFF;\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\n\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.atapi_read_dma = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            dbg_log(\"atapi_read_dma: Data arrived\");\n            this.report_read_end(byte_count);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.data_set(data);\n\n            this.do_atapi_dma();\n        });\n    }\n};\n\nIDEInterface.prototype.do_atapi_dma = function()\n{\n    if((this.device.dma_status & 1) === 0)\n    {\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\n        return;\n    }\n\n    if((this.status & 0x8) === 0)\n    {\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\n        return;\n    }\n\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\n\n    var prdt_start = this.device.prdt_addr;\n    var offset = 0;\n\n    var data = this.data;\n\n    do {\n        var addr = this.cpu.read32s(prdt_start);\n        var count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!count)\n        {\n            count = 0x10000;\n        }\n\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\n        this.cpu.write_blob(data.subarray(offset,\n            Math.min(offset + count, this.data_length)), addr);\n\n        offset += count;\n        prdt_start += 8;\n\n        if(offset >= this.data_length && !end)\n        {\n            dbg_log(\"leave early end=\" + (+end) +\n                    \" offset=\" + h(offset) +\n                    \" data_length=\" + h(this.data_length) +\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\n            break;\n        }\n    }\n    while(!end);\n\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\n\n    this.status = 0x50;\n    this.device.dma_status &= ~1;\n    this.bytecount = this.bytecount & ~7 | 3;\n    this.push_irq();\n};\n\nIDEInterface.prototype.read_data = function(length)\n{\n    if(this.data_pointer < this.data_end)\n    {\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\n\n        if(length === 1)\n        {\n            var result = this.data[this.data_pointer];\n        }\n        else if(length === 2)\n        {\n            var result = this.data16[this.data_pointer >>> 1];\n        }\n        else\n        {\n            var result = this.data32[this.data_pointer >>> 2];\n        }\n\n        this.data_pointer += length;\n\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer & align) === 0)\n        {\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\n                        \" cur=\" + h(this.data_pointer) +\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\n        }\n\n        if(this.data_pointer >= this.data_end)\n        {\n            this.read_end();\n        }\n\n        return result;\n    }\n    else\n    {\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\n\n        this.data_pointer += length;\n        return 0;\n    }\n};\n\nIDEInterface.prototype.read_end = function()\n{\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\n\n    if(this.current_command === 0xA0)\n    {\n        if(this.data_end === this.data_length)\n        {\n            this.status = 0x50;\n            this.bytecount = this.bytecount & ~7 | 3;\n            this.push_irq();\n        }\n        else\n        {\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.push_irq();\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n\n            if(this.data_end + byte_count > this.data_length)\n            {\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\n                this.data_end = this.data_length;\n            }\n            else\n            {\n                this.data_end += byte_count;\n            }\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\n        }\n    }\n    else\n    {\n        this.error = 0;\n        if(this.data_pointer >= this.data_length)\n        {\n            this.status = 0x50;\n            this.push_irq();\n        }\n        else\n        {\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\n            {\n                var sector_count = Math.min(this.sectors_per_drq,\n                    (this.data_length - this.data_end) / 512);\n                dbg_assert(sector_count % 1 === 0);\n            }\n            else\n            {\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\n                var sector_count = 1;\n            }\n            this.ata_advance(this.current_command, sector_count);\n            this.data_end += 512 * sector_count;\n            this.status = 0x58;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port = function(data, length)\n{\n    dbg_assert(this.data_pointer % length === 0);\n\n    if(this.data_pointer >= this.data_end)\n    {\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\n    }\n    else\n    {\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\n        {\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\n        }\n\n        if(length === 1)\n        {\n            this.data[this.data_pointer++] = data;\n        }\n        else if(length === 2)\n        {\n            this.data16[this.data_pointer >>> 1] = data;\n            this.data_pointer += 2;\n        }\n        else\n        {\n            this.data32[this.data_pointer >>> 2] = data;\n            this.data_pointer += 4;\n        }\n\n        dbg_assert(this.data_pointer <= this.data_end);\n        if(this.data_pointer === this.data_end)\n        {\n            this.write_end();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port8 = function(data)\n{\n    this.write_data_port(data, 1);\n};\n\nIDEInterface.prototype.write_data_port16 = function(data)\n{\n    this.write_data_port(data, 2);\n};\n\nIDEInterface.prototype.write_data_port32 = function(data)\n{\n    this.write_data_port(data, 4);\n};\n\nIDEInterface.prototype.write_end = function()\n{\n    if(this.current_command === 0xA0)\n    {\n        this.atapi_handle();\n    }\n    else\n    {\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\n                \" data_length=\" + h(this.data_length), LOG_DISK);\n\n        if(this.data_pointer >= this.data_length)\n        {\n            this.do_write();\n        }\n        else\n        {\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\n            // XXX: Should advance here, but do_write does all the advancing\n            //this.ata_advance(this.current_command, 1);\n            this.status = 0x58;\n            this.data_end += 512;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\n{\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\n    this.bytecount -= sectors;\n\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\n       cmd === 0x25 || cmd === 0x35)\n    {\n        var new_sector = sectors + this.get_lba48();\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n    }\n    else if(this.is_lba)\n    {\n        var new_sector = sectors + this.get_lba28();\n        this.sector = new_sector & 0xFF;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n        this.head = this.head & ~0xF | new_sector & 0xF;\n    }\n    else // chs\n    {\n        var new_sector = sectors + this.get_chs();\n\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\n        this.cylinder_low = c & 0xFF;\n        this.cylinder_high = c >> 8 & 0xFF;\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\n\n        dbg_assert(new_sector === this.get_chs());\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x20 || cmd === 0x24;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x80 | 0x40;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\n\n            this.data_set(data);\n            this.status = 0x58;\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\n\n            this.push_irq();\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_assert(lba < this.buffer.byteLength);\n\n    this.report_read_start();\n\n    var orig_prdt_start = this.device.prdt_addr;\n\n    this.buffer.get(start, byte_count, (data) =>\n    {\n        //setTimeout(function() {\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\n        var prdt_start = this.device.prdt_addr;\n        var offset = 0;\n\n        dbg_assert(orig_prdt_start === prdt_start);\n\n        do {\n            var prd_addr = this.cpu.read32s(prdt_start);\n            var prd_count = this.cpu.read16(prdt_start + 4);\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n            if(!prd_count)\n            {\n                prd_count = 0x10000;\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\n            }\n\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\n\n            offset += prd_count;\n            prdt_start += 8;\n        }\n        while(!end);\n\n        dbg_assert(offset === byte_count);\n\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n\n        this.push_irq();\n\n        this.report_read_end(byte_count);\n        //}.bind(this), 10);\n    });\n};\n\nIDEInterface.prototype.ata_write_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x30 || cmd === 0x34;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA write lba=\" + h(lba) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x58;\n        this.data_allocate_noclear(byte_count);\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n        this.write_dest = start;\n    }\n};\n\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    var prdt_start = this.device.prdt_addr;\n    var prdt_count = 0;\n    var prdt_write_count = 0;\n    var offset = 0;\n\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\n\n    do {\n        var prd_addr = this.cpu.read32s(prdt_start);\n        var prd_count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!prd_count)\n        {\n            prd_count = 0x10000;\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\n        }\n\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\n\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\n        dbg_assert(slice.length === prd_count);\n\n        //if(DEBUG)\n        //{\n        //    dbg_log(hex_dump(slice), LOG_DISK);\n        //}\n\n        this.buffer.set(start + offset, slice, function()\n        {\n            prdt_write_count++;\n        });\n\n        offset += prd_count;\n        prdt_start += 8;\n        prdt_count++;\n    }\n    while(!end);\n\n    if(prdt_write_count === prdt_count)\n    {\n        //setTimeout(function() {\n        dbg_log(\"dma write completed\", LOG_DISK);\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.push_irq();\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n        //}, 10);\n    }\n    else\n    {\n        // fails when writes don't happen synchronously, which isn't currently\n        // the case, but might be in the future\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\n    }\n\n    this.report_write(byte_count);\n};\n\nIDEInterface.prototype.get_chs = function()\n{\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\n    var h = this.head;\n    var s = this.sector & 0xFF;\n\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\n\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\n};\n\nIDEInterface.prototype.get_lba28 = function()\n{\n    return this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.head & 0xF) << 24;\n};\n\nIDEInterface.prototype.get_lba48 = function()\n{\n    // Note: Bits over 32 missing\n    return (this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\n};\n\nIDEInterface.prototype.get_lba = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        return this.get_lba48();\n    }\n    else if(this.is_lba)\n    {\n        return this.get_lba28();\n    }\n    else\n    {\n        return this.get_chs();\n    }\n};\n\nIDEInterface.prototype.get_count = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        var count = this.bytecount;\n        if(count === 0) count = 0x10000;\n        return count;\n    }\n    else\n    {\n        var count = this.bytecount & 0xFF;\n        if(count === 0) count = 0x100;\n        return count;\n    }\n};\n\nIDEInterface.prototype.create_identify_packet = function()\n{\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\n\n    if(this.drive_head & 0x10)\n    {\n        // slave\n        this.data_allocate(0);\n        return;\n    }\n\n    for(var i = 0; i < 512; i++)\n    {\n        this.data[i] = 0;\n    }\n\n    var cylinder_count = Math.min(16383, this.cylinder_count);\n\n    this.data_set([\n        0x40, this.is_atapi ? 0x85 : 0,\n        // 1 cylinders\n        cylinder_count, cylinder_count >> 8,\n        0, 0,\n\n        // 3 heads\n        this.head_count, this.head_count >> 8,\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\n        // 5\n        0, 512 >> 8,\n        // sectors per track\n        this.sectors_per_track, this.sectors_per_track >> 8,\n        0, 0, 0, 0, 0, 0,\n        // 10-19 serial number\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 15\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 20\n        3, 0,\n        0, 2,\n        4, 0,\n        // 23-26 firmware revision\n        0, 0, 0, 0, 0, 0, 0, 0,\n\n        // 27 model number\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n\n        // 47 max value for set multiple mode\n        0x80, 0,\n        1, 0,\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        // 50\n        0, 0,\n        0, 2,\n        0, 2,\n        7, 0,\n\n        // 54 cylinders\n        cylinder_count, cylinder_count >> 8,\n        // 55 heads\n        this.head_count, this.head_count >> 8,\n        // 56 sectors per track\n        this.sectors_per_track, 0,\n        // capacity in sectors\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 60\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 63, dma supported mode, dma selected mode\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\n        //0, 0, // no DMA\n\n        0, 0,\n        // 65\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\n        // 70\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 75\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 80\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\n        // 85\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\n        // 90\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\n        // 95\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 100\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n    ]);\n\n    this.data_length = 512;\n    this.data_end = 512;\n};\n\nIDEInterface.prototype.data_allocate = function(len)\n{\n    this.data_allocate_noclear(len);\n\n    for(var i = 0; i < (len + 3 >> 2); i++)\n    {\n        this.data32[i] = 0;\n    }\n};\n\nIDEInterface.prototype.data_allocate_noclear = function(len)\n{\n    if(this.data.length < len)\n    {\n        this.data = new Uint8Array(len + 3 & ~3);\n        this.data16 = new Uint16Array(this.data.buffer);\n        this.data32 = new Int32Array(this.data.buffer);\n    }\n\n    this.data_length = len;\n    this.data_pointer = 0;\n};\n\nIDEInterface.prototype.data_set = function(data)\n{\n    this.data_allocate_noclear(data.length);\n    this.data.set(data);\n};\n\nIDEInterface.prototype.report_read_start = function()\n{\n    this.stats.loading = true;\n    this.bus.send(\"ide-read-start\");\n};\n\nIDEInterface.prototype.report_read_end = function(byte_count)\n{\n    this.stats.loading = false;\n\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_read += sector_count;\n    this.stats.bytes_read += byte_count;\n\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.report_write = function(byte_count)\n{\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_written += sector_count;\n    this.stats.bytes_written += byte_count;\n\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.bytecount;\n    state[1] = this.cylinder_count;\n    state[2] = this.cylinder_high;\n    state[3] = this.cylinder_low;\n    state[4] = this.data_pointer;\n    state[5] = 0;\n    state[6] = 0;\n    state[7] = 0;\n    state[8] = 0;\n    state[9] = this.drive_head;\n    state[10] = this.error;\n    state[11] = this.head;\n    state[12] = this.head_count;\n    state[13] = this.is_atapi;\n    state[14] = this.is_lba;\n    state[15] = this.lba_count;\n    state[16] = this.data;\n    state[17] = this.data_length;\n    state[18] = this.sector;\n    state[19] = this.sector_count;\n    state[20] = this.sector_size;\n    state[21] = this.sectors_per_drq;\n    state[22] = this.sectors_per_track;\n    state[23] = this.status;\n    state[24] = this.write_dest;\n    state[25] = this.current_command;\n    state[26] = this.data_end;\n    state[27] = this.current_atapi_command;\n    return state;\n};\n\nIDEInterface.prototype.set_state = function(state)\n{\n    this.bytecount = state[0];\n    this.cylinder_count = state[1];\n    this.cylinder_high = state[2];\n    this.cylinder_low = state[3];\n    this.data_pointer = state[4];\n\n    this.drive_head = state[9];\n    this.error = state[10];\n    this.head = state[11];\n    this.head_count = state[12];\n    this.is_atapi = state[13];\n    this.is_lba = state[14];\n    this.lba_count = state[15];\n    this.data = state[16];\n    this.data_length = state[17];\n    this.sector = state[18];\n    this.sector_count = state[19];\n    this.sector_size = state[20];\n    this.sectors_per_drq = state[21];\n    this.sectors_per_track = state[22];\n    this.status = state[23];\n    this.write_dest = state[24];\n    this.current_command = state[25];\n\n    this.data_end = state[26];\n    this.current_atapi_command = state[27];\n\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n};\n","\"use strict\";\n\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\n/** @const */ var CMOS_RTC_HOURS = 0x04;\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\n/** @const */ var CMOS_RTC_MONTH = 0x08;\n/** @const */ var CMOS_RTC_YEAR = 0x09;\n/** @const */ var CMOS_STATUS_A = 0x0a;\n/** @const */ var CMOS_STATUS_B = 0x0b;\n/** @const */ var CMOS_STATUS_C = 0x0c;\n/** @const */ var CMOS_STATUS_D = 0x0d;\n/** @const */ var CMOS_RESET_CODE = 0x0f;\n\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\n/** @const */ var CMOS_DISK_DATA = 0x12;\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\n/** @const */ var CMOS_CENTURY = 0x32;\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\n\n\n/**\n * RTC (real time clock) and CMOS\n * @constructor\n * @param {CPU} cpu\n */\nfunction RTC(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cmos_index = 0;\n    this.cmos_data = new Uint8Array(128);\n\n    // used for cmos entries\n    this.rtc_time = Date.now();\n    this.last_update = this.rtc_time;\n\n    // used for periodic interrupt\n    this.next_interrupt = 0;\n\n    this.periodic_interrupt = false;\n\n    // corresponds to default value for cmos_a\n    this.periodic_interrupt_time = 1000 / 1024;\n\n    this.cmos_a = 0x26;\n    this.cmos_b = 2;\n    this.cmos_c = 0;\n\n    this.nmi_disabled = 0;\n\n    cpu.io.register_write(0x70, this, function(out_byte)\n    {\n        this.cmos_index = out_byte & 0x7F;\n        this.nmi_disabled = out_byte >> 7;\n    });\n\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\n}\n\nRTC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.cmos_index;\n    state[1] = this.cmos_data;\n    state[2] = this.rtc_time;\n    state[3] = this.last_update;\n    state[4] = this.next_interrupt;\n\n    state[6] = this.periodic_interrupt;\n    state[7] = this.periodic_interrupt_time;\n    state[8] = this.cmos_a;\n    state[9] = this.cmos_b;\n    state[10] = this.cmos_c;\n    state[11] = this.nmi_disabled;\n\n    return state;\n};\n\nRTC.prototype.set_state = function(state)\n{\n    this.cmos_index = state[0];\n    this.cmos_data = state[1];\n    this.rtc_time = state[2];\n    this.last_update = state[3];\n    this.next_interrupt = state[4];\n\n    this.periodic_interrupt = state[6];\n    this.periodic_interrupt_time = state[7];\n    this.cmos_a = state[8];\n    this.cmos_b = state[9];\n    this.cmos_c = state[10];\n    this.nmi_disabled = state[11];\n};\n\nRTC.prototype.timer = function(time, legacy_mode)\n{\n    time = Date.now(); // XXX\n    this.rtc_time += time - this.last_update;\n    this.last_update = time;\n\n    if(this.periodic_interrupt && this.next_interrupt < time)\n    {\n        this.cpu.device_raise_irq(8);\n        this.cmos_c |= 1 << 6 | 1 << 7;\n\n        this.next_interrupt += this.periodic_interrupt_time *\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\n\n        return Math.max(0, time - this.next_interrupt);\n    }\n\n    return 100;\n};\n\nRTC.prototype.bcd_pack = function(n)\n{\n    var i = 0,\n        result = 0,\n        digit;\n\n    while(n)\n    {\n        digit = n % 10;\n\n        result |= digit << (4 * i);\n        i++;\n        n = (n - digit) / 10;\n    }\n\n    return result;\n};\n\nRTC.prototype.encode_time = function(t)\n{\n    if(this.cmos_b & 4)\n    {\n        // binary mode\n        return t;\n    }\n    else\n    {\n        return this.bcd_pack(t);\n    }\n};\n\n// TODO\n// - interrupt on update\n// - countdown\n// - letting bios/os set values\n// (none of these are used by seabios or the OSes we're\n// currently testing)\nRTC.prototype.cmos_port_read = function()\n{\n    var index = this.cmos_index;\n\n    //this.cmos_index = 0xD;\n\n    switch(index)\n    {\n        case CMOS_RTC_SECONDS:\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\n        case CMOS_RTC_MINUTES:\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\n        case CMOS_RTC_HOURS:\n            // TODO: 12 hour mode\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\n        case CMOS_RTC_DAY_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\n        case CMOS_RTC_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\n        case CMOS_RTC_YEAR:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\n\n        case CMOS_STATUS_A:\n            return this.cmos_a;\n        case CMOS_STATUS_B:\n            //dbg_log(\"cmos read from index \" + h(index));\n            return this.cmos_b;\n\n        case CMOS_STATUS_C:\n            // It is important to know that upon a IRQ 8, Status Register C\n            // will contain a bitmask telling which interrupt happened.\n            // What is important is that if register C is not read after an\n            // IRQ 8, then the interrupt will not happen again.\n            this.cpu.device_lower_irq(8);\n\n            dbg_log(\"cmos reg C read\", LOG_RTC);\n            // Missing IRQF flag\n            //return cmos_b & 0x70;\n            var c = this.cmos_c;\n\n            this.cmos_c &= ~0xF0;\n\n            return c;\n\n        case CMOS_STATUS_D:\n            return 0xFF;\n\n        case CMOS_CENTURY:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\n\n        default:\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\n            return this.cmos_data[this.cmos_index];\n    }\n};\n\nRTC.prototype.cmos_port_write = function(data_byte)\n{\n    switch(this.cmos_index)\n    {\n        case 0xA:\n            this.cmos_a = data_byte & 0x7F;\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\n\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\n            break;\n        case 0xB:\n            this.cmos_b = data_byte;\n            if(this.cmos_b & 0x40)\n            {\n                this.next_interrupt = Date.now();\n            }\n\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\n\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\n            break;\n        default:\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\n    }\n\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\n};\n\n/**\n * @param {number} index\n */\nRTC.prototype.cmos_read = function(index)\n{\n    dbg_assert(index < 128);\n    return this.cmos_data[index];\n};\n\n/**\n * @param {number} index\n * @param {number} value\n */\nRTC.prototype.cmos_write = function(index, value)\n{\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\n    dbg_assert(index < 128);\n    this.cmos_data[index] = value;\n};\n","\"use strict\";\n\n/** @const */\nvar A20_MASK = ~(1 << 20);\n/** @const */\nvar A20_MASK16 = ~(1 << 20 - 1);\n/** @const */\nvar A20_MASK32 = ~(1 << 20 - 2);\n\n/** @const */\nvar USE_A20 = false;\n\n\n// called by all memory writes\nCPU.prototype.debug_write = function(addr, size, value)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\n\n    this.debug_read(addr, size, true);\n}\n\n/**\n * @param {boolean=} is_write\n */\nCPU.prototype.debug_read = function(addr, size, is_write)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof addr === \"number\");\n    dbg_assert(!isNaN(addr));\n};\n\n\nCPU.prototype.mmap_read8 = function(addr)\n{\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\n};\n\nCPU.prototype.mmap_write8 = function(addr, value)\n{\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\n};\n\nCPU.prototype.mmap_read16 = function(addr)\n{\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\n\n    return fn(addr) | fn(addr + 1 | 0) << 8;\n};\n\nCPU.prototype.mmap_write16 = function(addr, value)\n{\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\n};\n\nCPU.prototype.mmap_read32 = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    return this.memory_map_read32[aligned_addr](addr);\n}\n\nCPU.prototype.mmap_write32 = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    this.memory_map_write32[aligned_addr](addr, value);\n}\n\nCPU.prototype.in_mapped_range = function(addr)\n{\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read8 = function(addr)\n{\n    this.debug_read(addr, 1);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read8(addr);\n    }\n    else\n    {\n        return this.mem8[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read16 = function(addr)\n{\n    this.debug_read(addr, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read16(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned16 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_read(addr << 1, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        return this.mmap_read16(addr << 1);\n    }\n    else\n    {\n        return this.mem16[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read32s = function(addr)\n{\n    this.debug_read(addr, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read32(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned32 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_read(addr << 2, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        return this.mmap_read32(addr << 2);\n    }\n    else\n    {\n        return this.mem32s[addr];\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write8 = function(addr, value)\n{\n    this.debug_write(addr, 1, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write8(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write16 = function(addr, value)\n{\n    this.debug_write(addr, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write16(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write_aligned16 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_write(addr << 1, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        this.mmap_write16(addr << 1, value);\n    }\n    else\n    {\n        this.mem16[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write32 = function(addr, value)\n{\n    this.debug_write(addr, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write32(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n        this.mem8[addr + 2 | 0] = value >> 16;\n        this.mem8[addr + 3 | 0] = value >> 24;\n    }\n};\n\nCPU.prototype.write_aligned32 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_write(addr << 2, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        this.mmap_write32(addr << 2, value);\n    }\n    else\n    {\n        this.mem32s[addr] = value;\n    }\n};\n\n/**\n * @param {Array.<number>|Uint8Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob = function(blob, offset)\n{\n    this.debug_write(offset, blob.length, 0)\n    dbg_assert(blob && blob.length >= 0);\n\n    this.mem8.set(blob, offset);\n};\n\n/**\n * @param {Array.<number>|Int32Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob32 = function(blob, offset)\n{\n    dbg_assert(blob && blob.length);\n    this.debug_write(offset, blob.length << 2, 0);\n    this.mem32s.set(blob, offset);\n};\n","\"use strict\";\n\n// http://wiki.osdev.org/PCI\n\nvar\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction PCI(cpu)\n{\n    this.pci_addr = new Uint8Array(4);\n    this.pci_value = new Uint8Array(4);\n    this.pci_response = new Uint8Array(4);\n    this.pci_status = new Uint8Array(4);\n\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\n\n    this.device_spaces = [];\n    this.devices = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 256; i++)\n    {\n        this.device_spaces[i] = undefined;\n        this.devices[i] = undefined;\n    }\n\n    this.io = cpu.io;\n\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write32(this.pci_addr32[0], value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\n        });\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\n        function()\n        {\n            return this.pci_response[0];\n        },\n        function()\n        {\n            return this.pci_response[1];\n        },\n        function()\n        {\n            return this.pci_response[2];\n        },\n        function()\n        {\n            return this.pci_response[3];\n        }\n    );\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\n        function()\n        {\n            return this.pci_status[0];\n        },\n        function()\n        {\n            return this.pci_status[1];\n        },\n        function()\n        {\n            return this.pci_status[2];\n        },\n        function()\n        {\n            return this.pci_status[3];\n        }\n    );\n\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\n        function(out_byte)\n        {\n            this.pci_addr[0] = out_byte & 0xFC;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[1] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[2] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[3] = out_byte;\n            this.pci_query();\n        }\n    );\n\n\n    // Some experimental PCI devices taken from my PC:\n\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\n    //var host_bridge = {\n    //    pci_id: 0,\n    //    pci_space: [\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    ],\n    //    pci_bars: [],\n    //};\n\n    var host_bridge = {\n        pci_id: 0,\n        pci_space: [\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82441FX PMC\",\n    };\n    this.register_device(host_bridge);\n\n    this.isa_bridge = {\n        pci_id: 1 << 3,\n        pci_space: [\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82371SB PIIX3 ISA\",\n    };\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\n\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n    //this.register_device([\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\n    //], 0x1e << 3);\n}\n\nPCI.prototype.get_state = function()\n{\n    var state = [];\n\n    for(var i = 0; i < 256; i++)\n    {\n        state[i] = this.device_spaces[i];\n    }\n\n    state[256] = this.pci_addr;\n    state[257] = this.pci_value;\n    state[258] = this.pci_response;\n    state[259] = this.pci_status;\n\n    return state;\n};\n\nPCI.prototype.set_state = function(state)\n{\n    for(var i = 0; i < 256; i++)\n    {\n        var device = this.devices[i];\n        var space = state[i];\n\n        if(!device || !space)\n        {\n            if(device)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\n                        \"configuration but not in snapshot (\" + device.name + \")\");\n            }\n            if(space)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\n            }\n            continue;\n        }\n\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\n        {\n            var value = space[(0x10 >> 2) + bar_nr];\n\n            if(value & 1)\n            {\n                var bar = device.pci_bars[bar_nr];\n                var from = bar.original_bar & ~1 & 0xFFFF;\n                var to = value & ~1 & 0xFFFF;\n                this.set_io_bars(bar, from, to);\n            }\n            else\n            {\n                // memory, cannot be changed\n            }\n        }\n\n        this.device_spaces[i].set(space);\n    }\n\n    this.pci_addr.set(state[256]);\n    this.pci_value.set(state[257]);\n    this.pci_response.set(state[258]);\n    this.pci_status.set(state[259]);\n};\n\nPCI.prototype.pci_query = function()\n{\n    var dbg_line = \"query\";\n\n    // Bit | .31                     .0\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\n\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\n        addr = this.pci_addr[0] & 0xFC,\n        //devfn = bdf & 0xFF,\n        //bus = bdf >> 8,\n        dev = bdf >> 3 & 0x1F,\n        //fn = bdf & 7,\n        enabled = this.pci_addr[3] >> 7;\n\n    dbg_line += \" enabled=\" + enabled;\n    dbg_line += \" bdf=\" + h(bdf, 4);\n    dbg_line += \" dev=\" + h(dev, 2);\n    dbg_line += \" addr=\" + h(addr, 2);\n\n    var device = this.device_spaces[bdf];\n\n    if(device !== undefined)\n    {\n        this.pci_status32[0] = 0x80000000 | 0;\n\n        if(addr < device.byteLength)\n        {\n            this.pci_response32[0] = device[addr >> 2];\n        }\n        else\n        {\n            // required by freebsd-9.1\n            this.pci_response32[0] = 0;\n        }\n\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\n\n        if(addr >= device.byteLength)\n        {\n            dbg_line += \" (undef)\";\n        }\n\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\n\n        dbg_log(dbg_line, LOG_PCI);\n    }\n    else\n    {\n        this.pci_response32[0] = -1;\n        this.pci_status32[0] = 0;\n    }\n};\n\nPCI.prototype.pci_write8 = function(address, written)\n{\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 2), LOG_PCI);\n\n    space[addr] = written;\n};\n\nPCI.prototype.pci_write16 = function(address, written)\n{\n    dbg_assert((address & 1) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 4), LOG_PCI);\n\n    space[addr >>> 1] = written;\n};\n\nPCI.prototype.pci_write32 = function(address, written)\n{\n    dbg_assert((address & 3) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = this.device_spaces[bdf];\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    if(addr >= 0x10 && addr < 0x28)\n    {\n        var bar_nr = addr - 0x10 >> 2;\n        var bar = device.pci_bars[bar_nr];\n\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\n\n        if(bar)\n        {\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\n\n            var space_addr = addr >> 2;\n            var type = space[space_addr] & 1;\n\n            if((written | 3 | bar.size - 1)  === -1) // size check\n            {\n                written = ~(bar.size - 1) | type;\n\n                if(type === 0)\n                {\n                    space[space_addr] = written;\n                }\n            }\n            else\n            {\n                if(type === 0)\n                {\n                    // memory\n                    var original_bar = bar.original_bar;\n\n                    if((written & ~0xF) !== (original_bar & ~0xF))\n                    {\n                        // seabios\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\n                    }\n\n                    // changing isn't supported yet, reset to default\n                    space[space_addr] = original_bar;\n                }\n            }\n\n            if(type === 1)\n            {\n                // io\n                dbg_assert(type === 1);\n\n                var from = space[space_addr] & ~1 & 0xFFFF;\n                var to = written & ~1 & 0xFFFF;\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\n                this.set_io_bars(bar, from, to);\n                space[space_addr] = written | 1;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\n    }\n    else if(addr === 0x30)\n    {\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n\n        if(device.pci_rom_size)\n        {\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\n            {\n                space[addr >> 2] = -device.pci_rom_size | 0;\n            }\n            else\n            {\n                space[addr >> 2] = device.pci_rom_address | 0;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n    }\n    else\n    {\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n        space[addr >>> 2] = written;\n    }\n};\n\nPCI.prototype.register_device = function(device)\n{\n    dbg_assert(device.pci_id !== undefined);\n    dbg_assert(device.pci_space !== undefined);\n    dbg_assert(device.pci_bars !== undefined);\n\n    var device_id = device.pci_id;\n\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\n\n    dbg_assert(!this.devices[device_id]);\n    dbg_assert(device.pci_space.length >= 64);\n    dbg_assert(device_id < this.devices.length);\n\n    // convert bytewise notation from lspci to double words\n    var space = new Int32Array(64);\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\n    this.device_spaces[device_id] = space;\n    this.devices[device_id] = device;\n\n    var bar_space = space.slice(4, 10);\n\n    for(var i = 0; i < device.pci_bars.length; i++)\n    {\n        var bar = device.pci_bars[i];\n\n        if(!bar)\n        {\n            continue;\n        }\n\n        var bar_base = bar_space[i];\n        var type = bar_base & 1;\n\n        bar.original_bar = bar_base;\n        bar.entries = [];\n\n        if(type === 0)\n        {\n            // memory, not needed currently\n        }\n        else\n        {\n            dbg_assert(type === 1);\n            var port = bar_base & ~1;\n\n            for(var j = 0; j < bar.size; j++)\n            {\n                bar.entries[j] = this.io.ports[port + j];\n            }\n        }\n    }\n\n    return space;\n};\n\nPCI.prototype.set_io_bars = function(bar, from, to)\n{\n    var count = bar.size;\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\n\n    var ports = this.io.ports;\n\n    for(var i = 0; i < count; i++)\n    {\n        var old_entry = ports[from + i];\n        ports[from + i] = this.io.create_empty_entry();\n\n        if(old_entry.read8 === this.io.empty_port_read8 &&\n           old_entry.read16 === this.io.empty_port_read16 &&\n           old_entry.read32 === this.io.empty_port_read32 &&\n           old_entry.write8 === this.io.empty_port_write &&\n           old_entry.write16 === this.io.empty_port_write &&\n           old_entry.write32 === this.io.empty_port_write)\n        {\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\n        }\n\n        var entry = bar.entries[i];\n        var empty_entry = ports[to + i];\n        dbg_assert(entry && empty_entry);\n\n        ports[to + i] = entry;\n\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n    }\n};\n\nPCI.prototype.raise_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\n    var device = (pci_id >> 3) - 1 & 0xFF;\n    var parent_pin = pin + device & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_raise_irq(irq);\n};\n\nPCI.prototype.lower_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\n    var device = pci_id >> 3 & 0xFF;\n    var parent_pin = pin + device - 2 & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_lower_irq(irq);\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {CPU} cpu\n */\nfunction FloppyController(cpu, fda_image, fdb_image)\n{\n    /** @const @type {IO|undefined} */\n    this.io = cpu.io;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {DMA} */\n    this.dma = cpu.devices.dma;\n\n    this.bytes_expecting = 0;\n    this.receiving_command = new Uint8Array(10);\n    this.receiving_index = 0;\n    this.next_command = null;\n\n    this.response_data = new Uint8Array(10);\n    this.response_index = 0;\n    this.response_length = 0;\n\n    this.floppy_size = 0;\n\n    /* const */\n    this.fda_image = fda_image;\n\n    /* const */\n    this.fdb_image = fdb_image;\n\n\n    this.status_reg0 = 0;\n    this.status_reg1 = 0;\n    this.status_reg2 = 0;\n    this.drive = 0;\n\n    this.last_cylinder = 0;\n    this.last_head = 0;\n    this.last_sector = 1;\n\n    // this should actually be write-only ... but people read it anyway\n    this.dor = 0;\n\n    if(!fda_image)\n    {\n        // Needed for CD emulation provided by seabios\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\n\n        this.sectors_per_track = 0;\n        this.number_of_heads = 0;\n        this.number_of_cylinders = 0;\n\n        this.floppy_size = 0;\n    }\n    else\n    {\n        this.floppy_size = fda_image.byteLength;\n\n        var floppy_types = {\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\n        };\n\n        var number_of_cylinders,\n            sectors_per_track,\n            number_of_heads,\n            floppy_type = floppy_types[this.floppy_size >> 10];\n\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\n        {\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\n\n            sectors_per_track = floppy_type.sectors;\n            number_of_heads = floppy_type.heads;\n            number_of_cylinders = floppy_type.tracks;\n        }\n        else\n        {\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\n        }\n\n        this.sectors_per_track = sectors_per_track;\n        this.number_of_heads = number_of_heads;\n        this.number_of_cylinders = number_of_cylinders;\n    }\n\n    this.io.register_read(0x3F0, this, this.port3F0_read);\n    this.io.register_read(0x3F2, this, this.port3F2_read);\n    this.io.register_read(0x3F4, this, this.port3F4_read);\n    this.io.register_read(0x3F5, this, this.port3F5_read);\n    this.io.register_read(0x3F7, this, this.port3F7_read);\n\n    this.io.register_write(0x3F2, this, this.port3F2_write);\n    this.io.register_write(0x3F5, this, this.port3F5_write);\n}\n\nFloppyController.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.bytes_expecting;\n    state[1] = this.receiving_command;\n    state[2] = this.receiving_index;\n    //state[3] = this.next_command;\n    state[4] = this.response_data;\n    state[5] = this.response_index;\n    state[6] = this.response_length;\n    state[7] = this.floppy_size;\n    state[8] = this.status_reg0;\n    state[9] = this.status_reg1;\n    state[10] = this.status_reg2;\n    state[11] = this.drive;\n    state[12] = this.last_cylinder;\n    state[13] = this.last_head;\n    state[14] = this.last_sector;\n    state[15] = this.dor;\n    state[16] = this.sectors_per_track;\n    state[17] = this.number_of_heads;\n    state[18] = this.number_of_cylinders;\n\n    return state;\n};\n\nFloppyController.prototype.set_state = function(state)\n{\n    this.bytes_expecting = state[0];\n    this.receiving_command = state[1];\n    this.receiving_index = state[2];\n    this.next_command = state[3];\n    this.response_data = state[4];\n    this.response_index = state[5];\n    this.response_length = state[6];\n    this.floppy_size = state[7];\n    this.status_reg0 = state[8];\n    this.status_reg1 = state[9];\n    this.status_reg2 = state[10];\n    this.drive = state[11];\n    this.last_cylinder = state[12];\n    this.last_head = state[13];\n    this.last_sector = state[14];\n    this.dor = state[15];\n    this.sectors_per_track = state[16];\n    this.number_of_heads = state[17];\n    this.number_of_cylinders = state[18];\n};\n\nFloppyController.prototype.port3F0_read = function()\n{\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\n\n    return 0;\n};\n\n\nFloppyController.prototype.port3F4_read = function()\n{\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\n\n    var return_byte = 0x80;\n\n    if(this.response_index < this.response_length)\n    {\n        return_byte |= 0x40 | 0x10;\n    }\n\n    if((this.dor & 8) === 0)\n    {\n        return_byte |= 0x20;\n    }\n\n    return return_byte;\n};\n\nFloppyController.prototype.port3F7_read = function()\n{\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\n    return 0x00;\n}\n\nFloppyController.prototype.port3F5_read = function()\n{\n    if(this.response_index < this.response_length)\n    {\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\n        this.cpu.device_lower_irq(6);\n        return this.response_data[this.response_index++];\n    }\n    else\n    {\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\n        return 0xFF;\n    }\n};\n\nFloppyController.prototype.port3F5_write = function(reg_byte)\n{\n    if(!this.fda_image) return;\n\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\n\n    if(this.bytes_expecting > 0)\n    {\n        this.receiving_command[this.receiving_index++] = reg_byte;\n\n        this.bytes_expecting--;\n\n        if(this.bytes_expecting === 0)\n        {\n            if(DEBUG)\n            {\n                var log = \"3F5 command received: \";\n                for(var i = 0; i < this.receiving_index; i++)\n                    log += h(this.receiving_command[i]) + \" \";\n                dbg_log(log, LOG_FLOPPY);\n            }\n\n            this.next_command.call(this, this.receiving_command);\n        }\n    }\n    else\n    {\n        switch(reg_byte)\n        {\n            // TODO\n            //case 2:\n                //this.next_command = read_complete_track;\n                //this.bytes_expecting = 8;\n                //break;\n            case 0x03:\n                this.next_command = this.fix_drive_data;\n                this.bytes_expecting = 2;\n                break;\n            case 0x04:\n                this.next_command = this.check_drive_status;\n                this.bytes_expecting = 1;\n                break;\n            case 0x05:\n            case 0xC5:\n                this.next_command = function(args) { this.do_sector(true, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0xE6:\n                this.next_command = function(args) { this.do_sector(false, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0x07:\n                this.next_command = this.calibrate;\n                this.bytes_expecting = 1;\n                break;\n            case 0x08:\n                this.check_interrupt_status();\n                break;\n            case 0x4A:\n                this.next_command = this.read_sector_id;\n                this.bytes_expecting = 1;\n                break;\n            case 0x0F:\n                this.bytes_expecting = 2;\n                this.next_command = this.seek;\n                break;\n            case 0x0E:\n                // dump regs\n                dbg_log(\"dump registers\", LOG_FLOPPY);\n                this.response_data[0] = 0x80;\n                this.response_index = 0;\n                this.response_length = 1;\n\n                this.bytes_expecting = 0;\n                break;\n\n            default:\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\n        }\n\n        this.receiving_index = 0;\n    }\n};\n\nFloppyController.prototype.port3F2_read = function()\n{\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\n    return this.dor;\n}\n\nFloppyController.prototype.port3F2_write = function(value)\n{\n    if((value & 4) === 4 && (this.dor & 4) === 0)\n    {\n        // reset\n        this.cpu.device_raise_irq(6);\n    }\n\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\n\n    this.dor = value;\n}\n\nFloppyController.prototype.check_drive_status = function(args)\n{\n    dbg_log(\"check drive status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 1;\n    this.response_data[0] = 1 << 5;\n}\n\nFloppyController.prototype.seek = function(args)\n{\n    dbg_log(\"seek\", LOG_FLOPPY);\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\n\n    this.last_cylinder = args[1];\n    this.last_head = args[0] >> 2 & 1;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.calibrate = function(args)\n{\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.check_interrupt_status = function()\n{\n    // do not trigger an interrupt here\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 2;\n\n    this.response_data[0] = 1 << 5;\n    this.response_data[1] = this.last_cylinder;\n}\n\nFloppyController.prototype.do_sector = function(is_write, args)\n{\n    var head = args[2],\n        cylinder = args[1],\n        sector = args[3],\n        sector_size = 128 << args[4],\n        read_count = args[5] - args[3] + 1,\n\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\n\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\n\n    if(!args[4])\n    {\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\n    }\n\n    if(!this.fda_image)\n    {\n        return;\n    }\n\n    if(is_write)\n    {\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n    else\n    {\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n};\n\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\n{\n    if(error)\n    {\n        // TODO: Set appropriate bits\n        return;\n    }\n\n    sector++;\n\n    if(sector > this.sectors_per_track)\n    {\n        sector = 1;\n        head++;\n\n        if(head >= this.number_of_heads)\n        {\n            head = 0;\n            cylinder++;\n        }\n    }\n\n    this.last_cylinder = cylinder;\n    this.last_head = head;\n    this.last_sector = sector;\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = head << 2 | 0x20;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = cylinder;\n    this.response_data[4] = head;\n    this.response_data[5] = sector;\n    this.response_data[6] = args[4];\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.fix_drive_data = function(args)\n{\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\n}\n\nFloppyController.prototype.read_sector_id = function(args)\n{\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = 0;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = 0;\n    this.response_data[4] = 0;\n    this.response_data[5] = 0;\n    this.response_data[6] = 0;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.raise_irq = function()\n{\n    if(this.dor & 8)\n    {\n        this.cpu.device_raise_irq(6);\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction DMA(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.channel_page = new Uint8Array(8);\n    this.channel_pagehi = new Uint8Array(8);\n    this.channel_addr = new Uint16Array(8);\n    this.channel_addr_init = new Uint16Array(8);\n    this.channel_count = new Uint16Array(8);\n    this.channel_count_init = new Uint16Array(8);\n    this.channel_mask = new Uint8Array(8);\n    this.channel_mode = new Uint8Array(8);\n    this.unmask_listeners = [];\n\n    this.lsb_msb_flipflop = 0;\n\n    var io = cpu.io;\n\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\n\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\n\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\n\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\n\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\n\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\n\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\n\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\n\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\n\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\n\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\n\n    io.register_write(0x0C, this, this.portC_write);\n    io.register_write(0xD8, this, this.portC_write);\n}\n\nDMA.prototype.get_state = function()\n{\n    return [\n        this.channel_page,\n        this.channel_pagehi,\n        this.channel_addr,\n        this.channel_addr_init,\n        this.channel_count,\n        this.channel_count_init,\n        this.channel_mask,\n        this.channel_mode,\n        this.lsb_msb_flipflop,\n    ];\n};\n\nDMA.prototype.set_state = function(state)\n{\n    this.channel_page = state[0];\n    this.channel_pagehi = state[1];\n    this.channel_addr = state[2];\n    this.channel_addr_init = state[3];\n    this.channel_count = state[4];\n    this.channel_count_init = state[5];\n    this.channel_mask = state[6];\n    this.channel_mode = state[7];\n    this.lsb_msb_flipflop = state[8];\n};\n\nDMA.prototype.port_count_write = function(channel, data_byte)\n{\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_count[channel] =\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\n\n    this.channel_count_init[channel] =\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_count_read = function(channel)\n{\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_count[channel]);\n};\n\nDMA.prototype.port_addr_write = function(channel, data_byte)\n{\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_addr[channel] =\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\n\n    this.channel_addr_init[channel] =\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_addr_read = function(channel)\n{\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_addr[channel]);\n};\n\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\n{\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_pagehi[channel] = data_byte;\n};\n\nDMA.prototype.port_pagehi_read = function(channel)\n{\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_pagehi[channel];\n};\n\nDMA.prototype.port_page_write = function(channel, data_byte)\n{\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_page[channel] = data_byte;\n};\n\nDMA.prototype.port_page_read = function(channel)\n{\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_page[channel];\n};\n\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    var value = !!(data_byte & 0x4);\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\n    this.update_mask(channel, value);\n};\n\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\n{\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\n    for(var i = 0; i < 4; i++)\n    {\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\n    }\n};\n\nDMA.prototype.port_multimask_read = function(channel_offset)\n{\n    var value = 0;\n    value |= this.channel_mask[channel_offset + 0];\n    value |= this.channel_mask[channel_offset + 1] << 1;\n    value |= this.channel_mask[channel_offset + 2] << 2;\n    value |= this.channel_mask[channel_offset + 3] << 3;\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\n    return value;\n};\n\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_mode[channel] = data_byte;\n};\n\nDMA.prototype.portC_write = function(data_byte)\n{\n    dbg_log(\"flipflop reset\", LOG_DMA);\n    this.lsb_msb_flipflop = 0;\n};\n\nDMA.prototype.on_unmask = function(fn, this_value)\n{\n    this.unmask_listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\nDMA.prototype.update_mask = function(channel, value)\n{\n    if(this.channel_mask[channel] !== value)\n    {\n        this.channel_mask[channel] ^= 1;\n\n        if(!value)\n        {\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\n            for(var i = 0; i < this.unmask_listeners.length; i++)\n            {\n                this.unmask_listeners[i].fn.call(\n                    this.unmask_listeners[i].this_value,\n                    channel\n                );\n            }\n        }\n    }\n};\n\n// read data, write to memory\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\n{\n    var read_count = this.count_get_8bit(channel),\n        addr = this.address_get_8bit(channel);\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\n\n    if(len < read_count)\n    {\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\n    }\n\n    if(start + read_count > buffer.byteLength)\n    {\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        var cpu = this.cpu;\n        this.channel_addr[channel] += read_count;\n\n        buffer.get(start, read_count, function(data)\n        {\n            cpu.write_blob(data, addr);\n            fn(false);\n        });\n    }\n};\n\n// write data, read memory\n// start and len in bytes\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\n{\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\n        bytes_per_count = channel >= 5 ? 2 : 1,\n        read_bytes = read_count * bytes_per_count,\n        addr = this.address_get_8bit(channel),\n        unfinished = false,\n        want_more = false,\n        autoinit = this.channel_mode[channel] & 0x10;\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\n\n    if(len < read_bytes)\n    {\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\n        read_count = Math.floor(len / bytes_per_count);\n        read_bytes = read_count * bytes_per_count;\n        unfinished = true;\n    }\n    else if(len > read_bytes)\n    {\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\n        want_more = true;\n    }\n\n    if(start + read_bytes > buffer.byteLength)\n    {\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        this.channel_addr[channel] += read_count;\n        this.channel_count[channel] -= read_count;\n        // when complete, counter should underflow to 0xFFFF\n\n        if(!unfinished && autoinit)\n        {\n            dbg_log(\"DMA autoinit\", LOG_DMA);\n            this.channel_addr[channel] = this.channel_addr_init[channel];\n            this.channel_count[channel] = this.channel_count_init[channel];\n        }\n\n        buffer.set(start,\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\n                () =>\n                {\n                    if(want_more && autoinit)\n                    {\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\n                    }\n                    else\n                    {\n                        fn(false);\n                    }\n                }\n            );\n    }\n};\n\nDMA.prototype.address_get_8bit = function(channel)\n{\n    var addr = this.channel_addr[channel];\n\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\n    if(channel >= 5)\n    {\n        addr = (addr << 1);\n    }\n\n    addr &= 0xFFFF;\n    addr |= this.channel_page[channel] << 16;\n    addr |= this.channel_pagehi[channel] << 24;\n\n    return addr;\n};\n\nDMA.prototype.count_get_8bit = function(channel)\n{\n    var count = this.channel_count[channel] + 1;\n\n    if(channel >= 5)\n    {\n        count *= 2;\n    }\n\n    return count;\n};\n\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\n{\n    if(!continuing)\n    {\n        this.lsb_msb_flipflop ^= 1;\n    }\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return old_dword & ~0xFF | new_byte;\n    }\n    else\n    {\n        // high byte\n        return old_dword & ~0xFF00 | new_byte << 8;\n    }\n};\n\nDMA.prototype.flipflop_read = function(dword)\n{\n    this.lsb_msb_flipflop ^= 1;\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return dword & 0xFF;\n    }\n    else\n    {\n        // high byte\n        return (dword >> 8) & 0xFF;\n    }\n};\n","\"use strict\";\n\n/**\n * @const\n * In kHz\n */\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\n\n/**\n * @constructor\n *\n * Programmable Interval Timer\n */\nfunction PIT(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.bus = bus;\n\n    this.counter_start_time = new Float64Array(3);\n    this.counter_start_value = new Uint16Array(3);\n\n    this.counter_next_low = new Uint8Array(4);\n    this.counter_enabled = new Uint8Array(4);\n    this.counter_mode = new Uint8Array(4);\n    this.counter_read_mode = new Uint8Array(4);\n\n    // 2 = latch low, 1 = latch high, 0 = no latch\n    this.counter_latch = new Uint8Array(4);\n    this.counter_latch_value = new Uint16Array(3);\n\n    this.counter_reload = new Uint16Array(3);\n\n    // TODO:\n    // - counter2 can be controlled by an input\n\n    cpu.io.register_read(0x61, this, function()\n    {\n        var now = v86.microtick();\n\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\n        var counter2_out = this.did_rollover(2, now);\n\n        return ref_toggle << 4 | counter2_out << 5;\n    });\n    cpu.io.register_write(0x61, this, function(data)\n    {\n        this.bus.send(\"pcspeaker-enable\", data & 1);\n    });\n\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\n\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\n\n    cpu.io.register_write(0x43, this, this.port43_write);\n}\n\nPIT.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.counter_next_low;\n    state[1] = this.counter_enabled;\n    state[2] = this.counter_mode;\n    state[3] = this.counter_read_mode;\n    state[4] = this.counter_latch;\n    state[5] = this.counter_latch_value;\n    state[6] = this.counter_reload;\n    state[7] = this.counter_start_time;\n    state[8] = this.counter_start_value;\n\n    return state;\n};\n\nPIT.prototype.set_state = function(state)\n{\n    this.counter_next_low = state[0];\n    this.counter_enabled = state[1];\n    this.counter_mode = state[2];\n    this.counter_read_mode = state[3];\n    this.counter_latch = state[4];\n    this.counter_latch_value = state[5];\n    this.counter_reload = state[6];\n    this.counter_start_time = state[7];\n    this.counter_start_value = state[8];\n};\n\nPIT.prototype.timer = function(now, no_irq)\n{\n    var time_to_next_interrupt = 100;\n\n    // counter 0 produces interrupts\n    if(!no_irq)\n    {\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\n        {\n            time_to_next_interrupt = 0;\n\n            this.counter_start_value[0] = this.get_counter_value(0, now);\n            this.counter_start_time[0] = now;\n\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\n\n            this.cpu.device_raise_irq(0);\n            var mode = this.counter_mode[0];\n\n            if(mode === 0)\n            {\n                this.counter_enabled[0] = 0;\n            }\n        }\n        else\n        {\n            this.cpu.device_lower_irq(0);\n        }\n    }\n    time_to_next_interrupt = 0;\n\n    return time_to_next_interrupt;\n};\n\nPIT.prototype.get_counter_value = function(i, now)\n{\n    if(!this.counter_enabled[i])\n    {\n        return 0;\n    }\n\n    var diff = now - this.counter_start_time[i];\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n\n    var value = this.counter_start_value[i] - diff_in_ticks;\n\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\n\n    var reload = this.counter_reload[i];\n\n    if(value >= reload)\n    {\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\n        value %= reload;\n    }\n    else if(value < 0)\n    {\n        value = value % reload + reload;\n    }\n\n    return value;\n};\n\nPIT.prototype.did_rollover = function(i, now)\n{\n    var diff = now - this.counter_start_time[i];\n\n    if(diff < 0)\n    {\n        // should only happen after restore_state\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\n        return true;\n    }\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\n\n    return this.counter_start_value[i] < diff_in_ticks;\n};\n\nPIT.prototype.counter_read = function(i)\n{\n    var latch = this.counter_latch[i];\n\n    if(latch)\n    {\n        this.counter_latch[i]--;\n\n        if(latch === 2)\n        {\n            return this.counter_latch_value[i] & 0xFF;\n        }\n        else\n        {\n            return this.counter_latch_value[i] >> 8;\n        }\n    }\n    else\n    {\n        var next_low = this.counter_next_low[i];\n\n        if(this.counter_mode[i] === 3)\n        {\n            this.counter_next_low[i] ^= 1;\n        }\n\n        var value = this.get_counter_value(i, v86.microtick());\n\n        if(next_low)\n        {\n            return value & 0xFF;\n        }\n        else\n        {\n            return value >> 8;\n        }\n    }\n};\n\nPIT.prototype.counter_write = function(i, value)\n{\n    if(this.counter_next_low[i])\n    {\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\n    }\n    else\n    {\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\n    }\n\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\n    {\n        if(!this.counter_reload[i])\n        {\n            this.counter_reload[i] = 0xFFFF;\n        }\n\n        // depends on the mode, should actually\n        // happen on the first tick\n        this.counter_start_value[i] = this.counter_reload[i];\n\n        this.counter_enabled[i] = true;\n\n        this.counter_start_time[i] = v86.microtick();\n\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\n    }\n\n    if(this.counter_read_mode[i] === 3)\n    {\n        this.counter_next_low[i] ^= 1;\n    }\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n\nPIT.prototype.port43_write = function(reg_byte)\n{\n    var mode = reg_byte >> 1 & 7,\n        binary_mode = reg_byte & 1,\n        i = reg_byte >> 6 & 3,\n        read_mode = reg_byte >> 4 & 3;\n\n    if(i === 1)\n    {\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\n    }\n\n    if(i === 3)\n    {\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\n        return;\n    }\n\n    if(read_mode === 0)\n    {\n        // latch\n        this.counter_latch[i] = 2;\n        var value = this.get_counter_value(i, v86.microtick());\n        dbg_log(\"latch: \" + value, LOG_PIT);\n        this.counter_latch_value[i] = value ? value - 1 : 0\n\n        return;\n    }\n\n    if(mode >= 6)\n    {\n        // 6 and 7 are aliased to 2 and 3\n        mode &= ~4;\n    }\n\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\n\n    if(read_mode === 1)\n    {\n        // msb\n        this.counter_next_low[i] = 0;\n    }\n    else if(read_mode === 2)\n    {\n        // lsb\n        this.counter_next_low[i] = 1;\n    }\n    else\n    {\n        // first lsb then msb\n        this.counter_next_low[i] = 1;\n    }\n\n    if(i === 0)\n    {\n        this.cpu.device_lower_irq(0);\n    }\n\n    if(mode === 0)\n    {\n    }\n    else if(mode === 3 || mode === 2)\n    {\n        // what is the difference\n    }\n    else\n    {\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\n    }\n\n    this.counter_mode[i] = mode;\n    this.counter_read_mode[i] = read_mode;\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n","\"use strict\";\n\n\nvar\n    /**\n     * Always 64k\n     * @const\n     */\n    VGA_BANK_SIZE = 64 * 1024,\n\n    /** @const */\n    MAX_XRES = 2560,\n\n    /** @const */\n    MAX_YRES = 1600,\n\n    /** @const */\n    MAX_BPP = 32;\n\n/** @const */\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\nvar VGA_LFB_ADDRESS = 0xE0000000;\n\n/** @const */\nvar VGA_PLANAR_REAL_BUFFER_START = 4 * VGA_BANK_SIZE;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {number} vga_memory_size\n */\nfunction VGAScreen(cpu, bus, vga_memory_size)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.vga_memory_size = vga_memory_size;\n\n    /** @type {number} */\n    this.cursor_address = 0;\n\n    /** @type {number} */\n    this.cursor_scanline_start = 0xE;\n\n    /** @type {number} */\n    this.cursor_scanline_end = 0xF;\n\n    /**\n     * Number of columns in text mode\n     * @type {number}\n     */\n    this.max_cols = 80;\n\n    /**\n     * Number of rows in text mode\n     * @type {number}\n     */\n    this.max_rows = 25;\n\n    /**\n     * Width in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_width = 0;\n\n    /**\n     * Height in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_height = 0;\n\n    /**\n     * video memory start address\n     * @type {number}\n     */\n    this.start_address = 0;\n\n    this.crtc = new Uint8Array(0x19);\n\n    /**\n     * @type {number}\n     */\n    this.previous_start_address = 0;\n\n    /** @type {boolean} */\n    this.graphical_mode_is_linear = true;\n\n    /** @type {boolean} */\n    this.graphical_mode = false;\n\n    /*\n     * VGA palette containing 256 colors for video mode 13 etc.\n     * Needs to be initialised by the BIOS\n     */\n    this.vga256_palette = new Int32Array(256);\n\n    // VGA latches\n    this.latch0 = 0;\n    this.latch1 = 0;\n    this.latch2 = 0;\n    this.latch3 = 0;\n\n\n    /** @type {number} */\n    this.svga_width = 0;\n\n    /** @type {number} */\n    this.svga_height = 0;\n\n    /** @type {number} */\n    this.text_mode_width = 80;\n\n    this.svga_enabled = false;\n\n    /** @type {number} */\n    this.svga_bpp = 32;\n\n    /** @type {number} */\n    this.svga_bank_offset = 0;\n\n    /**\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\n     * In bytes\n     * @type {number}\n     */\n    this.svga_offset = 0;\n\n    // Experimental, could probably need some changes\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\n    this.pci_space = [\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x12 << 3;\n    this.pci_bars = [\n        {\n            size: vga_memory_size,\n        },\n    ];\n\n    // TODO: Should be matched with vga bios size and mapping address\n    // Seabios config for this device:\n    // CONFIG_VGA_PCI=y\n    // CONFIG_OVERRIDE_PCI_ID=y\n    // CONFIG_VGA_VID=0x10de\n    // CONFIG_VGA_DID=0x0a20\n\n    this.pci_rom_size = 0x10000;\n    this.pci_rom_address = 0xFEB00000;\n\n    this.name = \"vga\";\n\n    this.stats = {\n        is_graphical: false,\n        res_x: 0,\n        res_y: 0,\n        bpp: 0,\n    };\n\n    this.index_crtc = 0;\n\n    this.offset_register = 0;\n\n    // index for setting colors through port 3C9h\n    this.dac_color_index_write = 0;\n    this.dac_color_index_read = 0;\n\n    this.attribute_controller_index = -1;\n\n    this.dac_map = new Uint8Array(0x10);\n\n    this.sequencer_index = -1;\n\n    // bitmap of planes 0-3\n    this.plane_write_bm = 0xF;\n    this.sequencer_memory_mode = 0;\n    this.graphics_index = -1;\n\n    this.plane_read = 0, // value 0-3, which plane to read\n    this.planar_mode = 0;\n    this.planar_rotate_reg = 0;\n    this.planar_bitmap = 0xFF;\n\n    this.max_scan_line = 0;\n\n    this.miscellaneous_output_register = 0xff;\n    this.port_3DA_value = 0xFF;\n\n\n    var io = cpu.io;\n\n    io.register_write(0x3C0, this, this.port3C0_write);\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\n\n    io.register_read(0x3C1, this, this.port3C1_read);\n    io.register_write(0x3C2, this, this.port3C2_write);\n\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\n\n    io.register_read(0x3C4, this, this.port3C4_read);\n    io.register_read(0x3C5, this, this.port3C5_read);\n\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\n\n    io.register_read(0x3CE, this, this.port3CE_read);\n    io.register_read(0x3CF, this, this.port3CF_read);\n\n    io.register_write(0x3C7, this, this.port3C7_write);\n    io.register_write(0x3C8, this, this.port3C8_write);\n    io.register_write(0x3C9, this, this.port3C9_write);\n    io.register_read(0x3C9, this, this.port3C9_read);\n\n    io.register_read(0x3CC, this, this.port3CC_read);\n\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\n    io.register_read(0x3D5, this, this.port3D5_read);\n\n    io.register_read(0x3D4, this, function() { dbg_log(\"3D4 read\", LOG_VGA); return 0; });\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\n\n    io.register_read(0x3DA, this, this.port3DA_read);\n\n\n    // Bochs VBE Extensions\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\n    this.dispi_index = -1;\n    this.dispi_enable_value = 0;\n\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\n\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\n\n    if(this.vga_memory_size === undefined || this.vga_memory_size < 4 * VGA_BANK_SIZE)\n    {\n        this.vga_memory_size = 4 * VGA_BANK_SIZE;\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\n    }\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\n    {\n        // round up to next 64k\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\n        this.vga_memory_size++;\n    }\n\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n\n    this.dest_buffer = undefined;\n\n    bus.register(\"screen-tell-buffer\", function(data)\n    {\n        this.dest_buffer = data[0];\n    }, this);\n\n    bus.register(\"screen-fill-buffer\", function()\n    {\n        this.screen_fill_buffer();\n    }, this);\n\n\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n\n    var me = this;\n    io.mmap_register(0xA0000, 0x20000,\n        function(addr) { return me.vga_memory_read(addr); },\n        function(addr, value) { me.vga_memory_write(addr, value); }\n    );\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\n        function(addr) { return me.svga_memory_read8(addr); },\n        function(addr, value) { me.svga_memory_write8(addr, value); },\n        function(addr) { return me.svga_memory_read32(addr); },\n        function(addr, value) { me.svga_memory_write32(addr, value); }\n    );\n\n    cpu.devices.pci.register_device(this);\n}\n\nVGAScreen.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.vga_memory_size;\n    state[1] = this.cursor_address;\n    state[2] = this.cursor_scanline_start;\n    state[3] = this.cursor_scanline_end;\n    state[4] = this.max_cols;\n    state[5] = this.max_rows;\n    state[6] = this.screen_width;\n    state[7] = this.screen_height;\n    state[8] = this.start_address;\n    state[9] = this.graphical_mode;\n    state[10] = this.vga256_palette;\n    state[11] = this.latch0;\n    state[12] = this.latch1;\n    state[13] = this.latch2;\n    state[14] = this.latch3;\n    state[15] = this.svga_width;\n    state[16] = this.svga_height;\n    state[17] = this.text_mode_width;\n    state[18] = this.svga_enabled;\n    state[19] = this.svga_bpp;\n    state[20] = this.svga_bank_offset;\n    state[21] = this.svga_offset;\n    state[22] = this.index_crtc;\n    state[23] = this.dac_color_index_write;\n    state[24] = this.dac_color_index_read;\n    state[25] = this.dac_map;\n    state[26] = this.sequencer_index;\n    state[27] = this.plane_write_bm;\n    state[28] = this.sequencer_memory_mode;\n    state[29] = this.graphics_index;\n    state[30] = this.plane_read;\n    state[31] = this.planar_mode;\n    state[32] = this.planar_rotate_reg;\n    state[33] = this.planar_bitmap;\n    state[34] = this.max_scan_line;\n    state[35] = this.miscellaneous_output_register;\n    state[36] = this.port_3DA_value;\n    state[37] = this.dispi_index;\n    state[38] = this.dispi_enable_value;\n    state[39] = this.svga_memory;\n    state[40] = this.graphical_mode_is_linear;\n    state[41] = this.attribute_controller_index;\n    state[42] = this.offset_register;\n\n    return state;\n};\n\nVGAScreen.prototype.set_state = function(state)\n{\n    this.vga_memory_size = state[0];\n    this.cursor_address = state[1];\n    this.cursor_scanline_start = state[2];\n    this.cursor_scanline_end = state[3];\n    this.max_cols = state[4];\n    this.max_rows = state[5];\n    this.screen_width = state[6];\n    this.screen_height = state[7];\n    this.start_address = state[8];\n    this.graphical_mode = state[9];\n    this.vga256_palette = state[10];\n    this.latch0 = state[11];\n    this.latch1 = state[12];\n    this.latch2 = state[13];\n    this.latch3 = state[14];\n    this.svga_width = state[15];\n    this.svga_height = state[16];\n    this.text_mode_width = state[17];\n    this.svga_enabled = state[18];\n    this.svga_bpp = state[19];\n    this.svga_bank_offset = state[20];\n    this.svga_offset = state[21];\n    this.index_crtc = state[22];\n    this.dac_color_index_write = state[23];\n    this.dac_color_index_read = state[24];\n    this.dac_map = state[25];\n    this.sequencer_index = state[26];\n    this.plane_write_bm = state[27];\n    this.sequencer_memory_mode = state[28];\n    this.graphics_index = state[29];\n    this.plane_read = state[30];\n    this.planar_mode = state[31];\n    this.planar_rotate_reg = state[32];\n    this.planar_bitmap = state[33];\n    this.max_scan_line = state[34];\n    this.miscellaneous_output_register = state[35];\n    this.port_3DA_value = state[36];\n    this.dispi_index = state[37];\n    this.dispi_enable_value = state[38];\n    this.svga_memory.set(state[39]);\n    this.graphical_mode_is_linear = state[40];\n    this.attribute_controller_index = state[41];\n    this.offset_register = state[42];\n\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\n\n    if(this.graphical_mode)\n    {\n        // TODO: Consider non-svga modes\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp);\n    }\n    else\n    {\n        this.set_size_text(this.max_cols, this.max_rows);\n        this.update_cursor_scanline();\n        this.update_cursor();\n    }\n\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.vga_memory_read = function(addr)\n{\n    addr -= 0xA0000;\n\n    if(!this.graphical_mode || this.graphical_mode_is_linear)\n    {\n        addr |= this.svga_bank_offset;\n\n        return this.svga_memory[addr];\n    }\n\n    // TODO: \"Color don't care\"\n    //dbg_assert((this.planar_mode & 0x08)  === 0, \"unimplemented\");\n\n    // planar mode\n    addr &= 0xFFFF;\n\n    this.latch0 = this.plane0[addr];\n    this.latch1 = this.plane1[addr];\n    this.latch2 = this.plane2[addr];\n    this.latch3 = this.plane3[addr];\n\n    return this.vga_memory[this.plane_read << 16 | addr];\n};\n\nVGAScreen.prototype.vga_memory_write = function(addr, value)\n{\n    addr -= 0xA0000;\n\n    if(this.graphical_mode)\n    {\n        if(this.graphical_mode_is_linear)\n        {\n            this.vga_memory_write_graphical_linear(addr, value);\n        }\n        else\n        {\n            this.vga_memory_write_graphical_planar(addr, value);\n        }\n    }\n    else\n    {\n        this.vga_memory_write_text_mode(addr, value);\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\n{\n    addr |= this.svga_bank_offset;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_planar = function(addr, value)\n{\n    if(addr > 0xFFFF)\n    {\n        return;\n    }\n\n    // TODO:\n    // Replace 4 byte operations with single double word operations\n\n    var write,\n        plane0_byte,\n        plane1_byte,\n        plane2_byte,\n        plane3_byte;\n\n    var write_mode = this.planar_mode & 3;\n\n    // not implemented:\n    // - Planar mode 3\n    // - Rotation\n    // - Shift mode\n    // - Host Odd/Even\n    dbg_assert((this.planar_rotate_reg & 7) === 0, \"unimplemented\");\n    dbg_assert(write_mode !== 3, \"unimplemented\");\n    dbg_assert((this.planar_mode & 0x70)  === 0, \"unimplemented\");\n\n    if(write_mode === 0)\n    {\n        plane0_byte = plane1_byte = plane2_byte = plane3_byte = value;\n    }\n    else if(write_mode === 2)\n    {\n        if(this.plane_write_bm & 1)\n        {\n            write = value & 1 ? 0xFF : 0;\n            plane0_byte = this.latch0 & ~this.planar_bitmap | write & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 2)\n        {\n            write = value & 2 ? 0xFF : 0;\n            plane1_byte = this.latch1 & ~this.planar_bitmap | write & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 4)\n        {\n            write = value & 4 ? 0xFF : 0;\n            plane2_byte = this.latch2 & ~this.planar_bitmap | write & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 8)\n        {\n            write = value & 8 ? 0xFF : 0;\n            plane3_byte = this.latch3 & ~this.planar_bitmap | write & this.planar_bitmap;\n        }\n    }\n\n    if(write_mode === 0 || write_mode === 2)\n    {\n        switch(this.planar_rotate_reg & 0x18)\n        {\n            case 0x08:\n                plane0_byte &= this.latch0;\n                plane1_byte &= this.latch1;\n                plane2_byte &= this.latch2;\n                plane3_byte &= this.latch3;\n                break;\n            case 0x10:\n                plane0_byte |= this.latch0;\n                plane1_byte |= this.latch1;\n                plane2_byte |= this.latch2;\n                plane3_byte |= this.latch3;\n                break;\n            case 0x18:\n                plane0_byte ^= this.latch0;\n                plane1_byte ^= this.latch1;\n                plane2_byte ^= this.latch2;\n                plane3_byte ^= this.latch3;\n                break;\n        }\n\n        if(this.plane_write_bm & 1)\n        {\n            plane0_byte = this.latch0 & ~this.planar_bitmap | plane0_byte & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 2)\n        {\n            plane1_byte = this.latch1 & ~this.planar_bitmap | plane1_byte & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 4)\n        {\n            plane2_byte = this.latch2 & ~this.planar_bitmap | plane2_byte & this.planar_bitmap;\n        }\n        if(this.plane_write_bm & 8)\n        {\n            plane3_byte = this.latch3 & ~this.planar_bitmap | plane3_byte & this.planar_bitmap;\n        }\n    }\n    else if(write_mode === 1)\n    {\n        plane0_byte = this.latch0;\n        plane1_byte = this.latch1;\n        plane2_byte = this.latch2;\n        plane3_byte = this.latch3;\n    }\n\n    if(this.plane_write_bm & 1)\n    {\n        this.plane0[addr] = plane0_byte;\n    }\n    else\n    {\n        plane0_byte = this.plane0[addr];\n    }\n    if(this.plane_write_bm & 2)\n    {\n        this.plane1[addr] = plane1_byte;\n    }\n    else\n    {\n        plane1_byte = this.plane1[addr];\n    }\n    if(this.plane_write_bm & 4)\n    {\n        this.plane2[addr] = plane2_byte;\n    }\n    else\n    {\n        plane2_byte = this.plane2[addr];\n    }\n    if(this.plane_write_bm & 8)\n    {\n        this.plane3[addr] = plane3_byte;\n    }\n    else\n    {\n        plane3_byte = this.plane3[addr];\n    }\n\n    if(addr >= (this.screen_width * this.screen_height << 3))\n    {\n        return;\n    }\n\n    // Shift these, so that the bits for the color are in\n    // the correct position in the for loop\n    plane1_byte <<= 1;\n    plane2_byte <<= 2;\n    plane3_byte <<= 3;\n\n    // 8 pixels per byte, we start at high (addr << 3 | 7)\n    var offset = (addr << 3 | 7);\n\n    var actual_buffer_addr = offset + VGA_PLANAR_REAL_BUFFER_START;\n    this.diff_addr_min = actual_buffer_addr - 7 < this.diff_addr_min ? actual_buffer_addr - 7 : this.diff_addr_min;\n    this.diff_addr_max = actual_buffer_addr > this.diff_addr_max ? actual_buffer_addr : this.diff_addr_max;\n\n    for(var i = 0; i < 8; i++)\n    {\n        var color_index =\n                plane0_byte >> i & 1 |\n                plane1_byte >> i & 2 |\n                plane2_byte >> i & 4 |\n                plane3_byte >> i & 8,\n            color = this.dac_map[color_index];\n\n        this.svga_memory[offset + VGA_PLANAR_REAL_BUFFER_START] = color;\n\n        offset--;\n    }\n};\n\nVGAScreen.prototype.text_mode_redraw = function()\n{\n    var addr = 0x18000 | this.start_address << 1,\n        chr,\n        color;\n\n    for(var row = 0; row < this.max_rows; row++)\n    {\n        for(var col = 0; col < this.max_cols; col++)\n        {\n            chr = this.vga_memory[addr];\n            color = this.vga_memory[addr | 1];\n\n            this.bus.send(\"screen-put-char\", [row, col, chr,\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n            addr += 2;\n        }\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\n{\n    if(addr < 0x18000)\n    {\n        return;\n    }\n\n    var memory_start = (addr - 0x18000 >> 1) - this.start_address,\n        row = memory_start / this.max_cols | 0,\n        col = memory_start % this.max_cols,\n        chr,\n        color;\n\n    // XXX: Should handle 16 bit write if possible\n    if(addr & 1)\n    {\n        color = value;\n        chr = this.vga_memory[addr & ~1];\n    }\n    else\n    {\n        chr = value;\n        color = this.vga_memory[addr | 1];\n    }\n\n    this.bus.send(\"screen-put-char\", [row, col, chr,\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n    this.vga_memory[addr] = value;\n};\n\nVGAScreen.prototype.update_cursor = function()\n{\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\n        col = (this.cursor_address - this.start_address) % this.max_cols;\n\n    row = Math.min(this.max_rows - 1, row);\n\n    this.bus.send(\"screen-update-cursor\", [row, col]);\n};\n\nVGAScreen.prototype.svga_memory_read8 = function(addr)\n{\n    return this.svga_memory[addr & 0xFFFFFFF];\n};\n\nVGAScreen.prototype.svga_memory_read32 = function(addr)\n{\n    addr &= 0xFFFFFFF;\n\n    if(addr & 3)\n    {\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\n    }\n    else\n    {\n        return this.svga_memory32[addr >> 2];\n    }\n};\n\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n    this.svga_memory[addr] = value;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n};\n\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n    this.svga_memory[addr + 1] = value >> 8;\n    this.svga_memory[addr + 2] = value >> 16;\n    this.svga_memory[addr + 3] = value >> 24;\n};\n\nVGAScreen.prototype.complete_redraw = function()\n{\n    dbg_log(\"complete redraw\", LOG_VGA);\n\n    if(this.graphical_mode)\n    {\n        this.diff_addr_min = 0;\n        this.diff_addr_max = this.vga_memory_size;\n    }\n    else\n    {\n        this.text_mode_redraw();\n    }\n};\n\nVGAScreen.prototype.destroy = function()\n{\n\n};\n\n/**\n * @param {number} cols_count\n * @param {number} rows_count\n */\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\n{\n    this.max_cols = cols_count;\n    this.max_rows = rows_count;\n\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\n};\n\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp)\n{\n    this.screen_width = width;\n    this.screen_height = height;\n\n    this.stats.bpp = bpp;\n    this.stats.is_graphical = true;\n    this.stats.res_x = width;\n    this.stats.res_y = height;\n\n    this.bus.send(\"screen-set-size-graphical\", [width, height, bpp]);\n};\n\nVGAScreen.prototype.update_cursor_scanline = function()\n{\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\n};\n\nVGAScreen.prototype.set_video_mode = function(mode)\n{\n    var is_graphical = false;\n\n    var width = 0;\n    var height = 0;\n\n    switch(mode)\n    {\n        case 0x66:\n            this.set_size_text(110, 46);\n            break;\n        case 0x03:\n            this.set_size_text(this.text_mode_width, 25);\n            break;\n        case 0x10:\n            width = 640;\n            height = 350;\n            is_graphical = true;\n            this.graphical_mode_is_linear = false;\n            break;\n        case 0x12:\n            width = 640;\n            height = 480;\n            is_graphical = true;\n            this.graphical_mode_is_linear = false;\n            break;\n        case 0x13:\n            width = 320;\n            height = 200;\n            is_graphical = true;\n            this.graphical_mode_is_linear = true;\n            break;\n        default:\n    }\n\n    this.bus.send(\"screen-set-mode\", is_graphical);\n    this.stats.is_graphical = is_graphical;\n\n    if(is_graphical)\n    {\n        this.svga_width = width;\n        this.svga_height = height;\n        this.set_size_graphical(width, height, 8);\n    }\n\n    this.graphical_mode = is_graphical;\n\n    dbg_log(\"Current video mode: \" + h(mode), LOG_VGA);\n};\n\nVGAScreen.prototype.port3C0_write = function(value)\n{\n    if(this.attribute_controller_index === -1)\n    {\n        this.attribute_controller_index = value;\n    }\n    else\n    {\n        if(this.attribute_controller_index < 0x10)\n        {\n            this.dac_map[this.attribute_controller_index] = value;\n        }\n        else\n        switch(this.attribute_controller_index)\n        {\n            default:\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\n        }\n\n        this.attribute_controller_index = -1;\n    }\n};\n\nVGAScreen.prototype.port3C0_read = function()\n{\n    dbg_log(\"3C0 read\", LOG_VGA);\n    var result = this.attribute_controller_index;\n    this.attribute_controller_index = -1;\n    return result;\n};\n\nVGAScreen.prototype.port3C0_read16 = function()\n{\n    dbg_log(\"3C0 read16\", LOG_VGA);\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\n};\n\nVGAScreen.prototype.port3C1_read = function()\n{\n    this.attribute_controller_index = -1;\n\n    dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\n    return -1;\n};\n\nVGAScreen.prototype.port3C2_write = function(value)\n{\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\n    this.miscellaneous_output_register = value;\n\n    // cheat way to figure out which video mode is indended to be used\n    this.switch_video_mode(value);\n};\n\nVGAScreen.prototype.port3C4_write = function(value)\n{\n    this.sequencer_index = value;\n};\n\nVGAScreen.prototype.port3C4_read = function()\n{\n    return this.sequencer_index;\n};\n\nVGAScreen.prototype.port3C5_write = function(value)\n{\n    switch(this.sequencer_index)\n    {\n        case 0x02:\n            //dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\n            this.plane_write_bm = value;\n            break;\n        case 0x04:\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\n            this.sequencer_memory_mode = value;\n            break;\n        default:\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3C5_read = function()\n{\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\n\n    switch(this.sequencer_index)\n    {\n        case 0x02:\n            return this.plane_write_bm;\n        case 0x04:\n            return this.sequencer_memory_mode;\n        case 0x06:\n            return 0x12;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3C7_write = function(index)\n{\n    // index for reading the DAC\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\n    this.dac_color_index_read = index * 3;\n};\n\nVGAScreen.prototype.port3C8_write = function(index)\n{\n    this.dac_color_index_write = index * 3;\n};\n\nVGAScreen.prototype.port3C9_write = function(color_byte)\n{\n    var index = this.dac_color_index_write / 3 | 0,\n        offset = this.dac_color_index_write % 3,\n        color = this.vga256_palette[index];\n\n    color_byte = color_byte * 255 / 63 & 0xFF;\n\n    if(offset === 0)\n    {\n        color = color & ~0xFF0000 | color_byte << 16;\n    }\n    else if(offset === 1)\n    {\n        color = color & ~0xFF00 | color_byte << 8;\n    }\n    else\n    {\n        color = color & ~0xFF | color_byte;\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\n    }\n\n    this.vga256_palette[index] = color;\n    this.dac_color_index_write++;\n\n    // Needs to be throttled:\n    //this.complete_redraw();\n};\n\nVGAScreen.prototype.port3C9_read = function()\n{\n    dbg_log(\"3C9 read\", LOG_VGA);\n\n    var index = this.dac_color_index_read / 3 | 0;\n    var offset = this.dac_color_index_read % 3;\n    var color = this.vga256_palette[index];\n\n    this.dac_color_index_read++;\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\n};\n\nVGAScreen.prototype.port3CC_read = function()\n{\n    dbg_log(\"3CC read\", LOG_VGA);\n    return this.miscellaneous_output_register;\n};\n\nVGAScreen.prototype.port3CE_write = function(value)\n{\n    this.graphics_index = value;\n};\n\nVGAScreen.prototype.port3CE_read = function()\n{\n    return this.graphics_index;\n};\n\nVGAScreen.prototype.port3CF_write = function(value)\n{\n    switch(this.graphics_index)\n    {\n        // TODO: Set/Reset bit\n        //case 0:\n        //case 1:\n            //break;\n        case 3:\n            this.planar_rotate_reg = value;\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\n            break;\n        case 4:\n            this.plane_read = value;\n            //dbg_assert(value < 4, \"unimplemented\");\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\n            break;\n        case 5:\n            this.planar_mode = value;\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\n            break;\n        case 8:\n            this.planar_bitmap = value;\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\n            break;\n        default:\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3CF_read = function()\n{\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\n\n    switch(this.graphics_index)\n    {\n        case 3:\n            return this.planar_rotate_reg;\n        case 4:\n            return this.plane_read;\n        case 5:\n            return this.planar_mode;\n        case 8:\n            return this.planar_bitmap;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3D4_write = function(register)\n{\n    this.index_crtc = register;\n};\n\nVGAScreen.prototype.port3D5_write = function(value)\n{\n    switch(this.index_crtc)\n    {\n        case 0x2:\n            this.text_mode_width = value;\n            break;\n        case 0x9:\n            this.max_scan_line = value;\n            if((value & 0x1F) === 7)\n            {\n                this.set_size_text(this.text_mode_width, 50);\n            }\n            else\n            {\n                this.set_size_text(this.text_mode_width, 25);\n            }\n            break;\n        case 0xA:\n            this.cursor_scanline_start = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xB:\n            this.cursor_scanline_end = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xC:\n            this.previous_start_address = this.start_address;\n            this.start_address = this.start_address & 0xff | value << 8;\n            this.complete_redraw();\n            break;\n        case 0xD:\n            this.start_address = this.start_address & 0xff00 | value;\n            var delta = this.start_address - this.previous_start_address;\n            if(delta)\n            {\n                //if(!this.graphical_mode && delta % this.text_mode_width === 0)\n                //{\n                //    this.bus.send(\"screen-text-scroll\", delta / this.text_mode_width);\n                //}\n                //else\n                {\n                    this.complete_redraw();\n                }\n            }\n            dbg_log(\"start addr: \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xE:\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\n            this.update_cursor();\n            break;\n        case 0xF:\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\n            this.update_cursor();\n            break;\n        case 0x13:\n            this.offset_register = value;\n            break;\n        default:\n            if(this.index_crtc < this.crtc.length)\n            {\n                this.crtc[this.index_crtc] = value;\n            }\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\n    }\n\n};\n\nVGAScreen.prototype.port3D5_read = function()\n{\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\n\n    switch(this.index_crtc)\n    {\n        case 0x9:\n            return this.max_scan_line;\n        case 0xA:\n            return this.cursor_scanline_start;\n        case 0xB:\n            return this.cursor_scanline_end;\n        case 0xC:\n            return this.start_address & 0xFF;\n        case 0xD:\n            return this.start_address >> 8;\n        case 0xE:\n            return this.cursor_address >> 8;\n        case 0xF:\n            return this.cursor_address & 0xFF;\n        case 0x1:\n            return 80; // cols\n        case 0x12:\n            return 50; // rows\n        case 0x13:\n            return this.offset_register;\n    }\n\n    if(this.index_crtc < this.crtc.length)\n    {\n        return this.crtc[this.index_crtc];\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nVGAScreen.prototype.port3DA_read = function()\n{\n    dbg_log(\"3DA read\", LOG_VGA);\n\n    // status register\n    this.port_3DA_value ^= 8;\n    this.attribute_controller_index = -1;\n    return this.port_3DA_value;\n};\n\nVGAScreen.prototype.switch_video_mode = function(mar)\n{\n    // Cheap way to figure this out, using the Miscellaneous Output Register\n    // See: http://wiki.osdev.org/VGA_Hardware#List_of_register_settings\n\n    if(mar === 0x66)\n    {\n        this.set_video_mode(0x66);\n    }\n    else if(mar === 0x67)\n    {\n        this.set_video_mode(0x3);\n    }\n    else if(mar === 0xE3)\n    {\n        // also mode X\n        this.set_video_mode(0x12);\n    }\n    else if(mar === 0x63)\n    {\n        this.set_video_mode(0x13);\n    }\n    else if(mar === 0xA3)\n    {\n        this.set_video_mode(0x10);\n    }\n    else\n    {\n        dbg_log(\"Unkown MAR value: \" + h(mar, 2) + \", going back to text mode\", LOG_VGA);\n        this.set_video_mode(0x3);\n    }\n};\n\nVGAScreen.prototype.svga_bytes_per_line = function()\n{\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\n\n    return this.svga_width * bits / 8;\n};\n\nVGAScreen.prototype.port1CE_write = function(value)\n{\n    this.dispi_index = value;\n};\n\nVGAScreen.prototype.port1CF_write = function(value)\n{\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\n\n    switch(this.dispi_index)\n    {\n        case 1:\n            this.svga_width = value;\n            if(this.svga_width > MAX_XRES)\n            {\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\n                this.svga_width = MAX_XRES;\n            }\n            break;\n        case 2:\n            this.svga_height = value;\n            if(this.svga_height > MAX_YRES)\n            {\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\n                this.svga_height = MAX_YRES;\n            }\n            break;\n        case 3:\n            this.svga_bpp = value;\n            break;\n        case 4:\n            // enable, options\n            this.svga_enabled = (value & 1) === 1;\n            this.dispi_enable_value = value;\n            break;\n        case 5:\n            this.svga_bank_offset = value << 16;\n            break;\n        case 9:\n            // y offset\n            this.svga_offset = value * this.svga_bytes_per_line();\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\n            this.complete_redraw();\n            break;\n        default:\n    }\n\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\n    {\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\n        this.svga_enabled = false;\n    }\n\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\n               this.svga_bpp === 24 || this.svga_bpp === 32,\n               \"unexpected svga bpp: \" + this.svga_bpp);\n\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\n\n    if(this.svga_enabled && this.dispi_index === 4)\n    {\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp);\n        this.bus.send(\"screen-set-mode\", true);\n        this.graphical_mode = true;\n        this.graphical_mode_is_linear = true;\n    }\n\n    if(!this.svga_enabled)\n    {\n        this.svga_bank_offset = 0;\n    }\n};\n\nVGAScreen.prototype.port1CF_read = function()\n{\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\n    return this.svga_register_read(this.dispi_index);\n};\n\nVGAScreen.prototype.svga_register_read = function(n)\n{\n    switch(n)\n    {\n        case 0:\n            // id\n            return 0xB0C0;\n        case 1:\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\n        case 2:\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\n        case 3:\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\n        case 4:\n            return this.dispi_enable_value;\n        case 5:\n            return this.svga_bank_offset >>> 16;\n        case 6:\n            // virtual width\n            if(this.screen_width)\n            {\n                return this.screen_width;\n            }\n            else\n            {\n                return 1; // seabios/windows98 divide exception\n            }\n            break;\n\n        case 8:\n            // x offset\n            return 0;\n        case 0x0A:\n            // memory size in 64 kilobyte banks\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\n    }\n\n    return 0xFF;\n};\n\nVGAScreen.prototype.screen_fill_buffer = function()\n{\n    if(!this.graphical_mode)\n    {\n        // text mode\n        return;\n    }\n\n    if(!this.dest_buffer)\n    {\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\n        return;\n    }\n\n    if(this.diff_addr_max < this.diff_addr_min)\n    {\n        return;\n    }\n\n    var bpp = 0;\n    var offset = 0;\n\n    if(this.svga_enabled)\n    {\n        bpp = this.svga_bpp;\n    }\n    else\n    {\n        if(this.graphical_mode_is_linear)\n        {\n            bpp = 8;\n        }\n        else\n        {\n            bpp = 8;\n            offset = VGA_PLANAR_REAL_BUFFER_START;\n        }\n    }\n\n\n    var buffer = this.dest_buffer;\n\n    var start = this.diff_addr_min;\n    var end = this.diff_addr_max;\n\n    switch(bpp)\n    {\n        case 32:\n            var start_pixel = start >> 2;\n            var end_pixel = (end >> 2) + 1;\n\n            for(var i = start_pixel; i < end_pixel; i++)\n            {\n                var dword = this.svga_memory32[i];\n\n                buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\n            }\n            break;\n\n        case 24:\n            var start_pixel = start / 3 | 0;\n            var end_pixel = (end / 3 | 0) + 1;\n            var addr = start_pixel * 3;\n\n            for(var i = start_pixel; addr < end; i++)\n            {\n                var red = this.svga_memory[addr++];\n                var green = this.svga_memory[addr++];\n                var blue = this.svga_memory[addr++];\n\n                buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n            }\n            break;\n\n        case 16:\n            var start_pixel = start >> 1;\n            var end_pixel = (end >> 1) + 1;\n\n            for(var i = start_pixel; i < end_pixel; i++)\n            {\n                var word = this.svga_memory16[i];\n\n                var blue = (word >> 11) * 0xFF / 0x1F | 0;\n                var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\n                var red = (word & 0x1F) * 0xFF / 0x1F | 0;\n\n                buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n            }\n            break;\n\n        case 8:\n            var start_pixel = start - offset;\n            var end_pixel = end - offset + 1;\n\n            for(var i = start; i < end; i++)\n            {\n                var color = this.vga256_palette[this.svga_memory[i]];\n                buffer[i - offset] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n            }\n            break;\n\n        default:\n            dbg_assert(false, \"Unsupported BPP: \" + bpp);\n    }\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n\n    this.bus.send(\"screen-fill-buffer-end\", [start_pixel, end_pixel]);\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction PS2(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @type {boolean} */\n    this.enable_mouse_stream = false;\n\n    /** @type {boolean} */\n    this.use_mouse = false;\n\n    /** @type {boolean} */\n    this.have_mouse = true;\n\n    /** @type {number} */\n    this.mouse_delta_x = 0;\n    /** @type {number} */\n    this.mouse_delta_y = 0;\n    /** @type {number} */\n    this.mouse_clicks = 0;\n\n    /** @type {boolean} */\n    this.have_keyboard = true;\n\n    /** @type {boolean} */\n    this.enable_keyboard_stream = false;\n\n    /** @type {boolean} */\n    this.next_is_mouse_command = false;\n\n    /** @type {boolean} */\n    this.next_read_sample = false;\n\n    /** @type {boolean} */\n    this.next_read_led = false;\n\n    /** @type {boolean} */\n    this.next_handle_scan_code_set = false;\n\n    /** @type {boolean} */\n    this.next_read_rate = false;\n\n    /** @type {boolean} */\n    this.next_read_resolution = false;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.kbd_buffer = new ByteQueue(1024);\n\n    this.last_port60_byte = 0;\n\n    /** @type {number} */\n    this.sample_rate = 100;\n\n    /** @type {number} */\n    this.resolution = 4;\n\n    /** @type {boolean} */\n    this.scaling2 = false;\n\n    /** @type {number} */\n    this.last_mouse_packet = -1;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.mouse_buffer = new ByteQueue(1024);\n\n\n    this.bus.register(\"keyboard-code\", function(code)\n    {\n        this.kbd_send_code(code);\n    }, this);\n\n    this.bus.register(\"mouse-click\", function(data)\n    {\n        this.mouse_send_click(data[0], data[1], data[2]);\n    }, this);\n\n    this.bus.register(\"mouse-delta\", function(data)\n    {\n        this.mouse_send_delta(data[0], data[1]);\n    }, this);\n\n    this.bus.register(\"mouse-wheel\", function(data)\n    {\n        // TODO: Mouse Wheel\n        // http://www.computer-engineering.org/ps2mouse/\n    }, this);\n\n    this.command_register = 1 | 4;\n    this.read_output_register = false;\n    this.read_command_register = false;\n\n    cpu.io.register_read(0x60, this, this.port60_read);\n    cpu.io.register_read(0x64, this, this.port64_read);\n\n    cpu.io.register_write(0x60, this, this.port60_write);\n    cpu.io.register_write(0x64, this, this.port64_write);\n}\n\nPS2.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.enable_mouse_stream;\n    state[1] = this.use_mouse;\n    state[2] = this.have_mouse;\n    state[3] = this.mouse_delta_x;\n    state[4] = this.mouse_delta_y;\n    state[5] = this.mouse_clicks;\n    state[6] = this.have_keyboard;\n    state[7] = this.enable_keyboard_stream;\n    state[8] = this.next_is_mouse_command;\n    state[9] = this.next_read_sample;\n    state[10] = this.next_read_led;\n    state[11] = this.next_handle_scan_code_set;\n    state[12] = this.next_read_rate;\n    state[13] = this.next_read_resolution;\n    //state[14] = this.kbd_buffer;\n    state[15] = this.last_port60_byte;\n    state[16] = this.sample_rate;\n    state[17] = this.resolution;\n    state[18] = this.scaling2;\n    //state[19] = this.mouse_buffer;\n    state[20] = this.command_register;\n    state[21] = this.read_output_register;\n    state[22] = this.read_command_register;\n\n    return state;\n};\n\nPS2.prototype.set_state = function(state)\n{\n    this.enable_mouse_stream = state[0];\n    this.use_mouse = state[1];\n    this.have_mouse = state[2];\n    this.mouse_delta_x = state[3];\n    this.mouse_delta_y = state[4];\n    this.mouse_clicks = state[5];\n    this.have_keyboard = state[6];\n    this.enable_keyboard_stream = state[7];\n    this.next_is_mouse_command = state[8];\n    this.next_read_sample = state[9];\n    this.next_read_led = state[10];\n    this.next_handle_scan_code_set = state[11];\n    this.next_read_rate = state[12];\n    this.next_read_resolution = state[13];\n    //this.kbd_buffer = state[14];\n    this.last_port60_byte = state[15];\n    this.sample_rate = state[16];\n    this.resolution = state[17];\n    this.scaling2 = state[18];\n    //this.mouse_buffer = state[19];\n    this.command_register = state[20];\n    this.read_output_register = state[21];\n    this.read_command_register = state[22];\n\n    this.bus.send(\"mouse-enable\", this.use_mouse);\n};\n\nPS2.prototype.mouse_irq = function()\n{\n    if(this.command_register & 2)\n    {\n        this.cpu.device_raise_irq(12);\n    }\n};\n\nPS2.prototype.kbd_irq = function()\n{\n    if(this.command_register & 1)\n    {\n        this.cpu.device_raise_irq(1);\n    }\n};\n\nPS2.prototype.kbd_send_code = function(code)\n{\n    if(this.enable_keyboard_stream)\n    {\n        this.kbd_buffer.push(code);\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    // note: delta_x or delta_y can be floating point numbers\n\n    var factor = this.resolution * this.sample_rate / 80;\n\n    this.mouse_delta_x += delta_x * factor;\n    this.mouse_delta_y += delta_y * factor;\n\n    if(this.enable_mouse_stream)\n    {\n        var change_x = this.mouse_delta_x | 0,\n            change_y = this.mouse_delta_y | 0;\n\n        if(change_x || change_y)\n        {\n            var now = Date.now();\n\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\n            //{\n            //    // TODO: set timeout\n            //    return;\n            //}\n\n            this.mouse_delta_x -= change_x;\n            this.mouse_delta_y -= change_y;\n\n            this.send_mouse_packet(change_x, change_y);\n        }\n    }\n};\n\nPS2.prototype.mouse_send_click = function(left, middle, right)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    this.mouse_clicks = left | right << 1 | middle << 2;\n\n    if(this.enable_mouse_stream)\n    {\n        this.send_mouse_packet(0, 0);\n    }\n};\n\nPS2.prototype.send_mouse_packet = function(dx, dy)\n{\n    var info_byte =\n            (dy < 0) << 5 |\n            (dx < 0) << 4 |\n            1 << 3 |\n            this.mouse_clicks,\n        delta_x = dx,\n        delta_y = dy;\n\n    this.last_mouse_packet = Date.now();\n\n    //if(this.scaling2)\n    //{\n    //    // only in automatic packets, not 0xEB requests\n    //    delta_x = this.apply_scaling2(delta_x);\n    //    delta_y = this.apply_scaling2(delta_y);\n    //}\n\n    this.mouse_buffer.push(info_byte);\n    this.mouse_buffer.push(delta_x);\n    this.mouse_buffer.push(delta_y);\n\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\n\n    this.mouse_irq();\n};\n\nPS2.prototype.apply_scaling2 = function(n)\n{\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\n    var abs = Math.abs(n),\n        sign = n >> 31;\n\n    switch(abs)\n    {\n        case 0:\n        case 1:\n        case 3:\n            return n;\n        case 2:\n            return sign;\n        case 4:\n            return 6 * sign;\n        case 5:\n            return 9 * sign;\n        default:\n            return n << 1;\n    }\n};\n\nPS2.prototype.next_byte_is_aux = function()\n{\n    return this.mouse_buffer.length && !this.kbd_buffer.length;\n};\n\nPS2.prototype.port60_read = function()\n{\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\n\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\n    {\n        // should not happen\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\n        return this.last_port60_byte;\n    }\n\n    var do_mouse_buffer = this.next_byte_is_aux();\n\n    if(do_mouse_buffer)\n    {\n        this.cpu.device_lower_irq(12);\n        this.last_port60_byte = this.mouse_buffer.shift();\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\n\n        if(this.mouse_buffer.length >= 1)\n        {\n            this.mouse_irq();\n        }\n    }\n    else\n    {\n        this.cpu.device_lower_irq(1);\n        this.last_port60_byte = this.kbd_buffer.shift();\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\n\n        if(this.kbd_buffer.length >= 1)\n        {\n            this.kbd_irq();\n        }\n    }\n\n    return this.last_port60_byte;\n};\n\nPS2.prototype.port64_read = function()\n{\n    // status port\n\n    var status_byte = 0x10;\n\n    if(this.mouse_buffer.length || this.kbd_buffer.length)\n    {\n        status_byte |= 1;\n    }\n    if(this.next_byte_is_aux())\n    {\n        status_byte |= 0x20;\n    }\n\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\n\n    return status_byte;\n};\n\nPS2.prototype.port60_write = function(write_byte)\n{\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\n\n    if(this.read_command_register)\n    {\n        this.command_register = write_byte;\n        this.read_command_register = false;\n\n        // not sure, causes \"spurious ack\" in Linux\n        //this.kbd_buffer.push(0xFA);\n        //this.kbd_irq();\n\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\n    }\n    else if(this.read_output_register)\n    {\n        this.read_output_register = false;\n\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(write_byte);\n        this.mouse_irq();\n    }\n    else if(this.next_read_sample)\n    {\n        this.next_read_sample = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        this.sample_rate = write_byte;\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\n        if(!this.sample_rate)\n        {\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\n            this.sample_rate = 100;\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_resolution)\n    {\n        this.next_read_resolution = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        if(write_byte > 3)\n        {\n            this.resolution = 4;\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\n        }\n        else\n        {\n            this.resolution = 1 << write_byte;\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_led)\n    {\n        // nope\n        this.next_read_led = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_handle_scan_code_set)\n    {\n        this.next_handle_scan_code_set = false;\n\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n\n        if(write_byte)\n        {\n            // set scan code set\n        }\n        else\n        {\n            this.kbd_buffer.push(2);\n        }\n    }\n    else if(this.next_read_rate)\n    {\n        // nope\n        this.next_read_rate = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_is_mouse_command)\n    {\n        this.next_is_mouse_command = false;\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        if(!this.have_mouse)\n        {\n            return;\n        }\n\n        // send ack\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xE6:\n            // set scaling to 1:1\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\n            this.scaling2 = false;\n            break;\n        case 0xE7:\n            // set scaling to 2:1\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\n            this.scaling2 = true;\n            break;\n        case 0xE8:\n            // set mouse resolution\n            this.next_read_resolution = true;\n            break;\n        case 0xE9:\n            // status request - send one packet\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xEB:\n            // request single packet\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xF2:\n            //  MouseID Byte\n            this.mouse_buffer.push(0);\n            this.mouse_buffer.push(0);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF3:\n            // sample rate\n            this.next_read_sample = true;\n            break;\n        case 0xF4:\n            // enable streaming\n            this.enable_mouse_stream = true;\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF5:\n            // disable streaming\n            this.enable_mouse_stream = false;\n            break;\n        case 0xF6:\n            // set defaults\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n            break;\n        case 0xFF:\n            // reset, send completion code\n            dbg_log(\"Mouse reset\", LOG_PS2);\n            this.mouse_buffer.push(0xAA);\n            this.mouse_buffer.push(0);\n\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n\n        default:\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.mouse_irq();\n    }\n    else\n    {\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        // send ack\n        this.mouse_buffer.clear();\n        this.kbd_buffer.clear();\n        this.kbd_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xED:\n            this.next_read_led = true;\n            break;\n        case 0xF0:\n            // get/set scan code set\n            this.next_handle_scan_code_set = true;\n            break;\n        case 0xF2:\n            // identify\n            this.kbd_buffer.push(0xAB);\n            this.kbd_buffer.push(83);\n            break;\n        case 0xF3:\n            //  Set typematic rate and delay\n            this.next_read_rate = true;\n            break;\n        case 0xF4:\n            // enable scanning\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = true;\n            break;\n        case 0xF5:\n            // disable scanning\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = false;\n            break;\n        case 0xF6:\n            // reset defaults\n            //this.enable_keyboard_stream = false;\n            break;\n        case 0xFF:\n            this.kbd_buffer.clear();\n            this.kbd_buffer.push(0xFA);\n            this.kbd_buffer.push(0xAA);\n            this.kbd_buffer.push(0);\n            break;\n        default:\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.port64_write = function(write_byte)\n{\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\n\n    switch(write_byte)\n    {\n    case 0x20:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(this.command_register);\n        break;\n    case 0x60:\n        this.read_command_register = true;\n        break;\n    case 0xD3:\n        this.read_output_register = true;\n        break;\n    case 0xD4:\n        this.next_is_mouse_command = true;\n        break;\n    case 0xA7:\n        // Disable second port\n        dbg_log(\"Disable second port\", LOG_PS2);\n        this.command_register |= 0x20;\n        break;\n    case 0xA8:\n        // Enable second port\n        dbg_log(\"Enable second port\", LOG_PS2);\n        this.command_register &= ~0x20;\n        break;\n    case 0xA9:\n        // test second ps/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        break;\n    case 0xAA:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0x55);\n        break;\n    case 0xAB:\n        // Test first PS/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        break;\n    case 0xAD:\n        // Disable Keyboard\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\n        this.command_register |= 0x10;\n        break;\n    case 0xAE:\n        // Enable Keyboard\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\n        this.command_register &= ~0x10;\n        break;\n    case 0xFE:\n        dbg_log(\"CPU reboot via PS2\");\n        this.cpu.reboot_internal();\n        break;\n    default:\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar PIC_LOG_VERBOSE = false;\n\n/**\n * Programmable Interrupt Controller\n * http://stanislavs.org/helppc/8259.html\n *\n * @constructor\n * @param {CPU} cpu\n * @param {PIC=} master\n */\nfunction PIC(cpu, master)\n{\n    /**\n     * all irqs off\n     * @type {number}\n     */\n    this.irq_mask = 0;\n\n    /**\n     * @type {number}\n     *\n     * Bogus default value (both master and slave mapped to 0).\n     * Will be initialized by the BIOS\n     */\n    this.irq_map = 0;\n\n    /**\n     * in-service register\n     * Holds interrupts that are currently being serviced\n     * @type {number}\n     */\n    this.isr = 0;\n\n    /**\n     * interrupt request register\n     * Holds interrupts that have been requested\n     * @type {number}\n     */\n    this.irr = 0;\n\n    this.irq_value = 0;\n\n    /**\n     * @type {number}\n     */\n    this.requested_irq = -1;\n\n    this.master = master;\n    this.is_master = this.master === undefined;\n    this.slave = undefined;\n\n    this.name = this.is_master ? \"master\" : \"slave \";\n\n    this.expect_icw4 = false;\n    this.state = 0;\n    this.read_isr = 0;\n    this.auto_eoi = 1;\n    this.special_mask_mode = 0;\n\n    this.elcr = 0;\n\n    this.cpu = cpu;\n\n    // Checking for callable interrupts:\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\n\n    // triggering irqs:\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\n\n\n    if(this.is_master)\n    {\n        this.slave = new PIC(this.cpu, this);\n\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\n\n            this.requested_irq = irq_number;\n            this.cpu.handle_irqs();\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\n            if(this.requested_irq === 2)\n            {\n                this.slave.acknowledge_irq();\n            }\n            else\n            {\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n            }\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n    else\n    {\n        // is slave\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\n            this.requested_irq = irq_number;\n            this.master.set_irq(2);\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.master.irq_value &= ~(1 << 2);\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            this.master.irq_value &= ~(1 << 2);\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n\n    this.dump = function()\n    {\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\n\n        if(this.is_master)\n        {\n            this.slave.dump();\n        }\n    };\n\n    var io_base;\n    var iobase_high;\n    if(this.is_master)\n    {\n        io_base = 0x20;\n        iobase_high = 0x4D0;\n    }\n    else\n    {\n        io_base = 0xA0;\n        iobase_high = 0x4D1;\n    }\n\n    this.cpu.io.register_write(io_base, this, this.port20_write);\n    this.cpu.io.register_read(io_base, this, this.port20_read);\n\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\n\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\n\n\n    if(this.is_master)\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n\n            if(irq_number >= 8)\n            {\n                this.slave.set_irq(irq_number - 8);\n                return;\n            }\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\n            }\n\n            if(irq_number >= 8)\n            {\n                this.slave.clear_irq(irq_number - 8);\n                return;\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n    else\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n\n    this.get_isr = function()\n    {\n        return this.isr;\n    };\n}\n\nPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.irq_mask;\n    state[1] = this.irq_map;\n    state[2] = this.isr;\n    state[3] = this.irr;\n    state[4] = this.is_master;\n    state[5] = this.slave;\n    state[6] = this.expect_icw4;\n    state[7] = this.state;\n    state[8] = this.read_isr;\n    state[9] = this.auto_eoi;\n    state[10] = this.elcr;\n\n    return state;\n};\n\nPIC.prototype.set_state = function(state)\n{\n    this.irq_mask = state[0];\n    this.irq_map = state[1];\n    this.isr = state[2];\n    this.irr = state[3];\n    this.is_master = state[4];\n    this.slave = state[5];\n    this.expect_icw4 = state[6];\n    this.state = state[7];\n    this.read_isr = state[8];\n    this.auto_eoi = state[9];\n    this.elcr = state[10];\n};\n\nPIC.prototype.port20_write = function(data_byte)\n{\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\n    if(data_byte & 0x10) // xxxx1xxx\n    {\n        // icw1\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\n        this.isr = 0;\n        this.irr = 0;\n        this.irq_mask = 0;\n        this.irq_value = 0;\n        this.auto_eoi = 1;\n        this.requested_irq = -1;\n\n        this.expect_icw4 = data_byte & 1;\n        this.state = 1;\n    }\n    else if(data_byte & 8) // xxx01xxx\n    {\n        // ocw3\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\n        if(data_byte & 2)\n        {\n            this.read_isr = data_byte & 1;\n        }\n        if(data_byte & 4)\n        {\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\n        }\n        if(data_byte & 0x40)\n        {\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\n        }\n    }\n    else // xxx00xxx\n    {\n        // ocw2\n        // end of interrupt\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\n\n        var eoi_type = data_byte >> 5;\n\n        if(eoi_type === 1)\n        {\n            // non-specific eoi\n            this.isr &= this.isr - 1;\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\n        }\n        else if(eoi_type === 3)\n        {\n            // specific eoi\n            this.isr &= ~(1 << (data_byte & 7));\n        }\n        else if((data_byte & 0xC8) === 0xC0)\n        {\n            // os2 v4\n            let priority = data_byte & 7;\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\n        }\n        else\n        {\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\n            dbg_assert(false);\n            this.isr &= this.isr - 1;\n        }\n\n        this.check_irqs();\n    }\n};\n\nPIC.prototype.port20_read = function()\n{\n    if(this.read_isr)\n    {\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\n        return this.isr;\n    }\n    else\n    {\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\n        return this.irr;\n    }\n};\n\nPIC.prototype.port21_write = function(data_byte)\n{\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\n    if(this.state === 0)\n    {\n        if(this.expect_icw4)\n        {\n            // icw4\n            this.expect_icw4 = false;\n            this.auto_eoi = data_byte & 2;\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\n\n            if((data_byte & 1) === 0)\n            {\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\n            }\n        }\n        else\n        {\n            // ocw1\n            this.irq_mask = ~data_byte;\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\n                        \" (\" + this.name + \")\", LOG_PIC);\n            }\n\n            this.check_irqs();\n        }\n    }\n    else if(this.state === 1)\n    {\n        // icw2\n        this.irq_map = data_byte;\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\n                \" (\" + this.name + \")\", LOG_PIC);\n        this.state++;\n    }\n    else if(this.state === 2)\n    {\n        // icw3\n        this.state = 0;\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\n    }\n};\n\nPIC.prototype.port21_read = function()\n{\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\n    return ~this.irq_mask & 0xFF;\n};\n\nPIC.prototype.port4D0_read = function()\n{\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\n    return this.elcr;\n};\n\nPIC.prototype.port4D0_write = function(value)\n{\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\n    // set by seabios to 00 0C (only set for pci interrupts)\n    this.elcr = value;\n};\n\n","\"use strict\";\n\n/*\n * Serial ports\n * http://wiki.osdev.org/UART\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\n * https://www.freebsd.org/doc/en/articles/serial-uart/\n */\n\n/** @const */\nvar DLAB = 0x80;\n\n\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\n\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\n/** @const */var UART_IIR_NO_INT = 0x01;\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\n\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {number} port\n * @param {BusConnector} bus\n */\nfunction UART(cpu, port, bus)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.ints = 1 << UART_IIR_THRI;\n\n    this.baud_rate = 0;\n\n    this.line_control = 0;\n\n    // line status register\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\n\n    this.fifo_control = 0;\n\n    // interrupts enable\n    this.ier = 0;\n\n    // interrupt identification register\n    this.iir = UART_IIR_NO_INT;\n\n    this.modem_control = 0;\n    this.modem_status = 0;\n\n    this.scratch_register = 0;\n\n    this.irq = 0;\n\n    this.input = new ByteQueue(4096);\n\n    this.current_line = [];\n\n    if(port === 0x3E8 || port === 0x3F8)\n    {\n        this.irq = 4;\n    }\n    else if(port === 0x3E8 || port === 0x3E8)\n    {\n        this.irq = 3;\n    }\n    else\n    {\n        dbg_log(\"Invalid port: \" + h(port), LOG_SERIAL);\n        return;\n    }\n\n    this.bus.register(\"serial0-input\", function(data)\n    {\n        this.data_received(data);\n    }, this);\n\n    var io = cpu.io;\n\n    io.register_write(port, this, function(out_byte)\n    {\n        this.write_data(out_byte);\n    }, function(out_word)\n    {\n        this.write_data(out_word & 0xFF);\n        this.write_data(out_word >> 8);\n    });\n\n    io.register_write(port | 1, this, function(out_byte)\n    {\n        if(this.line_control & DLAB)\n        {\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\n        }\n        else\n        {\n            this.ier = out_byte & 0xF;\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\n            this.CheckInterrupt();\n        }\n    });\n\n    io.register_read(port, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate & 0xFF;\n        }\n        else\n        {\n            var data = this.input.shift();\n\n            if(data === -1)\n            {\n                dbg_log(\"Read input empty\", LOG_SERIAL);\n            }\n            else\n            {\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\n            }\n\n            if(this.input.length === 0)\n            {\n                this.lsr &= ~UART_LSR_DATA_READY;\n                this.ClearInterrupt(UART_IIR_CTI);\n            }\n\n            return data;\n        }\n    });\n\n    io.register_read(port | 1, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate >> 8;\n        }\n        else\n        {\n            return this.ier & 0xF;\n        }\n    });\n\n    io.register_read(port | 2, this, function()\n    {\n        var ret = this.iir & 0xF | 0xC0;\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\n\n        if (this.iir == UART_IIR_THRI) {\n            this.ClearInterrupt(UART_IIR_THRI);\n        }\n\n        return ret;\n    });\n    io.register_write(port | 2, this, function(out_byte)\n    {\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\n        this.fifo_control = out_byte;\n    });\n\n    io.register_read(port | 3, this, function()\n    {\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\n        return this.line_control;\n    });\n    io.register_write(port | 3, this, function(out_byte)\n    {\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\n        this.line_control = out_byte;\n    });\n\n\n    io.register_read(port | 4, this, function()\n    {\n        return this.modem_control;\n    });\n    io.register_write(port | 4, this, function(out_byte)\n    {\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\n        this.modem_control = out_byte;\n    });\n\n    io.register_read(port | 5, this, function()\n    {\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\n        return this.lsr;\n    });\n    io.register_write(port | 5, this, function(out_byte)\n    {\n        dbg_log(\"Factory test write\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 6, this, function()\n    {\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\n        return this.modem_status;\n    });\n    io.register_write(port | 6, this, function(out_byte)\n    {\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 7, this, function()\n    {\n        return this.scratch_register;\n    });\n    io.register_write(port | 7, this, function(out_byte)\n    {\n        this.scratch_register = out_byte;\n    });\n}\n\nUART.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.ints;\n    state[1] = this.baud_rate;\n    state[2] = this.line_control;\n    state[3] = this.lsr;\n    state[4] = this.fifo_control;\n    state[5] = this.ier;\n    state[6] = this.iir;\n    state[7] = this.modem_control;\n    state[8] = this.modem_status;\n    state[9] = this.scratch_register;\n    state[10] = this.irq;\n\n    return state;\n};\n\nUART.prototype.set_state = function(state)\n{\n    this.ints = state[0];\n    this.baud_rate = state[1];\n    this.line_control = state[2];\n    this.lsr = state[3];\n    this.fifo_control = state[4];\n    this.ier = state[5];\n    this.iir = state[6];\n    this.modem_control = state[7];\n    this.modem_status = state[8];\n    this.scratch_register = state[9];\n    this.irq = state[10];\n};\n\nUART.prototype.CheckInterrupt = function() {\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\n        this.iir = UART_IIR_CTI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\n        this.iir = UART_IIR_THRI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\n        this.iir = UART_IIR_MSI;\n        this.cpu.device_raise_irq(this.irq);\n    } else {\n        this.iir = UART_IIR_NO_INT;\n        this.cpu.device_lower_irq(this.irq);\n    }\n};\n\nUART.prototype.ThrowInterrupt = function(line) {\n    this.ints |= (1 << line);\n    this.CheckInterrupt();\n};\n\nUART.prototype.ClearInterrupt = function(line) {\n    this.ints &= ~(1 << line);\n    this.CheckInterrupt();\n};\n\n/**\n * @param {number} data\n */\nUART.prototype.data_received = function(data)\n{\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\n    this.input.push(data);\n\n    this.lsr |= UART_LSR_DATA_READY;\n    this.ThrowInterrupt(UART_IIR_CTI);\n};\n\nUART.prototype.write_data = function(out_byte)\n{\n    if(this.line_control & DLAB)\n    {\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\n        return;\n    }\n\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\n\n    this.ThrowInterrupt(UART_IIR_THRI);\n\n    if(out_byte === 0xFF)\n    {\n        return;\n    }\n\n    var char = String.fromCharCode(out_byte);\n\n    this.bus.send(\"serial0-output-char\", char);\n\n    this.current_line.push(out_byte);\n\n    if(char === \"\\n\")\n    {\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\n        this.bus.send(\"serial0-output-line\", String.fromCharCode.apply(\"\", this.current_line));\n        this.current_line = [];\n    }\n};\n\n","\"use strict\";\n\n// http://www.uefi.org/sites/default/files/resources/ACPI_6_1.pdf\n\n/** @const */\nvar PMTIMER_FREQ = 3579545;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction ACPI(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    var io = cpu.io;\n\n    var acpi = {\n        pci_id: 0x07 << 3,\n        pci_space: [\n            0x86, 0x80, 0x13, 0x71, 0x07, 0x00, 0x80, 0x02, 0x08, 0x00, 0x80, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"acpi\",\n    };\n\n    // 00:07.0 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 08)\n    cpu.devices.pci.register_device(acpi);\n\n    this.status = 1;\n    this.pm1_status = 0;\n    this.pm1_enable = 0;\n    this.last_timer = this.get_timer(v86.microtick());\n\n    this.gpe = new Uint8Array(4);\n\n    io.register_read(0xB000, this, undefined, function()\n    {\n        dbg_log(\"ACPI pm1_status read\", LOG_ACPI);\n        return this.pm1_status;\n    });\n    io.register_write(0xB000, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI pm1_status write: \" + h(value, 4), LOG_ACPI);\n        this.pm1_status &= ~value;\n    });\n\n    io.register_read(0xB002, this, undefined, function()\n    {\n        dbg_log(\"ACPI pm1_enable read\", LOG_ACPI);\n        return this.pm1_enable;\n    });\n    io.register_write(0xB002, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI pm1_enable write: \" + h(value), LOG_ACPI);\n        this.pm1_enable = value;\n    });\n\n    // ACPI status\n    io.register_read(0xB004, this, undefined, function()\n    {\n        dbg_log(\"ACPI status read\", LOG_ACPI);\n        return this.status;\n    });\n    io.register_write(0xB004, this, undefined, function(value)\n    {\n        dbg_log(\"ACPI status write: \" + h(value), LOG_ACPI);\n        this.status = value;\n    });\n\n    // ACPI, pmtimer\n    io.register_read(0xB008, this, undefined, undefined, function()\n    {\n        var value = this.get_timer(v86.microtick()) & 0xFFFFFF;\n        //dbg_log(\"pmtimer read: \" + h(value >>> 0), LOG_ACPI);\n        return value;\n    });\n\n    // ACPI, gpe\n    io.register_read(0xAFE0, this, function()\n    {\n        dbg_log(\"Read gpe#0\", LOG_ACPI);\n        return this.gpe[0];\n    });\n    io.register_read(0xAFE1, this, function()\n    {\n        dbg_log(\"Read gpe#1\", LOG_ACPI);\n        return this.gpe[1];\n    });\n    io.register_read(0xAFE2, this, function()\n    {\n        dbg_log(\"Read gpe#2\", LOG_ACPI);\n        return this.gpe[2];\n    });\n    io.register_read(0xAFE3, this, function()\n    {\n        dbg_log(\"Read gpe#3\", LOG_ACPI);\n        return this.gpe[3];\n    });\n\n    io.register_write(0xAFE0, this, function(value)\n    {\n        dbg_log(\"Write gpe#0: \" + h(value), LOG_ACPI);\n        this.gpe[0] = value;\n    });\n    io.register_write(0xAFE1, this, function(value)\n    {\n        dbg_log(\"Write gpe#1: \" + h(value), LOG_ACPI);\n        this.gpe[1] = value;\n    });\n    io.register_write(0xAFE2, this, function(value)\n    {\n        dbg_log(\"Write gpe#2: \" + h(value), LOG_ACPI);\n        this.gpe[2] = value;\n    });\n    io.register_write(0xAFE3, this, function(value)\n    {\n        dbg_log(\"Write gpe#3: \" + h(value), LOG_ACPI);\n        this.gpe[3] = value;\n    });\n}\n\nACPI.prototype.timer = function(now)\n{\n    var timer = this.get_timer(now);\n    var highest_bit_changed = ((timer ^ this.last_timer) & (1 << 23)) !== 0;\n\n    if((this.pm1_enable & 1) && highest_bit_changed)\n    {\n        dbg_log(\"ACPI raise irq\", LOG_ACPI);\n        this.pm1_status |= 1;\n        this.cpu.device_raise_irq(9);\n    }\n    else\n    {\n        this.cpu.device_lower_irq(9);\n    }\n\n    this.last_timer = timer;\n};\n\nACPI.prototype.get_timer = function(now)\n{\n    return now * (PMTIMER_FREQ / 1000) | 0;\n};\n\nACPI.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.status;\n    state[1] = this.pm1_status;\n    state[2] = this.pm1_enable;\n    return state;\n};\n\nACPI.prototype.set_state = function(state)\n{\n    this.status = state[0];\n    this.pm1_status = state[1];\n    this.pm1_enable = state[2];\n};\n","\"use strict\";\n\n// See Intel's System Programming Guide\n\n\n/** @const */\nvar APIC_LOG_VERBOSE = false;\n\n/** @const */\nvar APIC_ADDRESS = 0xFEE00000;\n\n/** @const */\nvar APIC_TIMER_MODE_MASK = 3 << 17;\n\n/** @const */\nvar APIC_TIMER_MODE_ONE_SHOT = 0;\n\n/** @const */\nvar APIC_TIMER_MODE_PERIODIC = 1 << 17;\n\n/** @const */\nvar APIC_TIMER_MODE_TSC = 2 << 17;\n\n\n/** @const */\nvar DELIVERY_MODES = [\n    \"Fixed (0)\",\n    \"Lowest Prio (1)\",\n    \"SMI (2)\",\n    \"Reserved (3)\",\n    \"NMI (4)\",\n    \"INIT (5)\",\n    \"Reserved (6)\",\n    \"ExtINT (7)\",\n];\n\n/** @const */\nvar DESTINATION_MODES = [\"physical\", \"logical\"];\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction APIC(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    this.apic_id = 0;\n\n    this.timer_divider = 0;\n    this.timer_divider_shift = 1;\n    this.timer_initial_count = 0;\n    this.timer_current_count = 0;\n\n    this.next_tick = v86.microtick();\n\n    this.lvt_timer = IOAPIC_CONFIG_MASKED;\n    this.lvt_perf_counter = IOAPIC_CONFIG_MASKED;\n    this.lvt_int0 = IOAPIC_CONFIG_MASKED;\n    this.lvt_int1 = IOAPIC_CONFIG_MASKED;\n    this.lvt_error = IOAPIC_CONFIG_MASKED;\n\n    this.tpr = 0;\n    this.icr0 = 0;\n    this.icr1 = 0;\n\n    this.irr = new Int32Array(8);\n    this.isr = new Int32Array(8);\n    this.tmr = new Int32Array(8);\n\n    this.spurious_vector = 0xFE;\n    this.destination_format = -1;\n    this.local_destination = 0;\n\n    this.error = 0;\n    this.read_error = 0;\n\n    cpu.io.mmap_register(APIC_ADDRESS, 0x100000,\n        (addr) =>\n        {\n            dbg_log(\"Unsupported read8 from apic: \" + h(addr >>> 0), LOG_APIC);\n            var off = addr & 3;\n            addr &= ~3;\n            return this.read32(addr) >> (off * 8) & 0xFF;\n        },\n        (addr, value) =>\n        {\n            dbg_log(\"Unsupported write8 from apic: \" + h(addr) + \" <- \" + h(value), LOG_APIC);\n            dbg_trace();\n            dbg_assert(false);\n        },\n        (addr) => this.read32(addr),\n        (addr, value) => this.write32(addr, value)\n    );\n}\n\nAPIC.prototype.read32 = function(addr)\n{\n    addr = addr - APIC_ADDRESS | 0;\n\n    switch(addr)\n    {\n        case 0x20:\n            dbg_log(\"APIC read id\", LOG_APIC);\n            return this.apic_id;\n\n        case 0x30:\n            // version\n            dbg_log(\"APIC read version\", LOG_APIC);\n            return 0x50014;\n\n        case 0x80:\n            APIC_LOG_VERBOSE && dbg_log(\"APIC read tpr\", LOG_APIC);\n            return this.tpr;\n\n        case 0xD0:\n            dbg_log(\"Read local destination\", LOG_APIC);\n            return this.local_destination;\n\n        case 0xE0:\n            dbg_log(\"Read destination format\", LOG_APIC);\n            return this.destination_format;\n\n        case 0xF0:\n            return this.spurious_vector;\n\n        case 0x100:\n        case 0x110:\n        case 0x120:\n        case 0x130:\n        case 0x140:\n        case 0x150:\n        case 0x160:\n        case 0x170:\n            var index = addr - 0x100 >> 4;\n            dbg_log(\"Read isr \" + index + \": \" + h(this.isr[index] >>> 0, 8), LOG_APIC);\n            return this.isr[index];\n\n        case 0x180:\n        case 0x190:\n        case 0x1A0:\n        case 0x1B0:\n        case 0x1C0:\n        case 0x1D0:\n        case 0x1E0:\n        case 0x1F0:\n            var index = addr - 0x180 >> 4;\n            dbg_log(\"Read tmr \" + index + \": \" + h(this.tmr[index] >>> 0, 8), LOG_APIC);\n            return this.tmr[index];\n\n        case 0x200:\n        case 0x210:\n        case 0x220:\n        case 0x230:\n        case 0x240:\n        case 0x250:\n        case 0x260:\n        case 0x270:\n            var index = addr - 0x200 >> 4;\n            dbg_log(\"Read irr \" + index + \": \" + h(this.irr[index] >>> 0, 8), LOG_APIC);\n            return this.irr[index];\n\n        case 0x280:\n            dbg_log(\"Read error: \" + h(this.read_error >>> 0, 8), LOG_APIC);\n            return this.read_error;\n\n        case 0x300:\n            APIC_LOG_VERBOSE && dbg_log(\"APIC read icr0\", LOG_APIC);\n            return this.icr0;\n\n        case 0x310:\n            dbg_log(\"APIC read icr1\", LOG_APIC);\n            return this.icr1;\n\n        case 0x320:\n            dbg_log(\"read timer lvt\", LOG_APIC);\n            return this.lvt_timer;\n\n        case 0x340:\n            dbg_log(\"read lvt perf counter\", LOG_APIC);\n            return this.lvt_perf_counter;\n\n        case 0x350:\n            dbg_log(\"read lvt int0\", LOG_APIC);\n            return this.lvt_int0;\n\n        case 0x360:\n            dbg_log(\"read lvt int1\", LOG_APIC);\n            return this.lvt_int1;\n\n        case 0x370:\n            dbg_log(\"read lvt error\", LOG_APIC);\n            return this.lvt_error;\n\n        case 0x3E0:\n            // divider\n            dbg_log(\"read timer divider\", LOG_APIC);\n            return this.timer_divider;\n\n        case 0x380:\n            dbg_log(\"read timer initial count\", LOG_APIC);\n            return this.timer_initial_count;\n\n        case 0x390:\n            dbg_log(\"read timer current count: \" + h(this.timer_current_count >>> 0, 8), LOG_APIC);\n            return this.timer_current_count;\n\n        default:\n            dbg_log(\"APIC read \" + h(addr), LOG_APIC);\n            dbg_assert(false);\n            return 0;\n    }\n};\n\nAPIC.prototype.write32 = function(addr, value)\n{\n    addr = addr - APIC_ADDRESS | 0;\n\n    switch(addr)\n    {\n        case 0x30:\n            // version\n            dbg_log(\"APIC write version: \" + h(value >>> 0, 8) + \", ignored\", LOG_APIC);\n            break;\n\n        case 0x80:\n            APIC_LOG_VERBOSE && dbg_log(\"Set tpr: \" + h(value & 0xFF, 2), LOG_APIC);\n            this.tpr = value & 0xFF;\n            this.check_vector();\n            break;\n\n        case 0xB0:\n            var highest_isr = this.highest_isr();\n            if(highest_isr !== -1)\n            {\n                APIC_LOG_VERBOSE && dbg_log(\"eoi: \" + h(value >>> 0, 8) + \" for vector \" + h(highest_isr), LOG_APIC);\n                this.register_clear_bit(this.isr, highest_isr);\n                if(this.register_get_bit(this.tmr, highest_isr))\n                {\n                    // Send eoi to all IO APICs\n                    this.cpu.devices.ioapic.remote_eoi(highest_isr);\n                }\n                this.check_vector();\n            }\n            else\n            {\n                dbg_log(\"Bad eoi: No isr set\", LOG_APIC);\n            }\n            break;\n\n        case 0xD0:\n            dbg_log(\"Set local destination: \" + h(value >>> 0, 8), LOG_APIC);\n            this.local_destination = value & 0xFF000000;\n            break;\n\n        case 0xE0:\n            dbg_log(\"Set destination format: \" + h(value >>> 0, 8), LOG_APIC);\n            this.destination_format = value | 0xFFFFFF;\n            break;\n\n        case 0xF0:\n            dbg_log(\"Set spurious vector: \" + h(value >>> 0, 8), LOG_APIC);\n            this.spurious_vector = value;\n            break;\n\n        case 0x280:\n            // updated readable error register with real error\n            dbg_log(\"Write error: \" + h(value >>> 0, 8), LOG_APIC);\n            this.read_error = this.error;\n            this.error = 0;\n            break;\n\n        case 0x300:\n            var vector = value & 0xFF;\n            var delivery_mode = value >> 8 & 7;\n            var destination_mode = value >> 11 & 1;\n            var is_level = value >> 15 & 1;\n            var destination_shorthand = value >> 18 & 3;\n            var destination = this.icr1 >>> 24;\n            dbg_log(\"APIC write icr0: \" + h(value, 8) + \" vector=\" + h(vector, 2) + \" \" +\n                    \"destination_mode=\" + DESTINATION_MODES[destination_mode] + \" delivery_mode=\" + DELIVERY_MODES[delivery_mode] + \" \" +\n                    \"destination_shorthand=\" + [\"no\", \"self\", \"all with self\", \"all without self\"][destination_shorthand], LOG_APIC);\n\n            value &= ~(1 << 12);\n            this.icr0 = value;\n\n            if(destination_shorthand === 0)\n            {\n                // no shorthand\n                this.route(vector, delivery_mode, is_level, destination, destination_mode);\n            }\n            else if(destination_shorthand === 1)\n            {\n                // self\n                this.deliver(vector, IOAPIC_DELIVERY_FIXED, is_level);\n            }\n            else if(destination_shorthand === 2)\n            {\n                // all including self\n                this.deliver(vector, delivery_mode, is_level);\n            }\n            else if(destination_shorthand === 3)\n            {\n                // all but self\n            }\n            else\n            {\n                dbg_assert(false);\n            }\n            break;\n\n        case 0x310:\n            dbg_log(\"APIC write icr1: \" + h(value >>> 0, 8), LOG_APIC);\n            this.icr1 = value;\n            break;\n\n        case 0x320:\n            dbg_log(\"timer lvt: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_timer = value;\n            break;\n\n        case 0x340:\n            dbg_log(\"lvt perf counter: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_perf_counter = value;\n            break;\n\n        case 0x350:\n            dbg_log(\"lvt int0: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_int0 = value;\n            break;\n\n        case 0x360:\n            dbg_log(\"lvt int1: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_int1 = value;\n            break;\n\n        case 0x370:\n            dbg_log(\"lvt error: \" + h(value >>> 0, 8), LOG_APIC);\n            this.lvt_error = value;\n            break;\n\n        case 0x3E0:\n            dbg_log(\"timer divider: \" + h(value >>> 0, 8), LOG_APIC);\n            this.timer_divider = value;\n\n            var divide_shift = value & 0b11 | (value & 0b1000) >> 1;\n            this.timer_divider_shift = divide_shift === 0b111 ? 0 : divide_shift + 1;\n            break;\n\n        case 0x380:\n            dbg_log(\"timer initial: \" + h(value >>> 0, 8), LOG_APIC);\n            this.timer_initial_count = value >>> 0;\n            this.timer_current_count = value >>> 0;\n\n            this.next_tick = v86.microtick();\n            this.timer_active = true;\n            break;\n\n        case 0x390:\n            dbg_log(\"timer current: \" + h(value >>> 0, 8), LOG_APIC);\n            dbg_assert(false, \"read-only register\");\n            break;\n\n        default:\n            dbg_log(\"APIC write32 \" + h(addr) + \" <- \" + h(value >>> 0, 8), LOG_APIC);\n            dbg_assert(false);\n    }\n};\n\nAPIC.prototype.timer = function(now)\n{\n    if(this.timer_current_count === 0)\n    {\n        return;\n    }\n    //dbg_log(now + \" \" + this.next_tick, LOG_APIC);\n\n    var steps = (now - this.next_tick) * APIC_TIMER_FREQ / (1 << this.timer_divider_shift) >>> 0;\n\n    if(steps === 0)\n    {\n        return;\n    }\n\n    this.next_tick += steps / APIC_TIMER_FREQ * (1 << this.timer_divider_shift);\n\n    this.timer_current_count -= steps;\n\n    if(this.timer_current_count <= 0)\n    {\n        var mode = this.lvt_timer & APIC_TIMER_MODE_MASK;\n\n        if(mode === APIC_TIMER_MODE_PERIODIC)\n        {\n            // This isn't exact, because timer_current_count might already be\n            // negative at this point since timer() fires late\n            this.timer_current_count = this.timer_initial_count;\n\n            if((this.lvt_timer & IOAPIC_CONFIG_MASKED) === 0)\n            {\n                this.deliver(this.lvt_timer & 0xFF, IOAPIC_DELIVERY_FIXED, false);\n            }\n        }\n        else if(mode === APIC_TIMER_MODE_ONE_SHOT)\n        {\n            this.timer_current_count = 0;\n            dbg_log(\"APIC timer one shot end\", LOG_APIC);\n\n            if((this.lvt_timer & IOAPIC_CONFIG_MASKED) === 0)\n            {\n                this.deliver(this.lvt_timer & 0xFF, IOAPIC_DELIVERY_FIXED, false);\n            }\n        }\n    }\n};\n\nAPIC.prototype.route = function(vector, mode, is_level, destination, destination_mode)\n{\n    // TODO\n    this.deliver(vector, mode, is_level);\n};\n\nAPIC.prototype.deliver = function(vector, mode, is_level)\n{\n    APIC_LOG_VERBOSE && dbg_log(\"Deliver \" + h(vector, 2) + \" mode=\" + mode + \" level=\" + is_level, LOG_APIC);\n\n    if(mode === IOAPIC_DELIVERY_INIT)\n    {\n        // TODO\n        return;\n    }\n\n    if(mode === IOAPIC_DELIVERY_NMI)\n    {\n        // TODO\n        return;\n    }\n\n    if(vector < 0x10 || vector === 0xFF)\n    {\n        dbg_assert(false, \"TODO: Invalid vector\");\n    }\n\n    if(this.register_get_bit(this.irr, vector))\n    {\n        dbg_log(\"Not delivered: irr already set, vector=\" + h(vector, 2), LOG_APIC);\n        return;\n    }\n\n    this.register_set_bit(this.irr, vector);\n\n    if(is_level)\n    {\n        this.register_set_bit(this.tmr, vector);\n    }\n    else\n    {\n        this.register_clear_bit(this.tmr, vector);\n    }\n\n    this.check_vector();\n};\n\nAPIC.prototype.highest_irr = function()\n{\n    var highest = this.register_get_highest_bit(this.irr);\n    dbg_assert(highest !== 0xFF);\n    dbg_assert(highest >= 0x10 || highest === -1);\n    return highest;\n};\n\nAPIC.prototype.highest_isr = function()\n{\n    var highest = this.register_get_highest_bit(this.isr);\n    dbg_assert(highest !== 0xFF);\n    dbg_assert(highest >= 0x10 || highest === -1);\n    return highest;\n};\n\nAPIC.prototype.check_vector = function()\n{\n    var highest_irr = this.highest_irr();\n\n    if(highest_irr === -1)\n    {\n        return;\n    }\n\n    var highest_isr = this.highest_isr();\n\n    if(highest_isr >= highest_irr)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher isr, isr=\" + h(highest_isr) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    if((highest_irr & 0xF0) <= (this.tpr & 0xF0))\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher tpr, tpr=\" + h(this.tpr & 0xF0) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    this.cpu.handle_irqs();\n};\n\nAPIC.prototype.acknowledge_irq = function()\n{\n    var highest_irr = this.highest_irr();\n\n    if(highest_irr === -1)\n    {\n        //dbg_log(\"Spurious\", LOG_APIC);\n        return;\n    }\n\n    var highest_isr = this.highest_isr();\n\n    if(highest_isr >= highest_irr)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher isr, isr=\" + h(highest_isr) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    if((highest_irr & 0xF0) <= (this.tpr & 0xF0))\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"Higher tpr, tpr=\" + h(this.tpr & 0xF0) + \" irr=\" + h(highest_irr), LOG_APIC);\n        return;\n    }\n\n    this.register_clear_bit(this.irr, highest_irr);\n    this.register_set_bit(this.isr, highest_irr);\n\n    APIC_LOG_VERBOSE && dbg_log(\"Calling vector \" + h(highest_irr), LOG_APIC);\n    this.cpu.pic_call_irq(highest_irr);\n\n    this.check_vector();\n};\n\nAPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.apic_id;\n    state[1] = this.timer_divider;\n    state[2] = this.timer_divider_shift;\n    state[3] = this.timer_initial_count;\n    state[4] = this.timer_current_count;\n    state[5] = this.next_tick;\n    state[6] = this.lvt_timer;\n    state[7] = this.lvt_perf_counter;\n    state[8] = this.lvt_int0;\n    state[9] = this.lvt_int1;\n    state[10] = this.lvt_error;\n    state[11] = this.tpr;\n    state[12] = this.icr0;\n    state[13] = this.icr1;\n    state[14] = this.irr;\n    state[15] = this.isr;\n    state[16] = this.tmr;\n    state[17] = this.spurious_vector;\n    state[18] = this.destination_format;\n    state[19] = this.local_destination;\n    state[20] = this.error;\n    state[21] = this.read_error;\n\n    return state;\n};\n\nAPIC.prototype.set_state = function(state)\n{\n    this.apic_id = state[0];\n    this.timer_divider = state[1];\n    this.timer_divider_shift = state[2];\n    this.timer_initial_count = state[3];\n    this.timer_current_count = state[4];\n    this.next_tick = state[5];\n    this.lvt_timer = state[6];\n    this.lvt_perf_counter = state[7];\n    this.lvt_int0 = state[8];\n    this.lvt_int1 = state[9];\n    this.lvt_error = state[10];\n    this.tpr = state[11];\n    this.icr0 = state[12];\n    this.icr1 = state[13];\n    this.irr = state[14];\n    this.isr = state[15];\n    this.tmr = state[16];\n    this.spurious_vector = state[17];\n    this.destination_format = state[18];\n    this.local_destination = state[19];\n    this.error = state[20];\n    this.read_error = state[21];\n};\n\n// functions operating on 256-bit registers (for irr, isr, tmr)\nAPIC.prototype.register_get_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    return v[bit >> 5] >> (bit & 31) & 1;\n};\n\nAPIC.prototype.register_set_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    v[bit >> 5] |= 1 << (bit & 31);\n};\n\nAPIC.prototype.register_clear_bit = function(v, bit)\n{\n    dbg_assert(bit >= 0 && bit < 256);\n    v[bit >> 5] &= ~(1 << (bit & 31));\n};\n\nAPIC.prototype.register_get_highest_bit = function(v)\n{\n    for(var i = 7; i >= 0; i--)\n    {\n        var word = v[i];\n\n        if(word)\n        {\n            return v86util.int_log2(word >>> 0) | i << 5;\n        }\n    }\n\n    return -1;\n};\n","\"use strict\";\n\n// http://download.intel.com/design/chipsets/datashts/29056601.pdf\n\n/** @const */\nvar IOAPIC_ADDRESS = 0xFEC00000;\n\n/** @const */\nvar IOREGSEL = 0;\n\n/** @const */\nvar IOWIN = 0x10;\n\n/** @const */\nvar IOAPIC_IRQ_COUNT = 24;\n\n/** @const */\nvar IOAPIC_ID = 0; // must match value in seabios\n\n\n/** @const */\nvar IOAPIC_CONFIG_TRIGGER_MODE_LEVEL = 1 << 15;\n\n/** @const */\nvar IOAPIC_CONFIG_MASKED = 1 << 16;\n\n/** @const */\nvar IOAPIC_CONFIG_DELIVS = 1 << 12;\n\n/** @const */\nvar IOAPIC_CONFIG_REMOTE_IRR = 1 << 14;\n\n/** @const */\nvar IOAPIC_CONFIG_READONLY_MASK = IOAPIC_CONFIG_REMOTE_IRR | IOAPIC_CONFIG_DELIVS | 0xFFFE0000;\n\n/** @const */\nvar IOAPIC_DELIVERY_FIXED = 0;\n\n/** @const */\nvar IOAPIC_DELIVERY_LOWEST_PRIORITY = 1;\n\n/** @const */\nvar IOAPIC_DELIVERY_NMI = 4;\n\n/** @const */\nvar IOAPIC_DELIVERY_INIT = 5;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction IOAPIC(cpu)\n{\n    /** @type {CPU} */\n    this.cpu = cpu;\n\n    this.ioredtbl_config = new Int32Array(IOAPIC_IRQ_COUNT);\n    this.ioredtbl_destination = new Int32Array(IOAPIC_IRQ_COUNT);\n\n    for(var i = 0; i < this.ioredtbl_config.length; i++)\n    {\n        // disable interrupts\n        this.ioredtbl_config[i] = IOAPIC_CONFIG_MASKED;\n    }\n\n    // IOAPIC register selection\n    this.ioregsel = 0;\n\n    this.ioapic_id = IOAPIC_ID;\n\n    this.irr = 0;\n    this.irq_value = 0;\n\n    dbg_assert(MMAP_BLOCK_SIZE >= 0x20);\n    cpu.io.mmap_register(IOAPIC_ADDRESS, MMAP_BLOCK_SIZE,\n        (addr) =>\n        {\n            dbg_assert(false, \"unsupported read8 from ioapic: \" + h(addr));\n            return 0;\n        },\n        (addr, value) =>\n        {\n            dbg_assert(false, \"unsupported write8 from ioapic: \" + h(addr));\n        },\n        (addr) =>\n        {\n            addr = addr - IOAPIC_ADDRESS | 0;\n\n            if(addr === IOREGSEL)\n            {\n                return this.ioregsel;\n            }\n            else if(addr === IOWIN)\n            {\n                return this.read(this.ioregsel);\n            }\n            else\n            {\n                dbg_log(\"Unexpected IOAPIC register read: \" + h(addr), LOG_APIC);\n                dbg_assert(false);\n                return 0;\n            }\n        },\n        (addr, value) =>\n        {\n            addr = addr - IOAPIC_ADDRESS | 0;\n\n            if(addr === IOREGSEL)\n            {\n                this.ioregsel = value;\n            }\n            else if(addr === IOWIN)\n            {\n                this.write(this.ioregsel, value);\n            }\n            else\n            {\n                dbg_log(\"Unexpected IOAPIC register write: \" + h(addr) + \" <- \" + h(value >>> 0, 8), LOG_APIC);\n                dbg_assert(false);\n            }\n        });\n}\n\nIOAPIC.prototype.remote_eoi = function(vector)\n{\n    for(var i = 0; i < IOAPIC_IRQ_COUNT; i++)\n    {\n        var config = this.ioredtbl_config[i];\n\n        if((config & 0xFF) === vector && (config & IOAPIC_CONFIG_REMOTE_IRR))\n        {\n            dbg_log(\"Clear remote IRR for irq=\" + h(i), LOG_APIC);\n            this.ioredtbl_config[i] &= ~IOAPIC_CONFIG_REMOTE_IRR;\n            this.check_irq(i);\n        }\n    }\n};\n\nIOAPIC.prototype.check_irq = function(irq)\n{\n    var mask = 1 << irq;\n\n    if((this.irr & mask) === 0)\n    {\n        return;\n    }\n\n    var config = this.ioredtbl_config[irq];\n\n    if((config & IOAPIC_CONFIG_MASKED) === 0)\n    {\n        var delivery_mode = config >> 8 & 7;\n        var destination_mode = config >> 11 & 1;\n        var vector = config & 0xFF;\n        var destination = this.ioredtbl_destination[irq] >>> 24;\n        var is_level = (config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL) === IOAPIC_CONFIG_TRIGGER_MODE_LEVEL;\n\n        if((config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL) === 0)\n        {\n            this.irr &= ~mask;\n        }\n        else\n        {\n            this.ioredtbl_config[irq] |= IOAPIC_CONFIG_REMOTE_IRR;\n\n            if(config & IOAPIC_CONFIG_REMOTE_IRR)\n            {\n                dbg_log(\"No route: level interrupt and remote IRR still set\", LOG_APIC);\n                return;\n            }\n        }\n\n        if(delivery_mode === IOAPIC_DELIVERY_FIXED || delivery_mode === IOAPIC_DELIVERY_LOWEST_PRIORITY)\n        {\n            this.cpu.devices.apic.route(vector, delivery_mode, is_level, destination, destination_mode);\n        }\n        else\n        {\n            dbg_assert(false, \"TODO\");\n        }\n\n        this.ioredtbl_config[irq] &= ~IOAPIC_CONFIG_DELIVS;\n    }\n};\n\nIOAPIC.prototype.set_irq = function(i)\n{\n    if(i >= IOAPIC_IRQ_COUNT)\n    {\n        dbg_assert(false, \"Bad irq: \" + i, LOG_APIC);\n        return;\n    }\n\n    var mask = 1 << i;\n\n    if((this.irq_value & mask) === 0)\n    {\n        APIC_LOG_VERBOSE && dbg_log(\"apic set irq \" + i, LOG_APIC);\n\n        this.irq_value |= mask;\n\n        var config = this.ioredtbl_config[i];\n        if((config & (IOAPIC_CONFIG_TRIGGER_MODE_LEVEL|IOAPIC_CONFIG_MASKED)) ===\n                        IOAPIC_CONFIG_MASKED)\n        {\n            // edge triggered and masked\n            return;\n        }\n\n        this.irr |= mask;\n\n        this.check_irq(i);\n    }\n};\n\nIOAPIC.prototype.clear_irq = function(i)\n{\n    if(i >= IOAPIC_IRQ_COUNT)\n    {\n        dbg_assert(false, \"Bad irq: \" + i, LOG_APIC);\n        return;\n    }\n\n    var mask = 1 << i;\n\n    if((this.irq_value & mask) === mask)\n    {\n        this.irq_value &= ~mask;\n\n        var config = this.ioredtbl_config[i];\n        if(config & IOAPIC_CONFIG_TRIGGER_MODE_LEVEL)\n        {\n            this.irr &= ~mask;\n        }\n    }\n};\n\nIOAPIC.prototype.read = function(reg)\n{\n    if(reg === 0)\n    {\n        dbg_log(\"IOAPIC Read id\", LOG_APIC);\n        return this.ioapic_id << 24;\n    }\n    else if(reg === 1)\n    {\n        dbg_log(\"IOAPIC Read version\", LOG_APIC);\n        return 0x11 | IOAPIC_IRQ_COUNT - 1 << 16;\n    }\n    else if(reg === 2)\n    {\n        dbg_log(\"IOAPIC Read arbitration id\", LOG_APIC);\n        return this.ioapic_id << 24;\n    }\n    else if(reg >= 0x10 && reg < 0x10 + 2 * IOAPIC_IRQ_COUNT)\n    {\n        var irq = reg - 0x10 >> 1;\n        var index = reg & 1;\n\n        if(index)\n        {\n            var value = this.ioredtbl_destination[irq];\n            dbg_log(\"IOAPIC Read destination irq=\" + h(irq) + \" -> \" + h(value, 8), LOG_APIC);\n        }\n        else\n        {\n            var value = this.ioredtbl_config[irq];\n            dbg_log(\"IOAPIC Read config irq=\" + h(irq) + \" -> \" + h(value, 8), LOG_APIC);\n        }\n        return value;\n    }\n    else\n    {\n        dbg_log(\"IOAPIC register read outside of range \" + h(reg), LOG_APIC);\n        dbg_assert(false);\n        return 0;\n    }\n};\n\nIOAPIC.prototype.write = function(reg, value)\n{\n    //dbg_log(\"IOAPIC write \" + h(reg) + \" <- \" + h(value, 8), LOG_APIC);\n\n    if(reg === 0)\n    {\n        this.ioapic_id = value >>> 24 & 0x0F;\n    }\n    else if(reg === 1 || reg === 2)\n    {\n        dbg_log(\"Invalid write: \" + reg, LOG_APIC);\n    }\n    else if(reg >= 0x10 && reg < 0x10 + 2 * IOAPIC_IRQ_COUNT)\n    {\n        var irq = reg - 0x10 >> 1;\n        var index = reg & 1;\n\n        if(index)\n        {\n            this.ioredtbl_destination[irq] = value & 0xFF000000;\n            dbg_log(\"Write destination \" + h(value >>> 0, 8) + \" irq=\" + h(irq) + \" dest=\" + h(value >>> 24, 2), LOG_APIC);\n        }\n        else\n        {\n            var old_value = this.ioredtbl_config[irq];\n            this.ioredtbl_config[irq] = value & ~IOAPIC_CONFIG_READONLY_MASK | old_value & IOAPIC_CONFIG_READONLY_MASK;\n\n            var vector = value & 0xFF;\n            var delivery_mode = value >> 8 & 7;\n            var destination_mode = value >> 11 & 1;\n            var is_level = value >> 15 & 1;\n            var disabled = value >> 16 & 1;\n\n            dbg_log(\"Write config \" + h(value >>> 0, 8) +\n                    \" irq=\" + h(irq) +\n                    \" vector=\" + h(vector, 2) +\n                    \" deliverymode=\" + DELIVERY_MODES[delivery_mode] +\n                    \" destmode=\" + DESTINATION_MODES[destination_mode] +\n                    \" is_level=\" + is_level +\n                    \" disabled=\" + disabled, LOG_APIC);\n\n            this.check_irq(irq);\n        }\n    }\n    else\n    {\n        dbg_log(\"IOAPIC register write outside of range \" + h(reg) + \": \" + h(value >>> 0, 8), LOG_APIC);\n        dbg_assert(false);\n    }\n};\n\nIOAPIC.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.ioredtbl_config;\n    state[1] = this.ioredtbl_destination;\n    state[2] = this.ioregsel;\n    state[3] = this.ioapic_id;\n    state[4] = this.irr;\n    state[5] = this.irq_value;\n    return state;\n};\n\nIOAPIC.prototype.set_state = function(state)\n{\n    this.ioredtbl_config = state[0];\n    this.ioredtbl_destination = state[1];\n    this.ioregsel = state[2];\n    this.ioapic_id = state[3];\n    this.irr = state[4];\n    this.irq_value = state[5];\n};\n","\"use strict\";\n\n/** @const */\nvar STATE_VERSION = 4;\n\n/** @const */\nvar STATE_MAGIC = 0x86768676|0;\n\n/** @const */\nvar STATE_INDEX_MAGIC = 0;\n\n/** @const */\nvar STATE_INDEX_VERSION = 1;\n\n/** @const */\nvar STATE_INDEX_TOTAL_LEN = 2;\n\n/** @const */\nvar STATE_INDEX_INFO_LEN = 3;\n\n/** @const */\nvar STATE_INFO_BLOCK_START = 16;\n\n\n/** @constructor */\nfunction StateLoadError(msg)\n{\n    this.message = msg;\n}\nStateLoadError.prototype = new Error;\n\n\nfunction save_object(obj, saved_buffers)\n{\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\n    {\n        return obj;\n    }\n\n    dbg_assert(obj.constructor !== Object);\n\n    if(obj.BYTES_PER_ELEMENT)\n    {\n        // Uint8Array, etc.\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\n\n        return {\n            \"__state_type__\": obj.constructor.name,\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\n        };\n    }\n\n    if(DEBUG && !obj.get_state)\n    {\n        console.log(\"Object without get_state: \", obj);\n    }\n\n    var state = obj.get_state();\n    var result = [];\n\n    for(var i = 0; i < state.length; i++)\n    {\n        var value = state[i];\n\n        dbg_assert(typeof value !== \"function\");\n\n        result[i] = save_object(value, saved_buffers);\n    }\n\n    return result;\n}\n\nfunction restore_object(base, obj, buffers)\n{\n    // recursively restore obj into base\n\n    if(typeof obj !== \"object\" || obj === null)\n    {\n        return obj;\n    }\n\n    if(base instanceof Array)\n    {\n        return obj;\n    }\n\n    var type = obj[\"__state_type__\"];\n\n    if(type === undefined)\n    {\n        if(DEBUG && base === undefined)\n        {\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\n            dbg_assert(false);\n        }\n\n        if(DEBUG && !base.get_state)\n        {\n            console.log(\"No get_state:\", base);\n        }\n\n        var current = base.get_state();\n\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\n\n        for(var i = 0; i < obj.length; i++)\n        {\n            obj[i] = restore_object(current[i], obj[i], buffers);\n        }\n\n        base.set_state(obj);\n\n        return base;\n    }\n    else\n    {\n        var table = {\n            \"Uint8Array\": Uint8Array,\n            \"Int8Array\": Int8Array,\n            \"Uint16Array\": Uint16Array,\n            \"Int16Array\": Int16Array,\n            \"Uint32Array\": Uint32Array,\n            \"Int32Array\": Int32Array,\n            \"Float32Array\": Float32Array,\n            \"Float64Array\": Float64Array,\n        };\n\n        var constructor = table[type];\n        dbg_assert(constructor, \"Unkown type: \" + type);\n\n        var info = buffers.infos[obj[\"buffer_id\"]];\n\n        dbg_assert(base);\n        dbg_assert(base.constructor === constructor);\n\n        // restore large buffers by just returning a view on the state blob\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\n        {\n            return new Uint8Array(buffers.full, info.offset, info.length);\n        }\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\n        //      and possibly also breaks restore -> save -> restore again\n        // avoid a new allocation if possible\n        //else if(base &&\n        //        base.constructor === constructor &&\n        //        base.byteOffset === 0 &&\n        //        base.byteLength === info.length)\n        //{\n        //    new Uint8Array(base.buffer).set(\n        //        new Uint8Array(buffers.full, info.offset, info.length),\n        //        base.byteOffset\n        //    );\n        //    return base;\n        //}\n        else\n        {\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\n            return new constructor(buf);\n        }\n    }\n}\n\nCPU.prototype.save_state = function()\n{\n    var saved_buffers = [];\n    var state = save_object(this, saved_buffers);\n\n    var buffer_infos = [];\n    var total_buffer_size = 0;\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var len = saved_buffers[i].byteLength;\n\n        buffer_infos[i] = {\n            offset: total_buffer_size,\n            length: len,\n        };\n\n        total_buffer_size += len;\n\n        // align\n        total_buffer_size = total_buffer_size + 3 & ~3;\n    }\n\n    var info_object = JSON.stringify({\n        \"buffer_infos\": buffer_infos,\n        \"state\": state,\n    });\n\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n    var total_size = buffer_block_start + total_buffer_size;\n\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\n\n    var result = new ArrayBuffer(total_size);\n\n    var header_block = new Int32Array(\n        result,\n        0,\n        STATE_INFO_BLOCK_START / 4\n    );\n    var info_block = new Uint16Array(\n        result,\n        STATE_INFO_BLOCK_START,\n        info_object.length\n    );\n    var buffer_block = new Uint8Array(\n        result,\n        buffer_block_start\n    );\n\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\n\n    for(var i = 0; i < info_object.length; i++)\n    {\n        info_block[i] = info_object.charCodeAt(i);\n    }\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var buffer = saved_buffers[i];\n        dbg_assert(buffer.constructor === Uint8Array);\n        buffer_block.set(buffer, buffer_infos[i].offset);\n    }\n\n    return result;\n};\n\nCPU.prototype.restore_state = function(state)\n{\n    var len = state.byteLength;\n\n    if(len < STATE_INFO_BLOCK_START)\n    {\n        throw new StateLoadError(\"Invalid length: \" + len);\n    }\n\n    var header_block = new Int32Array(state, 0, 4);\n\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\n    {\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\n    }\n\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\n    {\n        throw new StateLoadError(\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\n                \" we=\" + STATE_VERSION);\n    }\n\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\n    {\n        throw new StateLoadError(\n                \"Length doesn't match header: \" +\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\n    }\n\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\n\n    if(info_block_len < 0 ||\n       info_block_len + 12 >= len ||\n       info_block_len % 2)\n    {\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\n    }\n\n    var info_block_str_len = info_block_len / 2;\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\n    var info_block = \"\";\n\n    for(var i = 0; i < info_block_str_len - 8; )\n    {\n        info_block += String.fromCharCode(\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++]\n        );\n    }\n\n    for(; i < info_block_str_len; )\n    {\n        info_block += String.fromCharCode(info_block_buffer[i++]);\n    }\n\n    var info_block_obj = JSON.parse(info_block);\n    var state_object = info_block_obj[\"state\"];\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n\n    for(var i = 0; i < buffer_infos.length; i++)\n    {\n        buffer_infos[i].offset += buffer_block_start;\n    }\n\n    var buffers = {\n        full: state,\n        infos: buffer_infos,\n    };\n\n    restore_object(this, state_object, buffers);\n};\n","\"use strict\";\n\n\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\n\n/* Page 0 register offsets. */\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\n\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\n\n/* Bits in EN0_ISR - Interrupt status register */\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\n\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\n\n/** @const */ var START_PAGE = 0x40;\n/** @const */ var START_RX_PAGE = 0x40 + 12;\n/** @const */ var STOP_PAGE = 0x80;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction Ne2k(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n    this.bus.register(\"net0-receive\", function(data)\n    {\n        this.receive(data);\n    }, this);\n\n    this.port = 0x300;\n\n    this.name = \"ne2k\";\n\n    /** @const */\n    var use_pci = true;\n\n    if(use_pci)\n    {\n        this.pci_space = [\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n        ];\n        this.pci_id = 0x05 << 3;\n        this.pci_bars = [\n            {\n                size: 32,\n            },\n        ];\n    }\n\n    this.isr = 0;\n    this.imr = 0; // interrupt mask register\n\n    this.cr = 1;\n\n    this.dcfg = 0;\n\n    this.rcnt = 0;\n\n    this.tcnt = 0;\n    this.tpsr = 0;\n    this.memory = new Uint8Array(256 * 0x80);\n\n    this.rxcr = 0;\n    this.txcr = 0;\n    this.tsr = 1;\n\n    // mac address\n    var mac = [\n        0x00, 0x22, 0x15,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n    ];\n\n    for(var i = 0; i < 6; i++)\n    {\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\n    }\n\n    this.memory[14] = this.memory[15] = 0x57;\n\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\n                      h(mac[1], 2) + \":\" +\n                      h(mac[2], 2) + \":\" +\n                      h(mac[3], 2) + \":\" +\n                      h(mac[4], 2) + \":\" +\n                      h(mac[5], 2), LOG_NET);\n\n    this.rsar = 0;\n\n    this.pstart = START_PAGE;\n    this.pstop = STOP_PAGE;\n\n    this.curpg = START_RX_PAGE;\n    this.boundary = START_RX_PAGE;\n\n    var io = cpu.io;\n\n    io.register_read(this.port | E8390_CMD, this, function()\n    {\n        dbg_log(\"Read cmd\", LOG_NET);\n        return this.cr;\n    });\n\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\n    {\n        this.cr = data_byte & ~4;\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\n\n        if(this.cr & 1)\n        {\n            return;\n        }\n\n        if((data_byte | 0x18) && this.rcnt === 0)\n        {\n            this.do_interrupt(ENISR_RDC);\n        }\n\n        if(data_byte & 4)\n        {\n            var start = this.tpsr << 8;\n            var data = this.memory.subarray(start, start + this.tcnt);\n            this.bus.send(\"net0-send\", data);\n            this.bus.send(\"eth-transmit-end\", [data.length]);\n            this.do_interrupt(ENISR_TX);\n\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_COUNTER0, this, function()\n    {\n        dbg_log(\"Read counter0\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER1, this, function()\n    {\n        dbg_log(\"Read counter1\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER2, this, function()\n    {\n        dbg_log(\"Read counter2\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | NE_RESET, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read reset\", LOG_NET);\n            this.do_interrupt(ENISR_RESET);\n        }\n        else\n        {\n            dbg_log(\"Read pg1/1f\", LOG_NET);\n        }\n        return 0;\n    });\n\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\n            //this.isr &= ~ENISR_RESET;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\n            this.pstart = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\n            this.pstop = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_ISR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\n            return this.isr;\n        }\n        else\n        {\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\n            return this.curpg;\n        }\n    });\n\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            // acknoledge interrupts where bit is set\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\n            this.isr &= ~data_byte\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\n            this.curpg = data_byte\n        }\n    });\n\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            this.txcr = data_byte;\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\n            this.dcfg = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write start addresse count high: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\n            this.imr = data_byte;\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\n            return this.boundary;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\n            this.boundary = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_TSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return this.tsr;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\n            this.tpsr = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_RSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return 1 | 1 << 3; // receive status ok\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\n    {\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\n        this.rxcr = data_byte;\n    });\n\n    io.register_read(this.port | NE_DATAPORT | 0, this,\n            this.data_port_read8,\n            this.data_port_read16,\n            this.data_port_read32);\n    io.register_write(this.port | NE_DATAPORT | 0, this,\n            this.data_port_write16,\n            this.data_port_write16,\n            this.data_port_write32);\n\n    if(use_pci)\n    {\n        cpu.devices.pci.register_device(this);\n    }\n}\n\nNe2k.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.isr;\n    state[1] = this.imr;\n    state[2] = this.cr;\n    state[3] = this.dcfg;\n    state[4] = this.rcnt;\n    state[5] = this.tcnt;\n    state[6] = this.tpsr;\n    state[7] = this.rsar;\n    state[8] = this.pstart;\n    state[9] = this.curpg;\n    state[10] = this.boundary;\n\n    return state;\n};\n\nNe2k.prototype.set_state = function(state)\n{\n    this.isr = state[0];\n    this.imr = state[1];\n    this.cr = state[2];\n    this.dcfg = state[3];\n    this.rcnt = state[4];\n    this.tcnt = state[5];\n    this.tpsr = state[6];\n    this.rsar = state[7];\n    this.pstart = state[8];\n    this.curpg = state[9];\n    this.boundary = state[10];\n};\n\nNe2k.prototype.do_interrupt = function(ir_mask)\n{\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\n    this.isr |= ir_mask;\n    this.update_irq();\n};\n\nNe2k.prototype.update_irq = function()\n{\n    if(this.imr & this.isr)\n    {\n        this.pci.raise_irq(this.pci_id);\n    }\n    else\n    {\n        this.pci.lower_irq(this.pci_id);\n    }\n};\n\nNe2k.prototype.data_port_write = function(data_byte)\n{\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\n                            \" rsar=\" + h(this.rsar, 4) +\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\n    {\n        // unmapped\n        return;\n    }\n\n    this.rcnt--;\n    this.memory[this.rsar++] = data_byte;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n};\n\nNe2k.prototype.data_port_write16 = function(data)\n{\n    this.data_port_write(data);\n\n    if(this.dcfg & 1)\n    {\n        this.data_port_write(data >> 8);\n    }\n};\n\nNe2k.prototype.data_port_write32 = function(data)\n{\n    this.data_port_write(data);\n    this.data_port_write(data >> 8);\n    this.data_port_write(data >> 16);\n    this.data_port_write(data >> 24);\n};\n\nNe2k.prototype.data_port_read = function()\n{\n    var data = this.memory[this.rsar++];\n\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\n                           \" rsar=\" + h(this.rsar - 1, 4) +\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n    this.rcnt--;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n\n    return data;\n};\n\nNe2k.prototype.data_port_read8 = function()\n{\n    return this.data_port_read16() & 0xFF;\n};\n\nNe2k.prototype.data_port_read16 = function()\n{\n    if(this.dcfg & 1)\n    {\n        return this.data_port_read() | this.data_port_read() << 8;\n    }\n    else\n    {\n        return this.data_port_read();\n    }\n};\n\nNe2k.prototype.data_port_read32 = function()\n{\n    return this.data_port_read() | this.data_port_read() << 8 |\n            this.data_port_read() << 16 | this.data_port_read() << 24;\n};\n\nNe2k.prototype.receive = function(data)\n{\n    // called from the adapter when data is received over the network\n\n    if(this.cr & 1)\n    {\n        // stop bit set\n        return;\n    }\n\n    this.bus.send(\"eth-receive-end\", [data.length]);\n\n    if(this.rxcr & 0x10)\n    {\n        // promiscuous\n    }\n    else if((this.rxcr & 4) &&\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\n    {\n        // broadcast\n    }\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\n    {\n        // multicast\n        // XXX\n        return;\n    }\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\n            data[4] === this.memory[8] && data[5] === this.memory[10])\n    {\n    }\n    else\n    {\n        return;\n    }\n\n    var packet_length = Math.max(60, data.length);\n\n    var offset = this.curpg << 8;\n    var total_length = packet_length + 4;\n    var data_start = offset + 4;\n    var next = this.curpg + 1 + (total_length >> 8);\n\n    var end = offset + total_length;\n\n    if(end > this.memory.length)\n    {\n        // shouldn't happen because at this size it can't cross a page\n        dbg_assert(data.length >= 60);\n\n        var cut = this.memory.length - data_start;\n        this.memory.set(data.subarray(0, cut), data_start);\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\n    }\n    else\n    {\n        this.memory.set(data, data_start);\n\n        if(data.length < 60)\n        {\n            for(var i = data.length; i < 60; i++)\n            {\n                this.memory[data_start + i] = 0;\n            }\n        }\n    }\n\n    if(next >= this.pstop)\n    {\n        next += this.pstart - this.pstop;\n    }\n\n    // write packet header\n    this.memory[offset] = ENRSR_RXOK; // status\n    this.memory[offset + 1] = next;\n    this.memory[offset + 2] = total_length;\n    this.memory[offset + 3] = total_length >> 8;\n\n    this.curpg = next;\n\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\n\n    this.do_interrupt(ENISR_RX);\n};\n\nNe2k.prototype.get_page = function()\n{\n    return this.cr & 0xC0;\n};\n","\"use strict\";\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {FS} filesystem\n */\nfunction VirtIO(cpu, bus, filesystem)\n{\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\n\n    this.pci_space = [\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x06 << 3;\n    this.pci_bars = [\n        {\n            size: 256,\n        },\n    ];\n    this.name = \"virtio\";\n\n    var io = cpu.io;\n\n    io.register_read(0xA800, this,\n        function() {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        },\n        undefined,\n        function()\n        {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        }\n    );\n\n    io.register_write(0xA804, this, undefined, undefined, function(data)\n    {\n        // write guest features\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\n    });\n\n    io.register_write(0xA80E, this, undefined, function(data)\n    {\n        // rw queue select\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\n        this.queue_select = data;\n    }, undefined);\n\n    io.register_read(0xA80C, this, undefined, function()\n    {\n        // read queue size\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\n        return this.queue_size;\n    }, undefined);\n\n    io.register_read(0xA808, this, undefined, undefined, function()\n    {\n        // rw queue address\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\n\n        if(this.queue_select === 0)\n        {\n            return this.queue_address;\n        }\n        else\n        {\n            // queue does not exist\n            return 0;\n        }\n    });\n\n    io.register_write(0xA808, this, undefined, undefined, function(data)\n    {\n        // rw queue address\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\n        this.queue_address = data;\n    });\n\n    io.register_write(0xA812, this, function(data)\n    {\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\n\n        if(data === 0)\n        {\n            dbg_log(\"Reset\", LOG_VIRTIO);\n            this.reset();\n        }\n        else if(data & 0x80)\n        {\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\n        }\n        else\n        {\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\n                    ((data & 2) ? \"DRIVER \" : \"\") +\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\n                    LOG_VIRTIO);\n\n        }\n\n        this.device_status = data;\n    });\n\n    io.register_read(0xA812, this, function()\n    {\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\n        return this.device_status;\n    });\n\n    io.register_read(0xA813, this, function()\n    {\n        dbg_log(\"Read isr\", LOG_VIRTIO);\n\n        // reading resets the isr\n        var isr = this.isr;\n        this.isr = 0;\n        this.pci.lower_irq(this.pci_id);\n        return isr;\n    });\n\n    io.register_write(0xA810, this, undefined, function(data)\n    {\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\n\n        // only queue 0 supported\n        dbg_assert(data === 0);\n\n        var queue_start = this.queue_address << 12;\n        var ring_start = queue_start + 16 * this.queue_size;\n        var ring_desc_start = ring_start + 4;\n\n        var //flags = this.cpu.read16(ring_start),\n            // index of the next free ring\n            idx = this.cpu.read16(ring_start + 2);\n\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\n        //dbg_assert(idx < this.queue_size);\n\n        var mask = this.queue_size - 1;\n        idx &= mask;\n\n        while(this.last_idx !== idx)\n        {\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\n            this.handle_descriptor(desc_idx);\n\n            this.last_idx = this.last_idx + 1 & mask;\n        }\n    });\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    // these should be stored per queue if there is more than one queue\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n\n    for(var i = 0; i < 128; i++)\n    {\n        io.register_read(0xA814 + i, this, function(port)\n        {\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\n\n            if(port < this.device.configspace.length)\n            {\n                return this.device.configspace[port];\n            }\n            else\n            {\n                return 0;\n            }\n        }.bind(this, i), undefined, undefined);\n\n        io.register_write(0xA814 + i, this, function(port, data)\n        {\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\n        }.bind(this, i), undefined, undefined);\n    }\n\n    // should be generalized to support more devices than just the filesystem\n    this.device = new Virtio9p(filesystem, bus);\n    this.device.SendReply = this.device_reply.bind(this);\n\n    cpu.devices.pci.register_device(this);\n}\n\nVirtIO.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = 0; // unused\n    state[1] = this.queue_select;\n    state[2] = this.device_status;\n    state[3] = this.isr;\n    state[4] = this.last_idx;\n    state[5] = this.queue_size;\n    state[6] = this.queue_address;\n    state[7] = this.device;\n\n    return state;\n};\n\nVirtIO.prototype.set_state = function(state)\n{\n    this.queue_select = state[1];\n    this.device_status = state[2];\n    this.isr = state[3];\n    this.last_idx = state[4];\n    this.queue_size = state[5];\n    this.queue_address = state[6];\n\n    this.device = state[7];\n    this.device.SendReply = this.device_reply.bind(this);\n};\n\nVirtIO.prototype.reset = function()\n{\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n};\n\nVirtIO.prototype.handle_descriptor = function(idx)\n{\n    var next = idx;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if(flags & VRING_DESC_F_WRITE)\n        {\n            break;\n        }\n\n        if(flags & VRING_DESC_F_INDIRECT) {\n            dbg_assert(false, \"unsupported\");\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            next = -1;\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    var infos = {\n        start: idx,\n        next: next,\n    };\n\n    this.device.ReceiveRequest(infos, function()\n    {\n        // return one byte\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        return this.cpu.read8(addr_low + pointer++);\n    }.bind(this));\n};\n\nVirtIO.prototype.device_reply = function(queueidx, infos)\n{\n    if(infos.next === -1)\n    {\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\n        return;\n    }\n\n    var mask = this.queue_size - 1;\n    var result_length = this.device.replybuffersize;\n\n    var next = infos.next;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if((flags & VRING_DESC_F_WRITE) === 0)\n        {\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\n            break;\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    for(var i = 0; i < result_length; i++)\n    {\n        var data = this.device.replybuffer[i];\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        this.cpu.write8(addr_low + pointer++, data);\n    }\n\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\n    used_desc_start = used_desc_start + 4095 & ~4095;\n\n    var flags = this.cpu.read16(used_desc_start);\n    var used_idx = this.cpu.read16(used_desc_start + 2);\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\n\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\n\n    used_idx &= mask;\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\n    this.cpu.write32(used_desc_offset, infos.start);\n    this.cpu.write32(used_desc_offset + 4, result_length);\n\n    this.isr |= 1;\n    this.pci.raise_irq(this.pci_id);\n};\n","\"use strict\";\n\n// jor1k compatibility\n\nvar VIRTIO_MAGIC_REG = 0x0;\nvar VIRTIO_VERSION_REG = 0x4;\nvar VIRTIO_DEVICE_REG = 0x8;\nvar VIRTIO_VENDOR_REG = 0xc;\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\nvar VIRTIO_QUEUESEL_REG = 0x30;\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\nvar VIRTIO_QUEUENUM_REG = 0x38;\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\nvar VIRTIO_QUEUEPFN_REG = 0x40;\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\nvar VIRTIO_STATUS_REG = 0x70;\n\n/** @const */\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\n/** @const */\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\n/** @const */\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\n\n\nfunction hex8(n)\n{\n    return h(n);\n}\n\nvar message = {};\n\n/** @param {...string} log */\nmessage.Debug = function(log)\n{\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\n}\n\nmessage.Abort = function()\n{ \n    if(DEBUG)\n    {\n        throw \"abort\"; \n    }\n}\n\n\n// XXX: Should go through emulator interface\nvar LoadBinaryResource;\n\nif(typeof XMLHttpRequest !== \"undefined\")\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) {\n                return;\n            }\n            if ((req.status != 200) && (req.status != 0)) {\n                OnError(\"Error: Could not load file \" + url);\n                return;\n            }\n            var arrayBuffer = req.response;\n            if (arrayBuffer) {\n                OnSuccess(arrayBuffer);\n            } else {\n                OnError(\"Error: No data received from: \" + url);\n            }\n        };\n        /*\n            req.onload = function(e)\n            {\n                    var arrayBuffer = req.response;\n                    if (arrayBuffer) {\n                        OnLoadFunction(arrayBuffer);\n                    }\n            };\n        */\n        req.send(null);\n    }\n}\nelse\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError)\n    {\n        //console.log(url);\n        require(\"fs\")[\"readFile\"](url, function(err, data)\n        {\n            if(err)\n            {\n                OnError(err);\n            }\n            else\n            {\n                OnSuccess(new Uint8Array(data).buffer);\n            }\n        });\n    }\n}\n","\"use strict\";\n\nvar Bus = {};\n\n/** @constructor */\nfunction BusConnector()\n{\n    this.listeners = {};\n    this.pair = undefined;\n};\n\n/**\n * @param {string} name\n * @param {function(*=)} fn\n * @param {Object} this_value\n */\nBusConnector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Unregister one message with the given name and callback\n *\n * @param {string} name\n * @param {function()} fn\n */\nBusConnector.prototype.unregister = function(name, fn)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    this.listeners[name] = listeners.filter(function(l)\n    {\n        return l.fn !== fn\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} unused_transfer\n */\nBusConnector.prototype.send = function(name, value, unused_transfer)\n{\n    if(!this.pair)\n    {\n        return;\n    }\n\n    var listeners = this.pair.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    for(var i = 0; i < listeners.length; i++)\n    {\n        var listener = listeners[i];\n        listener.fn.call(listener.this_value, value);\n    }\n};\n\n/**\n * Send a message, guaranteeing that it is received asynchronously\n *\n * @param {string} name\n * @param {Object=} value\n */\nBusConnector.prototype.send_async = function(name, value)\n{\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\n\n    setTimeout(this.send.bind(this, name, value), 0);\n};\n\nBus.create = function()\n{\n    var c0 = new BusConnector();\n    var c1 = new BusConnector();\n\n    c0.pair = c1;\n    c1.pair = c0;\n\n    return [c0, c1];\n};\n\n","/**\n * This file contains functions to decode the modrm and sib bytes\n *\n * These functions return a virtual address\n *\n * @fileoverview .\n * @suppress {newCheckTypes}\n */\n\"use strict\";\n(function()\n{\n    CPU.prototype.modrm_table16 = Array(0xC0);\n    CPU.prototype.modrm_table32 = Array(0xC0);\n    CPU.prototype.sib_table = Array(0x100);\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\n    };;\n    // special cases\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\n    }\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(false) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\n    };\n    for(var low = 0; low < 8; low++)\n    {\n        for(var high = 0; high < 3; high++)\n        {\n            var x = low | high << 6;\n            for(var i = 1; i < 8; i++)\n            {\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\n            }\n        }\n    }\n\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n})();\n","\"use strict\";\n\n/*\n * string operations\n *\n *       cmp  si  di\n * movs   0    1   1/w    A4\n * cmps   1    1   1/r    A6\n * stos   0    0   1/w    AA\n * lods   0    1   0      AC\n * scas   1    0   1/r    AE\n * ins    0    0   1/w\n * outs   0    1   0\n */\n\n/** @const */\nvar MAX_COUNT_PER_CYCLE = 0x1000;\n\n\nfunction string_get_cycle_count(size, address)\n{\n    dbg_assert(size && size <= 4 && size >= -4);\n\n    if(size < 0)\n    {\n        return (address & 0xFFF) >> (-size >> 1);\n    }\n    else\n    {\n        return (~address & 0xFFF) >> size;\n    }\n}\n\nfunction string_get_cycle_count2(size, addr1, addr2)\n{\n    dbg_assert(arguments.length === 3);\n\n    return Math.min(\n            string_get_cycle_count(size, addr1),\n            string_get_cycle_count(size, addr2));\n}\n\n\nCPU.prototype.movsb = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.read8(phys_src));\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsw = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.safe_read16(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsd = function()\n{\n    var cpu = this;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        // often used by memcpy, well worth optimizing\n        //   using cpu.mem32s.set\n        var ds = cpu.get_seg_prefix(reg_ds),\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\n            es = cpu.get_seg(reg_es),\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\n\n        if(!count)\n        {\n            return;\n        }\n\n        // must be page-aligned if cpu.paging is enabled\n        // and dword-aligned in general\n        var align_mask = cpu.paging ? 0xFFF : 3;\n\n        if((dest & align_mask) === 0 &&\n           (src & align_mask) === 0 &&\n           // If df is set, alignment works a different\n           // This should be unlikely\n           (cpu.flags & flag_direction) === 0)\n        {\n            var cont = false;\n            if(cpu.paging)\n            {\n                src = cpu.translate_address_read(src);\n                dest = cpu.translate_address_write(dest);\n\n                if(count > 0x400)\n                {\n                    count = 0x400;\n                    cont = true;\n                }\n            }\n\n            if(!cpu.io.in_mmap_range(src, count) &&\n                !cpu.io.in_mmap_range(dest, count))\n            {\n                var diff = count << 2;\n                cpu.add_reg_asize(reg_ecx, -count);\n                cpu.add_reg_asize(reg_edi, diff);\n                cpu.add_reg_asize(reg_esi, diff);\n\n                dest >>>= 2;\n                src >>>= 2;\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\n\n                if(cont)\n                {\n                    cpu.instruction_pointer = cpu.previous_ip;\n                }\n\n                return;\n            }\n        }\n    }\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            this.instruction_pointer = this.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nfunction cmpsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            data_src = cpu.read8(phys_src);\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_src = cpu.safe_read8(src);\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                data_src = cpu.read_aligned16(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                data_src = cpu.safe_read16(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        data_src = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                data_src = cpu.read_aligned32(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                data_src = cpu.safe_read32s(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        data_src = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction stosb(cpu)\n{\n    var data = cpu.reg8[reg_al];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, data);\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosw(cpu)\n{\n    var data = cpu.reg16[reg_ax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosd(cpu)\n{\n    var data = cpu.reg32s[reg_eax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction scasb(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n    var data_dest;\n    var data_src = cpu.reg8[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            phys_dest += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasw(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n    var data_dest;\n    var data_src = cpu.reg16[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasd(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n    var data_dest;\n    var data_src = cpu.reg32s[reg_eax];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction insb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 1);\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 2);\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 4);\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.io.port_write8(port, cpu.read8(phys_src));\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write8(port, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write16(port, cpu.safe_read16(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write16(port, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n","/*\n * Arithmatic functions\n * This file contains:\n *\n * add, adc, sub, sbc, cmp\n * inc, dec\n * neg, not\n * imul, mul, idiv, div\n * xadd\n *\n * das, daa, aad, aam\n *\n * and, or, xor, test\n * shl, shr, sar, ror, rol, rcr, rcl\n * shld, shrd\n *\n * bts, btr, btc, bt\n * bsf, bsr\n *\n * popcnt\n*/\n\"use strict\";\n\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\n\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\n\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\n\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\n{\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\n\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\n{\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\n/*\n * inc and dec\n */\n\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\n\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\n\nCPU.prototype.inc = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = 1;\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\nCPU.prototype.dec = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = 1;\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\n\n/*\n * neg\n */\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\n\nCPU.prototype.neg = function(dest_operand, op_size)\n{\n    this.last_op1 = this.last_result = -dest_operand | 0;\n\n    this.flags_changed = flags_all;\n    this.last_add_result = 0;\n    this.last_op2 = dest_operand;\n    this.last_op_size = op_size;\n\n    return this.last_result;\n}\n\n\n/*\n * mul, imul, div, idiv\n *\n * Note: imul has some extra opcodes\n *       while other functions only allow\n *       ax * modrm\n */\n\nCPU.prototype.mul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result < 0x100)\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.imul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8s[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result > 0x7F || result < -0x80)\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.mul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16[reg_ax],\n        high_result = result >>> 16;\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = high_result;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(high_result === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 1 argument\n * ax = ax * r/m\n */\nCPU.prototype.imul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16s[reg_ax];\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = result >> 16;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg16 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\n\n    var result = operand1 * operand2;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.do_mul32 = function(a, b)\n{\n    var a00 = a & 0xFFFF;\n    var a16 = a >>> 16;\n    var b00 = b & 0xFFFF;\n    var b16 = b >>> 16;\n    var low_result = a00 * b00;\n    var mid = (low_result >>> 16) + (a16 * b00 | 0) | 0;\n    var high_result = mid >>> 16;\n    mid = (mid & 0xFFFF) + (a00 * b16 | 0) | 0;\n    this.mul32_result[0] = (mid << 16) | low_result & 0xFFFF;\n    this.mul32_result[1] = ((mid >>> 16) + (a16 * b16 | 0) | 0) + high_result | 0;\n    return this.mul32_result;\n};\n\nCPU.prototype.do_imul32 = function(a, b)\n{\n    var is_neg = false;\n    if(a < 0) {\n        is_neg = true;\n        a = -a | 0;\n    }\n    if(b < 0) {\n        is_neg = !is_neg;\n        b = -b | 0;\n    }\n    var result = this.do_mul32(a, b);\n    if(is_neg) {\n        result[0] = -result[0] | 0;\n        result[1] = ~result[1] + !result[0] | 0;\n    }\n    return result;\n}\n\nCPU.prototype.mul32 = function(source_operand)\n{\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_mul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\n}\n\nCPU.prototype.imul32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_imul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(target_operand + \" * \" + source_operand);\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg32 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\n\n    var result = this.do_imul32(operand1, operand2);\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result[0];\n\n    //console.log(operand + \" * \" + source_operand);\n    //console.log(\"= \" + this.reg32[reg]);\n}\n\nCPU.prototype.div8 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x100)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv8 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16s[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x80 || result <= -0x81)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.div16 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x10000 || result < 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv16 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x8000 || result <= -0x8001)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\n// If the dividend is too large, the division cannot be done precisely using\n// JavaScript's double floating point numbers. Run simple long divsion until\n// the dividend is small enough\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\n{\n    if(div_high >= quot || quot === 0)\n    {\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\n        this.trigger_de();\n    }\n\n    var result = 0;\n\n    if(div_high > 0x100000)\n    {\n        var m = 0;\n        var i = 32;\n        var q = quot;\n        while(q > div_high)\n        {\n            q >>>= 1;\n            i--;\n        }\n        while(div_high > 0x100000)\n        {\n            if(div_high >= q)\n            {\n                div_high -= q;\n                var sub = quot << i >>> 0;\n                if(sub > div_low)\n                {\n                    div_high--;\n                }\n                div_low = div_low - sub >>> 0;\n                result |= 1 << i\n            }\n            i--;\n            q >>= 1;\n        }\n        result >>>= 0;\n    }\n\n    var div = div_low + div_high * 0x100000000;\n    var mod = div % quot;\n    result += div / quot | 0;\n\n    this.div32_result[0] = result;\n    this.div32_result[1] = mod;\n    return this.div32_result;\n}\n\n\nCPU.prototype.div32 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32[reg_edx];\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    // XXX\n    dbg_assert(source_operand);\n    if(result >= 0x100000000)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\nCPU.prototype.idiv32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32s[reg_edx],\n        div_is_neg = false,\n        is_neg = false;\n\n    if(source_operand < 0)\n    {\n        is_neg = true;\n        source_operand = -source_operand;\n    }\n\n    if(dest_operand_high < 0)\n    {\n        div_is_neg = true;\n        is_neg = !is_neg;\n        dest_operand_low = -dest_operand_low >>> 0;\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\n    }\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    if(is_neg)\n    {\n        result = -result | 0;\n    }\n\n    if(div_is_neg)\n    {\n        mod = -mod | 0;\n    }\n\n    dbg_assert(source_operand);\n    if(result >= 0x80000000 || result <= -0x80000001)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\n\nCPU.prototype.xadd8 = function(source_operand, reg)\n{\n    var tmp = this.reg8[reg];\n\n    this.reg8[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_8);\n}\n\n\nCPU.prototype.xadd16 = function(source_operand, reg)\n{\n    var tmp = this.reg16[reg];\n\n    this.reg16[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_16);\n}\n\n\nCPU.prototype.xadd32 = function(source_operand, reg)\n{\n    var tmp = this.reg32s[reg];\n\n    this.reg32s[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_32);\n}\n\n\nCPU.prototype.bcd_daa = function()\n{\n    //dbg_log(\"daa\");\n    // decimal adjust after addition\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf(),\n        old_af = this.getaf();\n\n    this.flags &= ~1 & ~flag_adjust\n\n    if((old_al & 0xF) > 9 || old_af)\n    {\n        this.reg8[reg_al] += 6;\n        this.flags |= flag_adjust;\n    }\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] += 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_das = function()\n{\n    //dbg_log(\"das\");\n    // decimal adjust after subtraction\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf();\n\n    this.flags &= ~1;\n\n    if((old_al & 0xF) > 9 || this.getaf())\n    {\n        this.reg8[reg_al] -= 6;\n        this.flags |= flag_adjust;\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\n    }\n    else\n    {\n        this.flags &= ~flag_adjust;\n    }\n\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] -= 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_aam = function(imm8)\n{\n    //dbg_log(\"aam\");\n    // ascii adjust after multiplication\n\n    if(imm8 === 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        var temp = this.reg8[reg_al];\n        this.reg8[reg_ah] = temp / imm8;\n        this.reg8[reg_al] = temp % imm8;\n\n        this.last_result = this.reg8[reg_al];\n\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n    }\n}\n\nCPU.prototype.bcd_aad = function(imm8)\n{\n    //dbg_log(\"aad\");\n    // ascii adjust before division\n\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\n    this.last_result = result & 0xFF;\n    this.reg16[reg_ax] = this.last_result;\n    this.last_op_size = OPSIZE_8;\n\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n\n    if(result > 0xFFFF)\n    {\n        this.flags |= 1;\n    }\n}\n\nCPU.prototype.bcd_aaa = function()\n{\n    //dbg_log(\"aaa\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] += 6;\n        this.reg8[reg_ah] += 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n};\n\n\nCPU.prototype.bcd_aas = function()\n{\n    //dbg_log(\"aas\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] -= 6;\n        this.reg8[reg_ah] -= 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n}\n\n\n/*                     \\O\n * bitwise functions    |\\\n *                     / \\\n *\n * and, or, xor, test\n * shl, shr, sar, rol, ror, rcl, ror\n * shrd, shld\n *\n * bt, bts, btr, btc\n * bsf, bsr\n */\n\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\n\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\n\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand & source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand | source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand ^ source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\n\n/*\n * rotates and shifts\n */\n\nCPU.prototype.rol8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 7;\n\n    var result = dest_operand << count | dest_operand >> (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 15;\n\n    var result = dest_operand << count | dest_operand >> (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | dest_operand >>> (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 3 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 5 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1);\n\n    if(count > 1)\n    {\n        result |= dest_operand >>> (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 7;\n    var result = dest_operand >> count | dest_operand << (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 7 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 15;\n    var result = dest_operand >> count | dest_operand << (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 15 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | dest_operand << (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 31 & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\n\n    if(count > 1)\n    {\n        result |= dest_operand << (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.shl8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 8 & 1)\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 16 & 1)\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    // test this\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 4)  & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >>> (count - 1) & 1)\n                | (dest_operand >> 20) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 8)\n    {\n        this.last_result = dest_operand << 24 >> count + 24;\n        // of is zero\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 24 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 16)\n    {\n        this.last_result = dest_operand << 16 >> count + 16;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 16 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\n\n    return this.last_result;\n}\n\n\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\n\n    return this.last_result;\n}\n\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\n\n    if(count === 1)\n    {\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\n    }\n    else\n    {\n        this.flags &= ~flag_overflow;\n    }\n\n    return this.last_result;\n}\n\n\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base ^ 1 << bit_offset;\n}\n\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base | 1 << bit_offset;\n}\n\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base & ~(1 << bit_offset);\n}\n\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\n{\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\n}\n\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\n}\n\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\n}\n\nCPU.prototype.bsf16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n\n        // not defined in the docs, but value doesn't change on my intel machine\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        // http://jsperf.com/lowest-bit-index\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\n    }\n}\n\nCPU.prototype.bsf32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\n    }\n}\n\nCPU.prototype.bsr16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2(bit_base);\n    }\n}\n\nCPU.prototype.bsr32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\n    }\n}\n\nCPU.prototype.popcnt = function(v)\n{\n    this.flags_changed = 0;\n    this.flags &= ~flags_all;\n\n    if(v)\n    {\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\n        v = v - ((v >> 1) & 0x55555555);\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return 0;\n    }\n};\n\nCPU.prototype.saturate_sw_to_ub = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v >>> 0;\n    if (ret >= 0x8000) {\n        ret = 0;\n    }\n    else if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sw_to_sb = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v;\n\n    if (ret > 0xFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sw = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFF8000) {\n        ret = ret & 0xFFFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x8000;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x7FFF;\n    }\n\n    dbg_assert((ret & 0xFFFF0000) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sb = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFFFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_ub = function(v)\n{\n    let ret = v | 0;\n\n    if (ret < 0) {\n        ret = 0;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\n\nCPU.prototype.saturate_ud_to_ub = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_uw = function(v)\n{\n    dbg_assert(v >= 0);\n    return v > 0xFFFF ? 0xFFFF : v;\n};\n","/*\n * Some miscellaneous instructions:\n *\n * jmpcc16, jmpcc32, jmp16\n * loop, loope, loopne, jcxz\n * test_cc\n *\n * mov, push, pop\n * pusha, popa\n * xchg, lss\n * lea\n * enter\n * bswap\n * fxsave, fxrstor\n */\n\"use strict\";\n\nCPU.prototype.jmpcc8 = function(condition)\n{\n    var imm8 = this.read_op8s();\n    if(condition)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.jmp_rel16 = function(rel16)\n{\n    var current_cs = this.get_seg(reg_cs);\n\n    // limit ip to 16 bit\n    // ugly\n    this.instruction_pointer -= current_cs;\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\n};\n\nCPU.prototype.jmpcc16 = function(condition)\n{\n    var imm16 = this.read_op16();\n    if(condition)\n    {\n        this.jmp_rel16(imm16);\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\n\nCPU.prototype.jmpcc32 = function(condition)\n{\n    var imm32s = this.read_op32s();\n    if(condition)\n    {\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\n        //   since read_op32s modifies instruction_pointer\n\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.cmovcc16 = function(condition)\n{\n    var data = this.read_e16();\n    if(condition)\n    {\n        this.write_g16(data);\n    }\n};\n\nCPU.prototype.cmovcc32 = function(condition)\n{\n    var data = this.read_e32s();\n    if(condition)\n    {\n        this.write_g32(data);\n    }\n};\n\nCPU.prototype.setcc = function(condition)\n{\n    this.set_e8(condition ? 1 : 0)\n};\n\nCPU.prototype.loopne = function(imm8s)\n{\n    if(this.decr_ecx_asize() && !this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loope = function(imm8s)\n{\n    if(this.decr_ecx_asize() && this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loop = function(imm8s)\n{\n    if(this.decr_ecx_asize())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.jcxz = function(imm8s)\n{\n    if(this.get_reg_asize(reg_ecx) === 0)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\n/**\n * @return {number}\n * @const\n */\nCPU.prototype.getcf = function()\n{\n    if(this.flags_changed & 1)\n    {\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & 1;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getpf = function()\n{\n    if(this.flags_changed & flag_parity)\n    {\n        // inverted lookup table\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\n    }\n    else\n    {\n        return this.flags & flag_parity;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getaf = function()\n{\n    if(this.flags_changed & flag_adjust)\n    {\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\n    }\n    else\n    {\n        return this.flags & flag_adjust;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getzf = function()\n{\n    if(this.flags_changed & flag_zero)\n    {\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_zero;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getsf = function()\n{\n    if(this.flags_changed & flag_sign)\n    {\n        return this.last_result >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_sign;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getof = function()\n{\n    if(this.flags_changed & flag_overflow)\n    {\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_overflow;\n    }\n};\n\nCPU.prototype.test_o = CPU.prototype.getof;\nCPU.prototype.test_b = CPU.prototype.getcf;\nCPU.prototype.test_z = CPU.prototype.getzf;\nCPU.prototype.test_s = CPU.prototype.getsf;\nCPU.prototype.test_p = CPU.prototype.getpf;\n\nCPU.prototype.test_be = function()\n{\n    // Idea:\n    //    return this.last_op1 <= this.last_op2;\n    return this.getcf() || this.getzf();\n}\n\nCPU.prototype.test_l = function()\n{\n    // Idea:\n    //    return this.last_add_result < this.last_op2;\n    return !this.getsf() !== !this.getof();\n}\n\nCPU.prototype.test_le = function()\n{\n    // Idea:\n    //    return this.last_add_result <= this.last_op2;\n    return this.getzf() || !this.getsf() !== !this.getof();\n}\n\n\n\nCPU.prototype.push16 = function(imm16)\n{\n    var sp = this.get_stack_pointer(-2);\n\n    this.safe_write16(sp, imm16);\n    this.adjust_stack_reg(-2);\n}\n\nCPU.prototype.push32 = function(imm32)\n{\n    var sp = this.get_stack_pointer(-4);\n\n    this.safe_write32(sp, imm32);\n    this.adjust_stack_reg(-4);\n}\n\nCPU.prototype.pop16 = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read16(sp);\n\n    this.adjust_stack_reg(2);\n    return result;\n}\n\nCPU.prototype.pop32s = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read32s(sp);\n\n    this.adjust_stack_reg(4);\n    return result;\n}\n\nCPU.prototype.pusha16 = function()\n{\n    var temp = this.reg16[reg_sp];\n\n    // make sure we don't get a pagefault after having\n    // pushed several registers already\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\n\n    this.push16(this.reg16[reg_ax]);\n    this.push16(this.reg16[reg_cx]);\n    this.push16(this.reg16[reg_dx]);\n    this.push16(this.reg16[reg_bx]);\n    this.push16(temp);\n    this.push16(this.reg16[reg_bp]);\n    this.push16(this.reg16[reg_si]);\n    this.push16(this.reg16[reg_di]);\n}\n\nCPU.prototype.pusha32 = function()\n{\n    var temp = this.reg32s[reg_esp];\n\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\n\n    this.push32(this.reg32s[reg_eax]);\n    this.push32(this.reg32s[reg_ecx]);\n    this.push32(this.reg32s[reg_edx]);\n    this.push32(this.reg32s[reg_ebx]);\n    this.push32(temp);\n    this.push32(this.reg32s[reg_ebp]);\n    this.push32(this.reg32s[reg_esi]);\n    this.push32(this.reg32s[reg_edi]);\n}\n\nCPU.prototype.popa16 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(15));\n\n    this.reg16[reg_di] = this.pop16();\n    this.reg16[reg_si] = this.pop16();\n    this.reg16[reg_bp] = this.pop16();\n    this.adjust_stack_reg(2);\n    this.reg16[reg_bx] = this.pop16();\n    this.reg16[reg_dx] = this.pop16();\n    this.reg16[reg_cx] = this.pop16();\n    this.reg16[reg_ax] = this.pop16();\n}\n\nCPU.prototype.popa32 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(31));\n\n    this.reg32s[reg_edi] = this.pop32s();\n    this.reg32s[reg_esi] = this.pop32s();\n    this.reg32s[reg_ebp] = this.pop32s();\n    this.adjust_stack_reg(4);\n    this.reg32s[reg_ebx] = this.pop32s();\n    this.reg32s[reg_edx] = this.pop32s();\n    this.reg32s[reg_ecx] = this.pop32s();\n    this.reg32s[reg_eax] = this.pop32s();\n}\n\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\n        tmp = this.reg8[mod];\n\n    this.reg8[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 2 & 14,\n        tmp = this.reg16[mod];\n\n    this.reg16[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16r = function(operand)\n{\n    var temp = this.reg16[reg_ax];\n    this.reg16[reg_ax] = this.reg16[operand];\n    this.reg16[operand] = temp;\n}\n\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 3 & 7,\n        tmp = this.reg32s[mod];\n\n    this.reg32s[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg32r = function(operand)\n{\n    var temp = this.reg32s[reg_eax];\n    this.reg32s[reg_eax] = this.reg32s[operand];\n    this.reg32s[operand] = temp;\n}\n\nCPU.prototype.lss16 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read16(addr),\n        new_seg = this.safe_read16(addr + 2 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\n}\n\nCPU.prototype.lss32 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read32s(addr),\n        new_seg = this.safe_read16(addr + 4 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\n}\n\nCPU.prototype.enter16 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push16(this.reg16[reg_bp]);\n    var frame_temp = this.reg16[reg_sp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg16[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 2;\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push16(frame_temp);\n    }\n    this.reg16[reg_bp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.enter32 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push32(this.reg32s[reg_ebp]);\n    var frame_temp = this.reg32s[reg_esp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg32s[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 4;\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push32(frame_temp);\n    }\n    this.reg32s[reg_ebp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.bswap = function(reg)\n{\n    var temp = this.reg32s[reg];\n\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\n}\n\nCPU.prototype.fxsave = function(addr)\n{\n    this.writable_or_pagefault(addr, 512);\n\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\n\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\n    }\n\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\n    // instruction may not save these registers. This behavior is\n    // implementation dependent.\n    for(let i = 0; i < 8; i++)\n    {\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\n    }\n};\n\nCPU.prototype.fxrstor = function(addr)\n{\n    this.translate_address_read(addr | 0);\n    this.translate_address_read(addr + 511 | 0);\n\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\n\n    if(new_mxcsr & ~MXCSR_MASK)\n    {\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n        this.trigger_gp(0);\n    }\n\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\n\n    this.mxcsr = new_mxcsr;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\n    }\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\n    }\n};\n","\"use strict\";\n\nvar t = [];\nvar t16 = [];\nvar t32 = [];\n\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\n\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\nt16[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\nt16[0x0F] = cpu => {\n    cpu.table0F_16[cpu.read_op0F()](cpu);\n};\nt32[0x0F] = cpu => {\n    cpu.table0F_32[cpu.read_op0F()](cpu);\n};\n\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\nt16[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\nt32[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\n\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\nt16[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\nt[0x27] = cpu => { cpu.bcd_daa(); };\n\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\nt[0x2F] = cpu => { cpu.bcd_das(); };\n\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\nt[0x37] = cpu => { cpu.bcd_aaa(); };\n\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\nt[0x3F] = cpu => { cpu.bcd_aas(); };\n\n\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\n\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\n\n\nt16[0x60] = cpu => { cpu.pusha16(); };\nt32[0x60] = cpu => { cpu.pusha32(); };\nt16[0x61] = cpu => { cpu.popa16(); };\nt32[0x61] = cpu => { cpu.popa32(); };\n\nt[0x62] = cpu => {\n    // bound\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\n    dbg_assert(false);\n};\nt[0x63] = cpu => { cpu.read_modrm_byte();\n    // arpl\n    //dbg_log(\"arpl\", LOG_CPU);\n    if(cpu.protected_mode && !cpu.vm86_mode())\n    {\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\n    }\n    else\n    {\n        dbg_log(\"arpl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n};\n\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\n\nt[0x66] = cpu => {\n    // Operand-size override prefix\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0x67] = cpu => {\n    // Address-size override prefix\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\n\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\n\nt16[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\n};\nt32[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\n};\n\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\n\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\n};\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\n};\n\nt[0x6C] = cpu => { insb(cpu); };\nt16[0x6D] = cpu => { insw(cpu); };\nt32[0x6D] = cpu => { insd(cpu); };\nt[0x6E] = cpu => { outsb(cpu); };\nt16[0x6F] = cpu => { outsw(cpu); };\nt32[0x6F] = cpu => { outsd(cpu); };\n\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\n\nt[0x80] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\n    }\n};\nt16[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\n    }\n};\nt32[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\n    }\n};\nt[0x82] = t[0x80]; // alias\nt16[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\n    }\n};\nt32[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\n    }\n};\n\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\n\n\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\nt16[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\n};\nt32[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\n};\n\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\n\nt[0x8A] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g8(data);\n};\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(data);\n};\n\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\n\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\n    // lea\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    // override prefix, so modrm_resolve does not return the segment part\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\n\nt[0x8E] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n    var data = cpu.read_e16();\n    cpu.switch_seg(mod, data);\n\n    if(mod === reg_ss)\n    {\n        // run next instruction, so no interrupts are handled\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n    }\n};\n\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\n    // pop\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\n\n    cpu.adjust_stack_reg(2);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.adjust_stack_reg(-2);\n        cpu.safe_write16(addr, sp);\n        cpu.adjust_stack_reg(2);\n    } else {\n        cpu.write_reg_e16(sp);\n    }\n};\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\n\n    // change esp first, then resolve modrm address\n    cpu.adjust_stack_reg(4);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n        // Before attempting a write that might cause a page fault,\n        // we must set esp to the old value. Fuck Intel.\n        cpu.adjust_stack_reg(-4);\n        cpu.safe_write32(addr, sp);\n        cpu.adjust_stack_reg(4);\n    } else {\n        cpu.write_reg_e32(sp);\n    }\n};\n\nt[0x90] = cpu => { };\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\n\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\n\nt16[0x9A] = cpu => {\n    // callf\n    var new_ip = cpu.read_op16();\n    var new_cs = cpu.read_disp16();\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0x9A] = cpu => {\n    var new_ip = cpu.read_op32s();\n    var new_cs = cpu.read_disp16();\n\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        if(new_ip & 0xFFFF0000)\n        {\n            throw cpu.debug.unimpl(\"#GP handler\");\n        }\n    }\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0x9B] = cpu => {\n    // fwait: check for pending fpu exceptions\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\n    {\n        // task switched and MP bit is set\n        cpu.trigger_nm();\n    }\n    else\n    {\n        if(cpu.fpu)\n        {\n            cpu.fpu.fwait();\n        }\n        else\n        {\n            // EM bit isn't checked\n            // If there's no FPU, do nothing\n        }\n    }\n};\nt16[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        cpu.push16(cpu.get_eflags());\n    }\n};\nt32[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        // trap to virtual 8086 monitor\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        // vm and rf flag are cleared in image stored on the stack\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\n    }\n};\nt16[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\n\n    if(cpu.flags & flag_trap)\n    {\n        // XXX: Problems with fdgame\n        //cpu.clear_prefixes();\n        //cpu.cycle_internal();\n        cpu.flags &= ~flag_trap;\n        //cpu.instruction_pointer = cpu.previous_ip;\n        //cpu.raise_exception(1);\n    }\n    else\n    {\n        cpu.handle_irqs();\n    }\n};\nt32[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags(cpu.pop32s());\n    cpu.handle_irqs();\n};\nt[0x9E] = cpu => {\n    // sahf\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\n    cpu.flags_changed = 0;\n};\nt[0x9F] = cpu => {\n    // lahf\n    cpu.reg8[reg_ah] = cpu.get_eflags();\n};\n\nt[0xA0] = cpu => {\n    // mov\n    var data = cpu.safe_read8(cpu.read_moffs());\n    cpu.reg8[reg_al] = data;\n};\nt16[0xA1] = cpu => {\n    // mov\n    var data = cpu.safe_read16(cpu.read_moffs());\n    cpu.reg16[reg_ax] = data;\n};\nt32[0xA1] = cpu => {\n    var data = cpu.safe_read32s(cpu.read_moffs());\n    cpu.reg32s[reg_eax] = data;\n};\nt[0xA2] = cpu => {\n    // mov\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\n};\nt16[0xA3] = cpu => {\n    // mov\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\n};\nt32[0xA3] = cpu => {\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\n};\n\nt[0xA4] = cpu => { cpu.movsb(); };\nt16[0xA5] = cpu => { cpu.movsw(); };\nt32[0xA5] = cpu => { cpu.movsd(); };\nt[0xA6] = cpu => { cmpsb(cpu); };\nt16[0xA7] = cpu => { cmpsw(cpu); };\nt32[0xA7] = cpu => { cmpsd(cpu); };\n\nt[0xA8] = cpu => {\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\n};\nt16[0xA9] = cpu => {\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\n};\nt32[0xA9] = cpu => {\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\n};\n\nt[0xAA] = cpu => { stosb(cpu); };\nt16[0xAB] = cpu => { stosw(cpu); };\nt32[0xAB] = cpu => { stosd(cpu); };\nt[0xAC] = cpu => { lodsb(cpu); };\nt16[0xAD] = cpu => { lodsw(cpu); };\nt32[0xAD] = cpu => { lodsd(cpu); };\nt[0xAE] = cpu => { scasb(cpu); };\nt16[0xAF] = cpu => { scasw(cpu); };\nt32[0xAF] = cpu => { scasd(cpu); };\n\n\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\n\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\n\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt16[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt32[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n    var ip = cpu.pop32s();\n\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt16[0xC3] = cpu => {\n    // retn\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    cpu.diverged();\n};\nt32[0xC3] = cpu => {\n    // retn\n    var ip = cpu.pop32s();\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.diverged();\n};\n\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_es);\n};\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_es);\n};\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ds);\n};\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ds);\n};\n\nt[0xC6] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\n    } else {\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\n    }\n}\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\n    } else {\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\n    }\n};\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\n    } else {\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\n    }\n}\n\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\nt16[0xC9] = cpu => {\n    // leave\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 2 | 0);\n    cpu.reg16[reg_bp] = new_bp;\n};\nt32[0xC9] = cpu => {\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 4 | 0);\n    cpu.reg32s[reg_ebp] = new_ebp;\n};\nt16[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, imm16);\n    cpu.diverged();\n};\nt32[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, imm16);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xCC] = cpu => {\n    // INT3\n    // TODO: inhibit iopl checks\n    dbg_log(\"INT3\", LOG_CPU);\n    cpu.call_interrupt_vector(3, true, false);\n    cpu.diverged();\n};\nt[0xCD] = cpu => {\n    // INT\n    var imm8 = cpu.read_op8();\n    cpu.call_interrupt_vector(imm8, true, false);\n    cpu.diverged();\n};\nt[0xCE] = cpu => {\n    // INTO\n    dbg_log(\"INTO\", LOG_CPU);\n    if(cpu.getof())\n    {\n        // TODO: inhibit iopl checks\n        cpu.call_interrupt_vector(4, true, false);\n    }\n    cpu.diverged();\n};\n\nt16[0xCF] = cpu => {\n    // iret\n    cpu.iret16();\n    cpu.diverged();\n};\nt32[0xCF] = cpu => {\n    cpu.iret32();\n    cpu.diverged();\n};\n\nt[0xD0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, 1); break;\n        case 1: result = cpu.ror8(op1, 1); break;\n        case 2: result = cpu.rcl8(op1, 1); break;\n        case 3: result = cpu.rcr8(op1, 1); break;\n        case 4: result = cpu.shl8(op1, 1); break;\n        case 5: result = cpu.shr8(op1, 1); break;\n        case 6: result = cpu.shl8(op1, 1); break;\n        case 7: result = cpu.sar8(op1, 1); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, 1); break;\n        case 1: result = cpu.ror16(op1, 1); break;\n        case 2: result = cpu.rcl16(op1, 1); break;\n        case 3: result = cpu.rcr16(op1, 1); break;\n        case 4: result = cpu.shl16(op1, 1); break;\n        case 5: result = cpu.shr16(op1, 1); break;\n        case 6: result = cpu.shl16(op1, 1); break;\n        case 7: result = cpu.sar16(op1, 1); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, 1); break;\n        case 1: result = cpu.ror32(op1, 1); break;\n        case 2: result = cpu.rcl32(op1, 1); break;\n        case 3: result = cpu.rcr32(op1, 1); break;\n        case 4: result = cpu.shl32(op1, 1); break;\n        case 5: result = cpu.shr32(op1, 1); break;\n        case 6: result = cpu.shl32(op1, 1); break;\n        case 7: result = cpu.sar32(op1, 1); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD2] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD4] = cpu => {\n    cpu.bcd_aam(cpu.read_op8());\n};\nt[0xD5] = cpu => {\n    cpu.bcd_aad(cpu.read_op8());\n};\n\nt[0xD6] = cpu => {\n    // salc\n    cpu.reg8[reg_al] = -cpu.getcf();\n};\nt[0xD7] = cpu => {\n    // xlat\n    if(cpu.is_asize_32())\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\n    }\n};\n\nt[0xD8] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\n};\nt[0xD9] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\n};\nt[0xDA] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\n};\nt[0xDB] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\n};\nt[0xDC] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\n};\nt[0xDD] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\n};\nt[0xDE] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\n};\nt[0xDF] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\n};\n\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\n\nt[0xE4] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xE6] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt16[0xE8] = cpu => {\n    // call\n    var imm16 = cpu.read_op16();\n    cpu.push16(cpu.get_real_eip());\n\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE8] = cpu => {\n    // call\n    var imm32s = cpu.read_op32s();\n    cpu.push32(cpu.get_real_eip());\n\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xE9] = cpu => {\n    // jmp\n    var imm16 = cpu.read_op16();\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE9] = cpu => {\n    // jmp\n    var imm32s = cpu.read_op32s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xEA] = cpu => {\n    // jmpf\n    var ip = cpu.read_op16();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xEA] = cpu => {\n    // jmpf\n    var new_ip = cpu.read_op32s();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(new_ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt[0xEB] = cpu => {\n    // jmp near\n    var imm8 = cpu.read_op8s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xEC] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xEE] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt[0xF0] = cpu => {\n    // lock\n    //dbg_log(\"lock\", LOG_CPU);\n\n    // TODO\n    // This triggers UD when used with\n    // some instructions that don't write to memory\n    cpu.run_prefix_instruction();\n};\nt[0xF1] = cpu => {\n    // INT1\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\n    throw cpu.debug.unimpl(\"int1 instruction\");\n};\n\nt[0xF2] = cpu => {\n    // repnz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPNZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\nt[0xF3] = cpu => {\n    // repz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0xF4] = cpu => {\n    cpu.hlt_op();\n};\n\nt[0xF5] = cpu => {\n    // cmc\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\n    cpu.flags_changed &= ~1;\n};\n\nt[0xF6] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 1:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 2:\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\n            break;\n        case 4:\n            var data = cpu.read_e8(); cpu.mul8(data);\n            break;\n        case 5:\n            var data = cpu.read_e8s(); cpu.imul8(data);\n            break;\n        case 6:\n            var data = cpu.read_e8(); cpu.div8(data);\n            break;\n        case 7:\n            var data = cpu.read_e8s(); cpu.idiv8(data);\n            break;\n    }\n};\n\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 1:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 2:\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\n            break;\n        case 4:\n            var data = cpu.read_e16(); cpu.mul16(data);\n            break;\n        case 5:\n            var data = cpu.read_e16s(); cpu.imul16(data);\n            break;\n        case 6:\n            var data = cpu.read_e16(); cpu.div16(data);\n            break;\n        case 7:\n            var data = cpu.read_e16s(); cpu.idiv16(data);\n            break;\n    }\n};\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 1:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 2:\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\n            break;\n        case 4:\n            var data = cpu.read_e32(); cpu.mul32(data);\n            break;\n        case 5:\n            var data = cpu.read_e32s(); cpu.imul32(data);\n            break;\n        case 6:\n            var data = cpu.read_e32(); cpu.div32(data);\n            break;\n        case 7:\n            var data = cpu.read_e32s(); cpu.idiv32(data);\n            break;\n    }\n};\n\nt[0xF8] = cpu => {\n    // clc\n    cpu.flags &= ~flag_carry;\n    cpu.flags_changed &= ~1;\n};\nt[0xF9] = cpu => {\n    // stc\n    cpu.flags |= flag_carry;\n    cpu.flags_changed &= ~1;\n};\n\nt[0xFA] = cpu => {\n    // cli\n    //dbg_log(\"interrupts off\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags &= ~flag_interrupt;\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags &= ~flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"cli #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n};\nt[0xFB] = cpu => {\n    // sti\n    //dbg_log(\"interrupts on\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags |= flag_interrupt;\n\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n\n        cpu.handle_irqs();\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags |= flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"sti #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n\n};\n\nt[0xFC] = cpu => {\n    // cld\n    cpu.flags &= ~flag_direction;\n};\nt[0xFD] = cpu => {\n    // std\n    cpu.flags |= flag_direction;\n};\n\nt[0xFE] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte & 56;\n\n    if(mod === 0)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\n    }\n    else if(mod === 8)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\n    }\n    else\n    {\n        cpu.todo();\n    }\n};\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e16();\n            cpu.push16(cpu.get_real_eip());\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e16();\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // 6, push\n            var data = cpu.read_e16();\n            cpu.push16(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e32s();\n            cpu.push32(cpu.get_real_eip());\n\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e32s();\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // push\n            var data = cpu.read_e32s();\n            cpu.push32(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\n\nvar table16 = [];\nvar table32 = [];\nCPU.prototype.table16 = table16;\nCPU.prototype.table32 = table32;\n\nfor(var i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table16[i] = table32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table16[i] = t16[i];\n        table32[i] = t32[i];\n    }\n}\n\nt = [];\nt16 = [];\nt32 = [];\n\n// 0F ops start here\n\nt[0x00] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        // No GP, UD is correct here\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            // sldt\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 1:\n            // str\n            cpu.set_e16(cpu.sreg[reg_tr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 2:\n            // lldt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_ldt(data);\n            break;\n        case 3:\n            // ltr\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_tr(data);\n            break;\n        case 4:\n            cpu.verr(cpu.read_e16());\n            break;\n        case 5:\n            cpu.verw(cpu.read_e16());\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0x01] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    if(mod === 4)\n    {\n        // smsw\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\n        {\n            cpu.set_e32(cpu.cr[0]);\n        }\n        else\n        {\n            cpu.set_e16(cpu.cr[0]);\n        }\n        return;\n    }\n    else if(mod === 6)\n    {\n        // lmsw\n        if(cpu.cpl)\n        {\n            cpu.trigger_gp(0);\n        }\n\n        var cr0 = cpu.read_e16();\n\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\n\n        if(cpu.protected_mode)\n        {\n            // lmsw cannot be used to switch back\n            cr0 |= CR0_PE;\n        }\n\n        cpu.set_cr0(cr0);\n        return;\n    }\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        // only memory\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n    switch(mod)\n    {\n        case 0:\n            // sgdt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.gdtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\n            break;\n        case 1:\n            // sidt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.idtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\n            break;\n        case 2:\n            // lgdt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.gdtr_size = size;\n            cpu.gdtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.gdtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\n            //cpu.debug.dump_state();\n            //cpu.debug.dump_regs_short();\n            //cpu.debug.dump_gdt_ldt();\n            break;\n        case 3:\n            // lidt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.idtr_size = size;\n            cpu.idtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.idtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\n            break;\n        case 7:\n            // flush translation lookaside buffer\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            cpu.invlpg(addr);\n            break;\n        default:\n            dbg_log(mod);\n            cpu.todo();\n    }\n};\n\nt16[0x02] = cpu => { cpu.read_modrm_byte();\n    // lar\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\n};\nt32[0x02] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\n};\n\nt16[0x03] = cpu => { cpu.read_modrm_byte();\n    // lsl\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\n};\nt32[0x03] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\n};\n\nt[0x04] = cpu => { cpu.undefined_instruction(); };\nt[0x05] = cpu => { cpu.undefined_instruction(); };\n\nt[0x06] = cpu => {\n    // clts\n    if(cpu.cpl)\n    {\n        dbg_log(\"clts #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        //dbg_log(\"clts\", LOG_CPU);\n        cpu.cr[0] &= ~CR0_TS;\n    }\n};\n\nt[0x07] = cpu => { cpu.undefined_instruction(); };\nt[0x08] = cpu => {\n    // invd\n    cpu.todo();\n};\n\nt[0x09] = cpu => {\n    if(cpu.cpl)\n    {\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    // wbinvd\n};\n\n\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\nt[0x0B] = cpu => {\n    // UD2\n    cpu.trigger_ud();\n};\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\n\nt[0x0D] = cpu => {\n    // nop\n    cpu.todo();\n};\n\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\n\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\nt[0x12] = cpu => {\n    // movlpd xmm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem64s();\n    cpu.write_xmm64(data[0], data[1]);\n};\nt[0x13] = cpu => {\n    // movlpd xmm/m64, xmm\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x18] = cpu => { cpu.read_modrm_byte();\n    // prefetch\n    // nop for us\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\nt[0x1E] = cpu => { cpu.unimplemented_sse(); };\nt[0x1F] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\n\nt[0x20] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\n\n    // mov addr, cr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.write_reg_e32(cpu.cr[0]);\n            break;\n        case 2:\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\n            cpu.write_reg_e32(cpu.cr[2]);\n            break;\n        case 3:\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\n            cpu.write_reg_e32(cpu.cr[3]);\n            break;\n        case 4:\n            cpu.write_reg_e32(cpu.cr[4]);\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\n\nt[0x21] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\n\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x22] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var data = cpu.read_reg_e32s();\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\n\n    // mov cr, addr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.set_cr0(data);\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 2:\n            cpu.cr[2] = data;\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 3:\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\n            data &= ~0b111111100111;\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\n            cpu.cr[3] = data;\n            cpu.clear_tlb();\n\n            //dump_page_directory();\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\n            break;\n\n        case 4:\n            cpu.set_cr4(data);\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\nt[0x23] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\n\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x24] = cpu => { cpu.undefined_instruction(); };\nt[0x25] = cpu => { cpu.undefined_instruction(); };\nt[0x26] = cpu => { cpu.undefined_instruction(); };\nt[0x27] = cpu => { cpu.undefined_instruction(); };\n\nt[0x28] = cpu => {\n    // movaps xmm, xmm/m128\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem128s();\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n};\nt[0x29] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movapd xmm/m128, xmm\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movaps xmm/m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n};\nt[0x2A] = cpu => { cpu.unimplemented_sse(); };\nt[0x2B] = cpu => { cpu.unimplemented_sse(); };\nt[0x2C] = cpu => { cpu.unimplemented_sse(); };\nt[0x2D] = cpu => { cpu.unimplemented_sse(); };\nt[0x2E] = cpu => { cpu.unimplemented_sse(); };\nt[0x2F] = cpu => { cpu.unimplemented_sse(); };\n\n// wrmsr\nt[0x30] = cpu => {\n    // wrmsr - write maschine specific register\n\n    if(cpu.cpl)\n    {\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n    var low = cpu.reg32s[reg_eax];\n    var high = cpu.reg32s[reg_edx];\n\n    if(index !== IA32_SYSENTER_ESP)\n    {\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\n    }\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            cpu.sysenter_cs = low & 0xFFFF;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            cpu.sysenter_eip = low;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            cpu.sysenter_esp = low;\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case IA32_KERNEL_GS_BASE:\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\n            dbg_log(\"GS Base written\", LOG_CPU);\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n};\n\nt[0x31] = cpu => {\n    // rdtsc - read timestamp counter\n\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\n    {\n        var n = v86.microtick() - cpu.tsc_offset;\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\n\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\n\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\n    }\n    else\n    {\n        cpu.trigger_gp(0);\n    }\n};\n\nt[0x32] = cpu => {\n    // rdmsr - read maschine specific register\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\n\n    var low = 0;\n    var high = 0;\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            low = cpu.sysenter_cs;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            low = cpu.sysenter_eip;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            low = cpu.sysenter_esp;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var n = v86.microtick() - cpu.tsc_offset;\n            low = n * TSC_RATE;\n            high = n * (TSC_RATE / 0x100000000);\n            break;\n\n        case IA32_PLATFORM_ID:\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            if(ENABLE_ACPI)\n            {\n                low = APIC_ADDRESS;\n\n                if(cpu.apic_enabled)\n                {\n                    low |= IA32_APIC_BASE_EN;\n                }\n            }\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            break;\n\n        case IA32_RTIT_CTL:\n            // linux4\n            break;\n\n        case MSR_SMI_COUNT:\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case MSR_PKG_C2_RESIDENCY:\n            break;\n\n        case MSR_EBC_FREQUENCY_ID:\n            low = 1 << 24;\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n\n    cpu.reg32s[reg_eax] = low;\n    cpu.reg32s[reg_edx] = high;\n};\n\nt[0x33] = cpu => {\n    // rdpmc\n    cpu.todo();\n};\n\nt[0x34] = cpu => {\n    // sysenter\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\n\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\n\n    cpu.instruction_pointer = cpu.sysenter_eip;\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\n\n    cpu.sreg[reg_cs] = seg;\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 0;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 8;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x35] = cpu => {\n    // sysexit\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\n\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\n\n    cpu.sreg[reg_cs] = seg + 16 | 3;\n\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 3;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 24 | 3;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x36] = cpu => { cpu.undefined_instruction(); };\n\nt[0x37] = cpu => {\n    // getsec\n    cpu.todo();\n};\n\n// sse3+\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\n\n// cmov\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\n\n\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\nt[0x57] = cpu => {\n    // xorps xmm, xmm/mem128\n    // xorpd xmm, xmm/mem128\n    // Note: Same code as pxor\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_xmm_mem128s();\n    let destination = cpu.read_xmm128s();\n\n    cpu.write_xmm128s(\n        source[0] ^ destination[0],\n        source[1] ^ destination[1],\n        source[2] ^ destination[2],\n        source[3] ^ destination[3]\n    );\n};\n\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x60] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\n        );\n    }\n    else\n    {\n        // punpcklbw mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let byte0 = destination_low & 0xFF;\n        let byte1 = source & 0xFF;\n        let byte2 = (destination_low >> 8) & 0xFF;\n        let byte3 = (source >> 8) & 0xFF;\n        let byte4 = (destination_low >> 16) & 0xFF;\n        let byte5 = (source >> 16) & 0xFF;\n        let byte6 = destination_low >>> 24;\n        let byte7 = source >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x61] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklwd xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination16[0] | source16[0] << 16,\n            destination16[1] | source16[1] << 16,\n            destination16[2] | source16[2] << 16,\n            destination16[3] | source16[3] << 16\n        );\n    }\n    else\n    {\n        // punpcklwd mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let word0 = destination_low & 0xFFFF;\n        let word1 = source & 0xFFFF;\n        let word2 = destination_low >>> 16;\n        let word3 = source >>> 16;\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x62] = cpu => {\n    // punpckldq mm, mm/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem32s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n    let low = destination_low;\n    let high = source;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x63] = cpu => {\n    // packsswb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\n\n    let high = 0;\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x64] = cpu => {\n    // pcmpgtb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x65] = cpu => {\n    // pcmpgtw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x66] = cpu => {\n    // pcmpgtd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low > source[0] ? -1 : 0;\n    let high = destination_high > source[1] ? -1 : 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x67] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 8; i++)\n        {\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\n    }\n    else\n    {\n        // packuswb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = 0;\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\n\n        let high = 0;\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x68] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpckhbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\n        );\n    }\n    else\n    {\n        // punpckhbw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let byte0 = destination_high & 0xFF;\n        let byte1 = source[1] & 0xFF;\n        let byte2 = (destination_high >> 8) & 0xFF;\n        let byte3 = (source[1] >> 8) & 0xFF;\n        let byte4 = (destination_high >> 16) & 0xFF;\n        let byte5 = (source[1] >> 16) & 0xFF;\n        let byte6 = destination_high >>> 24;\n        let byte7 = source[1] >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x69] = cpu => {\n    // punpckhwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = destination_high & 0xFFFF;\n    let word1 = source[1] & 0xFFFF;\n    let word2 = destination_high >>> 16;\n    let word3 = source[1] >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6A] = cpu => {\n    // punpckhdq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_high;\n    let high = source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6B] = cpu => {\n    // packssdw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= cpu.saturate_sd_to_sw(destination_low);\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\n\n    let high = 0;\n    high |= cpu.saturate_sd_to_sw(source[0]);\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\nt[0x6E] = cpu => {\n    // movd mm, r/m32\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        let data = cpu.read_e32s();\n        cpu.write_xmm128s(data, 0, 0, 0);\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_e32s();\n        cpu.write_mmx64s(data, 0);\n    }\n};\nt[0x6F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm, xmm/mem128\n        let data = cpu.read_xmm_mem128s();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm, xmm/m128\n        let data = cpu.read_xmm_mem128s_unaligned();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx_mem64s();\n        cpu.write_mmx64s(data[0], data[1]);\n    }\n};\n\nt[0x70] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // pshufd xmm, xmm/mem128\n        let source = cpu.read_xmm_mem128s();\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[order & 3],\n            source[order >> 2 & 3],\n            source[order >> 4 & 3],\n            source[order >> 6 & 3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\n    {\n        // pshuflw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\n            source[2],\n            source[3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // pshufhw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[0],\n            source[1],\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\n        );\n    }\n    else\n    {\n        // pshufw mm1, mm2/m64, imm8\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let order = cpu.read_op8();\n\n        let word0_shift = order & 0b11;\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\n        let word1_shift = (order >> 2) & 0b11;\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\n        let low = word0 | word1 << 16;\n\n        let word2_shift = (order >> 4) & 0b11;\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\n        let word3_shift = (order >>> 6);\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0x71] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlw, psraw, psllw\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = (destination_low & 0xFFFF) >>> shift;\n                var word1 = (destination_low >>> 16) >>> shift;\n                low = word0 | word1 << 16;\n\n                var word2 = (destination_high & 0xFFFF) >>> shift;\n                var word3 = (destination_high >>> 16) >>> shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psraw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 15) {\n                shift = 16;\n            }\n\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n            var low = word0 | word1 << 16;\n\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n            var high = word2 | word3 << 16;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n                var word1 = (destination_low >>> 16) << shift;\n                low = word0 | word1 << 16;\n\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n                var word3 = (destination_high >>> 16) << shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x72] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrld, psrad, pslld\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift;\n                high = destination_high >>> shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psrad mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 31) {\n                shift = 31;\n            }\n\n            var low = destination_low >> shift;\n            var high = destination_high >> shift;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // pslld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x73] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlq, psllq\n    //     2,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift | (destination_high << (32 - shift));\n                high = destination_high >>> shift;\n            }\n            else if (shift <= 63) {\n                low = destination_high >>> (shift & 0x1F);\n                high = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift | (destination_low >>> (32 - shift));\n            }\n            else if (shift <= 63) {\n                high = destination_low << (shift & 0x1F);\n                low = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x74] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqb xmm, xmm/m128\n        let source64s = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let destination128 = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination128.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // pcmpeqb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source64s = cpu.read_mmx_mem64s();\n        let source8s = new Int8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8s = cpu.reg_mmx8s;\n\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x75] = cpu => {\n    // pcmpeqw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x76] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqd xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] === destination[0] ? -1 : 0,\n            source[1] === destination[1] ? -1 : 0,\n            source[2] === destination[2] ? -1 : 0,\n            source[3] === destination[3] ? -1 : 0\n        );\n    }\n    else\n    {\n        // pcmpeqd mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = destination_low === source[0] ? -1 : 0;\n        let high = destination_high === source[1] ? -1 : 0;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x77] = cpu => {\n    // emms\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.fpu.stack_empty = 0xFF;\n};\n\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\nt[0x7E] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // movq xmm, xmm/mem64\n        let data = cpu.read_xmm_mem64s();\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movd r/m32, xmm\n        let data = cpu.read_xmm64s();\n        cpu.set_e32(data[0]);\n    }\n    else\n    {\n        // movd r/m32, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx64s();\n        cpu.set_e32(data[0]);\n    }\n};\nt[0x7F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm/m64, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let data = cpu.read_mmx64s();\n        cpu.set_mmx_mem64s(data[0], data[1]);\n    }\n};\n\n// jmpcc\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\n\n// setcc\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\n\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\nt16[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0xA2] = cpu => { cpu.cpuid(); };\n\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\n    }\n};\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\n    }\n};\n\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xA6] = cpu => {\n    // obsolete cmpxchg (os/2)\n    cpu.trigger_ud();\n};\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\n\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\nt16[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\n\nt[0xAA] = cpu => {\n    // rsm\n    cpu.todo();\n};\n\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xAE] = cpu => { cpu.read_modrm_byte();\n    // xsave, xrstor, ...\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: // fxsave\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxsave(addr);\n            break;\n\n        case 1: // fxrstor\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxrstor(addr);\n            break;\n\n        case 2: // ldmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            let new_mxcsr = cpu.safe_read32s(addr);\n            if(new_mxcsr & ~MXCSR_MASK)\n            {\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n                cpu.trigger_gp(0);\n            }\n            cpu.mxcsr = new_mxcsr;\n            break;\n\n        case 3: // stmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.safe_write32(addr, cpu.mxcsr);\n            break;\n\n        case 5:\n            // lfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 6:\n            // mfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 7:\n            // sfence or clflush\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        default:\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\n};\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\n};\n\nt[0xB0] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg8\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 1);\n\n        var data = cpu.safe_read8(virt_addr);\n    }\n    else\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\n\n\n    cpu.cmp8(cpu.reg8[reg_al], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, cpu.read_g8());\n        else\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, data);\n\n        cpu.reg8[reg_al] = data;\n    }\n};\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg16/32\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 2);\n\n        var data = cpu.safe_read16(virt_addr);\n    }\n    else\n        data = cpu.read_reg_e16();\n\n    cpu.cmp16(cpu.reg16[reg_ax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, cpu.read_g16());\n        else\n            cpu.write_reg_e16(cpu.read_g16());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, data);\n\n        cpu.reg16[reg_ax] = data;\n    }\n};\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 4);\n\n        var data = cpu.safe_read32s(virt_addr);\n    }\n    else\n    {\n        data = cpu.read_reg_e32s();\n    }\n\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\n        else\n            cpu.write_reg_e32(cpu.read_g32s());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, data);\n\n        cpu.reg32s[reg_eax] = data;\n    }\n};\n\n// lss\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ss);\n};\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ss);\n};\n\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n// lfs, lgs\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_fs);\n};\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_fs);\n};\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_gs);\n};\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_gs);\n};\n\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    var data = cpu.read_e8();\n    cpu.write_g16(data);\n};\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g32(data);\n};\n\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g32(data);\n};\n\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\n    // popcnt\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.popcnt(data));\n};\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.popcnt(data));\n};\n\nt[0xB9] = cpu => {\n    // UD\n    cpu.todo();\n};\n\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\n\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\n};\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\n};\n\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\n};\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\n};\n\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    var data = cpu.read_e8s();\n    cpu.write_g16(data);\n};\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8s();\n    cpu.write_g32(data);\n};\n\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\n\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g32(data);\n};\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\n};\n\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16();\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32();\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\n};\n\n\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\nt[0xC3] = cpu => {\n    // movnti\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n    cpu.set_e32(cpu.read_g32s());\n};\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xC7] = cpu => {\n    cpu.read_modrm_byte();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 1:\n            // cmpxchg8b\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                cpu.trigger_ud();\n            }\n\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.writable_or_pagefault(addr, 8);\n\n            var m64_low = cpu.safe_read32s(addr);\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\n\n            if(cpu.reg32s[reg_eax] === m64_low &&\n               cpu.reg32s[reg_edx] === m64_high)\n            {\n                cpu.flags |= flag_zero;\n\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\n            }\n            else\n            {\n                cpu.flags &= ~flag_zero;\n\n                cpu.reg32s[reg_eax] = m64_low;\n                cpu.reg32s[reg_edx] = m64_high;\n\n                cpu.safe_write32(addr, m64_low);\n                cpu.safe_write32(addr + 4 | 0, m64_high);\n            }\n\n            cpu.flags_changed &= ~flag_zero;\n            break;\n\n        case 6:\n            var has_rand = v86util.has_rand_int();\n\n            if(has_rand)\n            {\n                var rand = v86util.get_rand_int();\n            }\n            else\n            {\n                var rand = 0;\n            }\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\n\n            if(cpu.is_osize_32())\n            {\n                cpu.set_e32(rand);\n            }\n            else\n            {\n                cpu.set_e16(rand);\n            }\n\n            cpu.flags &= ~flags_all;\n            cpu.flags |= has_rand;\n            cpu.flags_changed = 0;\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\n\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xD1] = cpu => {\n    // psrlw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = (destination_low & 0xFFFF) >>> shift;\n        let word1 = (destination_low >>> 16) >>> shift;\n        low = word0 | word1 << 16;\n\n        let word2 = (destination_high & 0xFFFF) >>> shift;\n        let word3 = (destination_high >>> 16) >>> shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD2] = cpu => {\n    // psrld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift;\n        high = destination_high >>> shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD3] = cpu => {\n    // psrlq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift | (destination_high << (32 - shift));\n        high = destination_high >>> shift;\n    }\n    else if (shift <= 63) {\n        low = destination_high >>> (shift & 0x1F);\n        high = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\nt[0xD5] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmullw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\n        );\n    }\n    else\n    {\n        // pmullw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\n        let low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0xD6] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // movq xmm/m64, xmm\n    var data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0xD7] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n\n    // pmovmskb reg, xmm\n    let data = cpu.read_xmm_mem128s();\n    let data8 = new Uint8Array(data.buffer);\n    let result =\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\n    cpu.write_g32(result);\n};\n\nt[0xD8] = cpu => {\n    // psubusb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8 = new Uint8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8 = cpu.reg_mmx8;\n\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD9] = cpu => {\n    // psubusw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\n    if (word0 < 0) {\n        word0 = 0;\n    }\n    if (word1 < 0) {\n        word1 = 0;\n    }\n\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\n    if (word2 < 0) {\n        word2 = 0;\n    }\n    if (word3 < 0) {\n        word3 = 0;\n    }\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDA] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pminub xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source8 = new Uint8Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination8 = new Uint8Array(destination.buffer);\n\n    let result = cpu.create_atom128s(0, 0, 0, 0);\n    let result8 = new Uint8Array(result.buffer);\n\n    for(let i = 0; i < 16; i++)\n    {\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\n    }\n\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n};\nt[0xDB] = cpu => {\n    // pand mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & destination_low;\n    let high = source[1] & destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDC] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusb xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // paddusb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source64s = cpu.read_mmx_mem64s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8 = cpu.reg_mmx8;\n\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDD] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusw mm, mm/m64\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\n        );\n    }\n    else\n    {\n        // paddusw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDE] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmaxub xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\nt[0xDF] = cpu => {\n    // pandn mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & ~destination_low;\n    let high = source[1] & ~destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xE1] = cpu => {\n    // psraw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 15) {\n        shift = 16;\n    }\n\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE2] = cpu => {\n    // psrad mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 31) {\n        shift = 31;\n    }\n\n    let low = destination_low >> shift;\n    let high = destination_high >> shift;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\nt[0xE4] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pmulhuw xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source16 = new Uint16Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination16 = new Uint16Array(destination.buffer);\n\n    cpu.write_xmm128s(\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\n    );\n};\n\nt[0xE5] = cpu => {\n    // pmulhw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\nt[0xE7] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let data = cpu.read_xmm128s();\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\n\nt[0xE8] = cpu => {\n    // psubsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE9] = cpu => {\n    // psubsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xEB] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // por xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] | destination[0],\n            source[1] | destination[1],\n            source[2] | destination[2],\n            source[3] | destination[3]\n        );\n    }\n    else\n    {\n        // por mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] | destination_low;\n        let high = source[1] | destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xEC] = cpu => {\n    // paddsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xED] = cpu => {\n    // paddsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\nt[0xEF] = cpu => {\n    // pxor mm, mm/m64\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] ^ destination[0],\n            source[1] ^ destination[1],\n            source[2] ^ destination[2],\n            source[3] ^ destination[3]\n        );\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] ^ destination_low;\n        let high = source[1] ^ destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF1] = cpu => {\n    // psllw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n        let word1 = (destination_low >>> 16) << shift;\n        low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n        let word3 = (destination_high >>> 16) << shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF2] = cpu => {\n    // pslld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF3] = cpu => {\n    // psllq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift | (destination_low >>> (32 - shift));\n    }\n    else if (shift <= 63) {\n        high = destination_low << (shift & 0x1F);\n        low = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF4] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF5] = cpu => {\n    // pmaddwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\n\n    let low = mul0 + mul1 | 0;\n    let high = mul2 + mul3 | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF8] = cpu => {\n    // psubb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF9] = cpu => {\n    // psubw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low - source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high - source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFA] = cpu => {\n    // psubd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low - source[0];\n    let high = destination_high - source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xFC] = cpu => {\n    // paddb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFD] = cpu => {\n    // paddw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low + source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high + source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFE] = cpu => {\n    // paddd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low + source[0] | 0;\n    let high = destination_high + source[1] | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFF] = cpu => {\n    // Windows 98\n    dbg_log(\"#ud: 0F FF\");\n    cpu.trigger_ud();\n};\n\n\nvar table0F_16 = [];\nvar table0F_32 = [];\nCPU.prototype.table0F_16 = table0F_16;\nCPU.prototype.table0F_32 = table0F_32;\n\nfor(i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table0F_16[i] = table0F_32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table0F_16[i] = t16[i];\n        table0F_32[i] = t32[i];\n    }\n}\n","\"use strict\";\n\nCPU.prototype.debug_init = function()\n{\n    var cpu = this;\n    var debug = {};\n    this.debug = debug;\n\n    /**\n     * wheter or not in step mode\n     * used for debugging\n     * @type {boolean}\n     */\n    debug.step_mode = false;\n    debug.ops = undefined;\n    debug.all_ops = [];\n\n    debug.trace_all = false;\n\n    // \"log\" some information visually to the user.\n    // Also in non-DEBUG modes\n    debug.show = function(x)\n    {\n        if(typeof document !== \"undefined\")\n        {\n            var el = document.getElementById(\"log\");\n\n            if(el)\n            {\n                el.textContent += x + \"\\n\";\n                el.style.display = \"block\";\n                el.scrollTop = 1e9;\n                return;\n            }\n        }\n\n        console.log(x);\n    };\n\n    debug.init = function()\n    {\n        if(!DEBUG) return;\n\n        // used for debugging\n        debug.ops = new CircularQueue(200000);\n\n        if(cpu.io)\n        {\n            // write seabios debug output to console\n            var seabios_debug = \"\";\n\n            cpu.io.register_write(0x402, this, handle); // seabios\n            cpu.io.register_write(0x500, this, handle); // vgabios\n        }\n\n        function handle(out_byte)\n        {\n            if(out_byte === 10)\n            {\n                dbg_log(seabios_debug, LOG_BIOS);\n                seabios_debug = \"\";\n            }\n            else\n            {\n                seabios_debug += String.fromCharCode(out_byte);\n            }\n        }\n    };\n\n    debug.get_regs_short = get_regs_short;\n    debug.dump_regs = dump_regs_short;\n    debug.dump_instructions = dump_instructions;\n    debug.get_instructions = get_instructions;\n    debug.get_state = get_state;\n    debug.dump_state = dump_state;\n    debug.dump_stack = dump_stack;\n\n    debug.dump_page_directory = dump_page_directory;\n    debug.dump_gdt_ldt = dump_gdt_ldt;\n    debug.dump_idt = dump_idt;\n\n    debug.get_memory_dump = get_memory_dump;\n    debug.memory_hex_dump = memory_hex_dump;\n    debug.used_memory_dump = used_memory_dump;\n\n    debug.step = step;\n    debug.run_until = run_until;\n\n    /**\n     * @param {string=} msg\n     */\n    debug.unimpl = function(msg)\n    {\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\n\n        debug.show(s);\n\n        if(DEBUG)\n        {\n            console.trace();\n            return s;\n        }\n        else\n        {\n            debug.show(\"Execution stopped\");\n            return s;\n        }\n        //this.name = \"Unimplemented\";\n    };\n\n    function step()\n    {\n        if(!DEBUG) return;\n\n        if(!cpu.running)\n        {\n            cpu.cycle();\n        }\n\n        dump_regs_short();\n        var now = Date.now();\n\n        cpu.running = false;\n        dump_instructions();\n    }\n\n    function run_until()\n    {\n        if(!DEBUG) return;\n\n        cpu.running = false;\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\n        if(a) while(cpu.instruction_pointer != a) step();\n    }\n\n    // http://ref.x86asm.net/x86reference.xml\n    // for debuggin\" purposes\n    var opcode_map = [\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\n    ];\n\n    debug.logop = function(_ip, op)\n    {\n        if(!DEBUG || !debug.step_mode)\n        {\n            return;\n        }\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            debug.all_ops.push(_ip, op);\n        }\n        else if(debug.ops)\n        {\n            debug.ops.add(_ip);\n            debug.ops.add(op);\n        }\n    };\n\n    function dump_stack(start, end)\n    {\n        if(!DEBUG) return;\n\n        var esp = cpu.reg32[reg_esp];\n        dbg_log(\"========= STACK ==========\");\n\n        if(end >= start || end === undefined)\n        {\n            start = 5;\n            end = -5;\n        }\n\n        for(var i = start; i > end; i--)\n        {\n            var line = \"    \";\n\n            if(!i) line = \"=>  \";\n\n            line += h(i, 2) + \" | \";\n\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\n        }\n    }\n\n    function get_state(where)\n    {\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\n        var flags = cpu.get_eflags();\n        var iopl = cpu.getiopl();\n        var cpl = cpu.cpl;\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\n\n        var flag_names = {\n            [flag_carry]: \"c\",\n            [flag_parity]: \"p\",\n            [flag_adjust]: \"a\",\n            [flag_zero]: \"z\",\n            [flag_sign]: \"s\",\n            [flag_trap]: \"t\",\n            [flag_interrupt]: \"i\",\n            [flag_direction]: \"d\",\n            [flag_overflow]: \"o\",\n        };\n        var flag_string = \"\";\n\n        for(var i = 0; i < 16; i++)\n        {\n            if(flag_names[1 << i])\n            {\n                if(flags & 1 << i)\n                {\n                    flag_string += flag_names[1 << i];\n                }\n                else\n                {\n                    flag_string += \" \";\n                }\n            }\n        }\n\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\n                \" ss:esp=\" + ss_esp +\n                \" ssize=\" + (+cpu.stack_size_32) +\n                (where ? \" in \" + where : \"\"));\n    }\n\n    function dump_state(where)\n    {\n        if(!DEBUG) return;\n\n        dbg_log(get_state(where), LOG_CPU);\n    }\n\n    function get_regs_short()\n    {\n        var\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\n            line1 = \"\",\n            line2 = \"\";\n\n\n\n        for(var i = 0; i < 4; i++)\n        {\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\n        }\n\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\n\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\n\n        return [line1, line2];\n    }\n\n    function dump_regs_short()\n    {\n        if(!DEBUG) return;\n\n        var lines = get_regs_short();\n\n        dbg_log(lines[0], LOG_CPU);\n        dbg_log(lines[1], LOG_CPU);\n    }\n\n    function get_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.step_mode = true;\n\n        function add(ip, op)\n        {\n            out += h(ip, 8)  + \":        \" +\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\n        }\n\n        var opcodes;\n        var out = \"\";\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            opcodes = debug.all_ops;\n        }\n        else if(debug.ops)\n        {\n            opcodes = debug.ops.toArray();\n        }\n\n        if(!opcodes)\n        {\n            return \"\";\n        }\n\n        for(var i = 0; i < opcodes.length; i += 2)\n        {\n            add(opcodes[i], opcodes[i + 1]);\n        }\n\n        debug.ops.clear();\n        debug.all_ops = [];\n\n        return out;\n    }\n\n    function dump_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.show(get_instructions());\n    }\n\n    function dump_gdt_ldt()\n    {\n        if(!DEBUG) return;\n\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\n\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\n\n        function dump_table(addr, size)\n        {\n            for(var i = 0; i < size; i += 8, addr += 8)\n            {\n                var base = cpu.read16(addr + 2) |\n                        cpu.read8(addr + 4) << 16 |\n                        cpu.read8(addr + 7) << 24,\n\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\n                    access = cpu.read8(addr + 5),\n                    flags = cpu.read8(addr + 6) >> 4,\n                    flags_str = \"\",\n                    dpl = access >> 5 & 3;\n\n                if(!(access & 128))\n                {\n                    // present bit not set\n                    //continue;\n                    flags_str += \"NP \";\n                }\n                else\n                {\n                    flags_str += \" P \";\n                }\n\n                if(access & 16)\n                {\n                    if(flags & 4)\n                    {\n                        flags_str += \"32b \";\n                    }\n                    else\n                    {\n                        flags_str += \"16b \";\n                    }\n\n                    if(access & 8)\n                    {\n                        // executable\n                        flags_str += \"X \";\n\n                        if(access & 4)\n                        {\n                            flags_str += \"C \";\n                        }\n                    }\n                    else\n                    {\n                        // data\n                        flags_str += \"R \";\n                    }\n\n                    flags_str += \"RW \";\n                }\n                else\n                {\n                    // system\n                    flags_str += \"sys: \" + h(access & 15);\n                }\n\n                if(flags & 8)\n                {\n                    limit = limit << 12 | 0xFFF;\n                }\n\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\n                        \", f = \" + flags.toString(2));\n            }\n        }\n    }\n\n    function dump_idt()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < cpu.idtr_size; i += 8)\n        {\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\n                selector = cpu.read16(addr + 2),\n                type = cpu.read8(addr + 5),\n                line,\n                dpl = type >> 5 & 3;\n\n            if((type & 31) === 5)\n            {\n                line = \"task gate \";\n            }\n            else if((type & 31) === 14)\n            {\n                line = \"intr gate \";\n            }\n            else if((type & 31) === 15)\n            {\n                line = \"trap gate \";\n            }\n            else\n            {\n                line = \"invalid   \";\n            }\n\n\n            if(type & 128)\n            {\n                line += \" P\";\n            }\n            else\n            {\n                // present bit not set\n                //continue;\n                line += \"NP\";\n            }\n\n\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\n        }\n    }\n\n    function load_page_entry(dword_entry, is_directory)\n    {\n        if(!DEBUG) return;\n\n        if(!(dword_entry & 1))\n        {\n            // present bit not set\n            return false;\n        }\n\n        var size = (dword_entry & 128) === 128,\n            address;\n\n        if(size && !is_directory)\n        {\n            address = dword_entry & 0xFFC00000;\n        }\n        else\n        {\n            address = dword_entry & 0xFFFFF000;\n        }\n\n        return {\n            size: size,\n            global: (dword_entry & 256) === 256,\n            accessed: (dword_entry & 0x20) === 0x20,\n            dirty: (dword_entry & 0x40) === 0x40,\n            cache_disable : (dword_entry & 16) === 16,\n            user : (dword_entry & 4) === 4,\n            read_write : (dword_entry & 2) === 2,\n            address : address >>> 0\n        };\n    }\n\n    function dump_page_directory()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < 1024; i++)\n        {\n            var addr = cpu.cr[3] + 4 * i;\n            var dword = cpu.read32s(addr),\n                entry = load_page_entry(dword, true);\n\n            if(!entry)\n            {\n                continue;\n            }\n\n            var flags = \"\";\n\n            flags += entry.size ? \"S \" : \"  \";\n            flags += entry.accessed ? \"A \" : \"  \";\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\n            flags += entry.user ? \"U \" : \"  \";\n            flags += entry.read_write ? \"Rw \" : \"   \";\n\n            if(entry.size)\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\n                continue;\n            }\n            else\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\n            }\n\n            for(var j = 0; j < 1024; j++)\n            {\n                var sub_addr = entry.address + 4 * j;\n                dword = cpu.read32s(sub_addr);\n\n                var subentry = load_page_entry(dword, false);\n\n                if(subentry)\n                {\n                    flags = \"\";\n\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\n                    flags += subentry.user ? \"U \" : \"  \";\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\n                    flags += subentry.global ? \"G \" : \"  \";\n                    flags += subentry.accessed ? \"A \" : \"  \";\n                    flags += subentry.dirty ? \"Di \" : \"   \";\n\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\n                }\n            }\n        }\n    }\n\n\n    function get_memory_dump(start, count)\n    {\n        if(!DEBUG) return;\n\n        if(start === undefined)\n        {\n            start = 0;\n            count = cpu.memory_size;\n        }\n        else if(count === undefined)\n        {\n            count = start;\n            start = 0;\n        }\n\n        return cpu.mem8.slice(start, start + count).buffer;\n    }\n\n\n    function memory_hex_dump(addr, length)\n    {\n        if(!DEBUG) return;\n\n        length = length || 4 * 0x10;\n        var line, byt;\n\n        for(var i = 0; i < length >> 4; i++)\n        {\n            line = h(addr + (i << 4), 5) + \"   \";\n\n            for(var j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += h(byt, 2) + \" \";\n            }\n\n            line += \"  \";\n\n            for(j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n            }\n\n            dbg_log(line);\n        }\n    }\n\n    function used_memory_dump()\n    {\n        if(!DEBUG) return;\n\n        var width = 0x80,\n            height = 0x10,\n            block_size = cpu.memory_size / width / height | 0,\n            row;\n\n        for(var i = 0; i < height; i++)\n        {\n            row = h(i * width * block_size, 8) + \" | \";\n\n            for(var j = 0; j < width; j++)\n            {\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\n\n                row += used ? \"X\" : \" \";\n            }\n\n            dbg_log(row);\n        }\n    }\n\n\n    debug.debug_interrupt = function(interrupt_nr)\n    {\n        //if(interrupt_nr === 0x20)\n        //{\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\n        //    //var service = \"\";\n        //    //if(vxd_device === 1)\n        //    //{\n        //    //    service = vxd_table1[vxd_sub];\n        //    //}\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\n        //}\n\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\n        //{\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\n        //}\n\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\n        //{\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\n        //}\n\n        //if(interrupt_nr == 0x10)\n        //{\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\n        //    this.debug.dump_regs_short();\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\n        //}\n\n        //if(interrupt_nr === 0x13)\n        //{\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 6)\n        //{\n        //    this.instruction_pointer += 2;\n        //    dbg_log(\"BUG()\", LOG_CPU);\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\n        //    this.instruction_pointer -= 8;\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x80)\n        //{\n        //    dbg_log(\"linux syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x40)\n        //{\n        //    dbg_log(\"kolibri syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n    };\n};\n","\"use strict\";\n\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\n\nconst ELF_MAGIC = 0x464C457F;\n\nlet types = DataView.prototype;\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\nlet pad = function(size)\n{\n    return {\n        size,\n        get: offset => -1,\n    };\n};\n\nlet Header = create_struct([\n    { magic: U32, },\n\n    { class: U8, },\n    { data: U8, },\n    { version0: U8, },\n    { osabi: U8, },\n\n    { abiversion: U8, },\n    { pad0: pad(7) },\n\n    { type: U16, },\n    { machine: U16, },\n\n    { version1: U32, },\n    { entry: U32, },\n    { phoff: U32, },\n    { shoff: U32, },\n    { flags: U32, },\n\n    { ehsize: U16, },\n    { phentsize: U16, },\n    { phnum: U16, },\n    { shentsize: U16, },\n    { shnum: U16, },\n    { shstrndx: U16, },\n]);\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\n\nlet ProgramHeader = create_struct([\n    { type: U32, },\n    { offset: U32, },\n    { vaddr: U32, },\n    { paddr: U32, },\n    { filesz: U32, },\n    { memsz: U32, },\n    { flags: U32, },\n    { align: U32, },\n]);\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\n\nlet SectionHeader = create_struct([\n    { name: U32, },\n    { type: U32, },\n    { flags: U32, },\n    { addr: U32, },\n    { offset: U32, },\n    { size: U32, },\n    { link: U32, },\n    { info: U32, },\n    { addralign: U32, },\n    { entsize: U32, },\n]);\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\n\n\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\nfunction create_struct(struct)\n{\n    return struct.map(function(entry)\n    {\n        let keys = Object.keys(entry);\n        console.assert(keys.length === 1);\n        let name = keys[0];\n        let type = entry[name];\n\n        console.assert(type.size > 0);\n\n        return {\n            name,\n            type,\n            size: type.size,\n            get: type.get,\n            set: type.set,\n        };\n    });\n}\n\n/** @param {ArrayBuffer} buffer */\nfunction read_elf(buffer)\n{\n    let view = new DataView(buffer);\n\n    let [header, offset] = read_struct(view, Header);\n    console.assert(offset === 52);\n\n    if(DEBUG)\n    {\n        for(let key in header)\n        {\n            console.log(key + \": 0x\" + header[key].toString(16));\n        }\n        console.log(header);\n    }\n\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\n    console.assert(header.version0 === 1, \"Bad version0\");\n\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\n    // shared, or core, respectively.\n    console.assert(header.type === 2, \"Unimplemented type\");\n\n    console.assert(header.version1 === 1, \"Bad version1\");\n\n    // these are different in 64 bit\n    console.assert(header.ehsize === 52, \"Bad header size\");\n    console.assert(header.phentsize === 32, \"Bad program header size\");\n    console.assert(header.shentsize === 40, \"Bad section header size\");\n\n    let [program_headers, ph_offset] = read_structs(\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\n        ProgramHeader,\n        header.phnum);\n\n    let [sections_headers, sh_offset] = read_structs(\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\n        SectionHeader,\n        header.shnum);\n\n    if(DEBUG)\n    {\n        console.log(\"%d program headers:\", program_headers.length);\n        for(let program of program_headers)\n        {\n            console.log(\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\n                \"filesz=%s memsz=%s flags=%s align=%s\",\n                program.type.toString(16),\n                program.offset.toString(16),\n                program.vaddr.toString(16),\n                program.paddr.toString(16),\n                program.filesz.toString(16),\n                program.memsz.toString(16),\n                program.flags.toString(16),\n                program.align.toString(16)\n            );\n        }\n\n        console.log(\"%d program headers:\", sections_headers.length);\n        for(let section of sections_headers)\n        {\n            console.log(\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\n                section.name.toString(16),\n                section.type.toString(16),\n                section.flags.toString(16),\n                section.addr.toString(16),\n                section.offset.toString(16),\n                section.size.toString(16),\n                section.link.toString(16),\n                section.info.toString(16),\n                section.addralign.toString(16),\n                section.entsize.toString(16)\n            );\n        }\n    }\n\n    return {\n        header,\n        program_headers,\n        sections_headers,\n    };\n}\n\nfunction read_struct(view, Struct)\n{\n    let result = {};\n    let offset = 0;\n    const LITTLE_ENDIAN = true; // big endian not supported yet\n\n    for(let entry of Struct)\n    {\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\n        console.assert(result[entry.name] === undefined);\n        result[entry.name] = value;\n        offset += entry.size;\n    }\n\n    return [result, offset];\n}\n\nfunction read_structs(view, Struct, count)\n{\n    let result = [];\n    let offset = 0;\n\n    for(var i = 0; i < count; i++)\n    {\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\n        result.push(s);\n        offset += size;\n    }\n\n    return [result, offset];\n}\n\n/** @param {number=} length */\nfunction view_slice(view, offset, length)\n{\n    return new DataView(view.buffer, view.byteOffset + offset, length);\n}\n","// -------------------------------------------------\n// ------------------ Marshall ---------------------\n// -------------------------------------------------\n// helper functions for virtio and 9p.\n\nvar marshall = {};\n\n\n// Inserts data from an array to a byte aligned struct in memory\nmarshall.Marshall = function(typelist, input, struct, offset) {\n    var item;\n    var size = 0;\n    for (var i=0; i < typelist.length; i++) {\n        item = input[i];\n        switch (typelist[i]) {\n            case \"w\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                size += 4;\n                break;\n            case \"d\": // double word\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                size += 8;\n                break;\n            case \"h\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = item >> 8;\n                size += 2;\n                break;\n            case \"b\":\n                struct[offset++] = item;\n                size += 1;\n                break;\n            case \"s\":\n                var lengthoffset = offset;\n                var length = 0;\n                struct[offset++] = 0; // set the length later\n                struct[offset++] = 0;\n                size += 2;\n                for (var j in item) {\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\n                    utf8.forEach( function(c) {\n                        struct[offset++] = c;\n                        size += 1;\n                        length++;\n                    });\n                }\n                struct[lengthoffset+0] = length & 0xFF;\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\n                break;\n            case \"Q\":\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\n                offset += 13;\n                size += 13;\n                break;\n            default:\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return size;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall = function(typelist, struct, offset) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                offset += 4;\n                output.push(val);\n                break;\n            case \"h\":\n                var val = struct[offset++];\n                output.push(val + (struct[offset++] << 8));\n                break;\n            case \"b\":\n                output.push(struct[offset++]);\n                break;\n            case \"s\":\n                var len = struct[offset++];\n                len += struct[offset++] << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(struct[offset++])\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall2 = function(typelist, GetByte) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                GetByte();GetByte();GetByte();GetByte();\n                output.push(val);\n                break;\n            case \"h\":\n                var val = GetByte();\n                output.push(val + (GetByte() << 8));\n                break;\n            case \"b\":\n                output.push(GetByte());\n                break;\n            case \"s\":\n                var len = GetByte();\n                len += GetByte() << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(GetByte())\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n","// -------------------------------------------------\n// ------------------ UTF8 Helpers -----------------\n// -------------------------------------------------\n\n\"use strict\";\n\nvar UTF8 = {}\n\n/** @constructor */\nfunction UTF8StreamToUnicode() {\n\n    this.stream = new Uint8Array(5);\n    this.ofs = 0;\n\n    this.Put = function(key) {\n        this.stream[this.ofs] = key;\n        this.ofs++;\n        switch(this.ofs) {\n            case 1:\n                if (this.stream[0] < 128) {\n                    this.ofs = 0;\n                    return this.stream[0];\n                }\n                break;\n\n            case 2:\n                if ((this.stream[0]&0xE0) == 0xC0)\n                if ((this.stream[1]&0xC0) == 0x80) {\n                    this.ofs = 0;\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\n                }\n                break;\n\n            case 3:\n                break;\n\n            case 4:\n                break;\n\n            default:\n                return -1;\n                //this.ofs = 0;\n                //break;\n        }\n        return -1;\n    }\n}\n\nfunction UnicodeToUTF8Stream(key)\n{\n        if (key < 0x80)  return [key];\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\n}\n\nUTF8.UTF8Length = function(s)\n{\n    var length = 0;\n    for(var i=0; i<s.length; i++) {\n        var c = s.charCodeAt(i);\n        length += c<128?1:2;\n    }\n    return length;\n}\n","\"use strict\";\n\n/** @const */\nvar SHIFT_SCAN_CODE = 0x2A;\n\n/** @const */\nvar SCAN_CODE_RELEASE = 0x80;\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction KeyboardAdapter(bus)\n{\n    var\n        /**\n         * @type {!Object.<boolean>}\n         */\n        keys_pressed = {},\n\n        keyboard = this;\n\n    /**\n     * Set by emulator\n     * @type {boolean}\n     */\n    this.emu_enabled = true;\n\n    /**\n     * Format:\n     * Javascript event.keyCode -> make code\n     * @const\n     */\n    var charmap = new Uint16Array([\n        0, 0, 0, 0,  0, 0, 0, 0,\n        // 0x08: backspace, tab, enter\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\n\n        // 0x10: shift, ctrl, alt, pause, caps lock\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\n\n        // 0x18: escape\n        0, 0, 0, 0x01,  0, 0, 0, 0,\n\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\n\n        // 0x30: numbers\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0A,\n\n        // 0x3B: ;= (firefox only)\n        0, 0x27, 0, 0x0D, 0, 0,\n\n        // 0x40\n        0,\n\n        // 0x41: letters\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\n\n        // 0x5B: Left Win, Right Win, Menu\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\n\n        // 0x60: keypad\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\n\n        // 0x70: F1 to F12\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\n\n        0, 0, 0, 0,\n\n        // 0x80\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0, 0, 0,\n\n        // 0x90: Numlock\n        0x45, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xA0: - (firefox only)\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\n\n        // 0xB0\n        // ,\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\n\n        // 0xC0\n        // `\n        0x29, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xD0\n        // [']\\\n        0, 0, 0, 0,     0, 0, 0, 0,\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\n\n        // 0xE0\n        // Apple key on Gecko, Right alt\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,            0, 0, 0, 0,\n    ]);\n\n\n    /**\n     * ascii -> javascript event code (US layout)\n     * @const\n     */\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192}\n\n    // From:\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\n    // http://stanislavs.org/helppc/make_codes.html\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\n    //\n    // Mapping from event.code to scancode\n    var codemap = {\n        \"Escape\": 0x0001,\n        \"Digit1\": 0x0002,\n        \"Digit2\": 0x0003,\n        \"Digit3\": 0x0004,\n        \"Digit4\": 0x0005,\n        \"Digit5\": 0x0006,\n        \"Digit6\": 0x0007,\n        \"Digit7\": 0x0008,\n        \"Digit8\": 0x0009,\n        \"Digit9\": 0x000a,\n        \"Digit0\": 0x000b,\n        \"Minus\": 0x000c,\n        \"Equal\": 0x000d,\n        \"Backspace\": 0x000e,\n        \"Tab\": 0x000f,\n        \"KeyQ\": 0x0010,\n        \"KeyW\": 0x0011,\n        \"KeyE\": 0x0012,\n        \"KeyR\": 0x0013,\n        \"KeyT\": 0x0014,\n        \"KeyY\": 0x0015,\n        \"KeyU\": 0x0016,\n        \"KeyI\": 0x0017,\n        \"KeyO\": 0x0018,\n        \"KeyP\": 0x0019,\n        \"BracketLeft\": 0x001a,\n        \"BracketRight\": 0x001b,\n        \"Enter\": 0x001c,\n        \"ControlLeft\": 0x001d,\n        \"KeyA\": 0x001e,\n        \"KeyS\": 0x001f,\n        \"KeyD\": 0x0020,\n        \"KeyF\": 0x0021,\n        \"KeyG\": 0x0022,\n        \"KeyH\": 0x0023,\n        \"KeyJ\": 0x0024,\n        \"KeyK\": 0x0025,\n        \"KeyL\": 0x0026,\n        \"Semicolon\": 0x0027,\n        \"Quote\": 0x0028,\n        \"Backquote\": 0x0029,\n        \"ShiftLeft\": 0x002a,\n        \"Backslash\": 0x002b,\n        \"KeyZ\": 0x002c,\n        \"KeyX\": 0x002d,\n        \"KeyC\": 0x002e,\n        \"KeyV\": 0x002f,\n        \"KeyB\": 0x0030,\n        \"KeyN\": 0x0031,\n        \"KeyM\": 0x0032,\n        \"Comma\": 0x0033,\n        \"Period\": 0x0034,\n        \"Slash\": 0x0035,\n        \"ShiftRight\": 0x0036,\n        \"NumpadMultiply\": 0x0037,\n        \"AltLeft\": 0x0038,\n        \"Space\": 0x0039,\n        \"CapsLock\": 0x003a,\n        \"F1\": 0x003b,\n        \"F2\": 0x003c,\n        \"F3\": 0x003d,\n        \"F4\": 0x003e,\n        \"F5\": 0x003f,\n        \"F6\": 0x0040,\n        \"F7\": 0x0041,\n        \"F8\": 0x0042,\n        \"F9\": 0x0043,\n        \"F10\": 0x0044,\n        \"NumLock\": 0x0045,\n        \"ScrollLock\": 0x0046,\n        \"Numpad7\": 0x0047,\n        \"Numpad8\": 0x0048,\n        \"Numpad9\": 0x0049,\n        \"NumpadSubtract\": 0x004a,\n        \"Numpad4\": 0x004b,\n        \"Numpad5\": 0x004c,\n        \"Numpad6\": 0x004d,\n        \"NumpadAdd\": 0x004e,\n        \"Numpad1\": 0x004f,\n        \"Numpad2\": 0x0050,\n        \"Numpad3\": 0x0051,\n        \"Numpad0\": 0x0052,\n        \"NumpadDecimal\": 0x0053,\n        \"IntlBackslash\": 0x0056,\n        \"F11\": 0x0057,\n        \"F12\": 0x0058,\n\n        \"NumpadEnter\": 0xe01c,\n        \"ControlRight\": 0xe01d,\n        \"NumpadDivide\": 0xe035,\n        //\"PrintScreen\": 0x0063,\n        \"AltRight\": 0xe038,\n        \"Home\": 0xe04f,\n        \"ArrowUp\": 0xe048,\n        \"PageUp\": 0xe049,\n        \"ArrowLeft\": 0xe04b,\n        \"ArrowRight\": 0xe04d,\n        \"End\": 0xe04f,\n        \"ArrowDown\": 0xe050,\n        \"PageDown\": 0xe051,\n        \"Insert\": 0xe052,\n        \"Delete\": 0xe053,\n\n        \"OSLeft\": 0xe05b,\n        \"OSRight\": 0xe05c,\n        \"ContextMenu\": 0xe05d,\n    };\n\n    this.bus = bus;\n\n    this.destroy = function()\n    {\n        if(typeof window !== \"undefined\")\n        {\n            window.removeEventListener(\"keyup\", keyup_handler, false);\n            window.removeEventListener(\"keydown\", keydown_handler, false);\n            window.removeEventListener(\"blur\", blur_handler, false);\n        }\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"keyup\", keyup_handler, false);\n        window.addEventListener(\"keydown\", keydown_handler, false);\n        window.addEventListener(\"blur\", blur_handler, false);\n    };\n    this.init();\n\n    this.simulate_press = function(code)\n    {\n        var ev = { keyCode: code };\n        handler(ev, true);\n        handler(ev, false);\n    };\n\n    this.simulate_char = function(chr)\n    {\n        var code = chr.charCodeAt(0);\n\n        if(code in asciimap)\n        {\n            this.simulate_press(asciimap[code]);\n        }\n        else if(code in asciimap_shift)\n        {\n            send_to_controller(SHIFT_SCAN_CODE);\n            this.simulate_press(asciimap_shift[code]);\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\n        }\n        else\n        {\n            console.log(\"ascii -> keyCode not found: \", code, chr);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\n        {\n              // don't prevent opening chromium dev tools\n              // maybe add other important combinations here, too\n              return false;\n        }\n\n        if(!keyboard.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.target)\n        {\n            // className shouldn't be hardcoded here\n            return e.target.className === \"phone_keyboard\" ||\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    function translate(e)\n    {\n        if(e.code !== undefined)\n        {\n            var code = codemap[e.code];\n\n            if(code !== undefined)\n            {\n                return code;\n            }\n        }\n\n        return charmap[e.keyCode];\n    }\n\n    function keyup_handler(e)\n    {\n        return handler(e, false);\n    }\n\n    function keydown_handler(e)\n    {\n        return handler(e, true);\n    }\n\n    function blur_handler(e)\n    {\n        // trigger keyup for all pressed keys\n        var keys = Object.keys(keys_pressed),\n            key;\n\n        for(var i = 0; i < keys.length; i++)\n        {\n            key = +keys[i];\n\n            if(keys_pressed[key])\n            {\n                handle_code(key, false);\n            }\n        }\n\n        keys_pressed = {};\n    }\n\n    /**\n     * @param {boolean} keydown\n     */\n    function handler(e, keydown)\n    {\n        if(!keyboard.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var code = translate(e);\n\n        if(!code)\n        {\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\n            return;\n        }\n\n        handle_code(code, keydown);\n\n        e.preventDefault && e.preventDefault();\n\n        return false;\n    }\n\n    /**\n     * @param {number} code\n     * @param {boolean} keydown\n     */\n    function handle_code(code, keydown)\n    {\n        if(keydown)\n        {\n            if(keys_pressed[code])\n            {\n                handle_code(code, false);\n            }\n        }\n        else\n        {\n            if(!keys_pressed[code])\n            {\n                // stray keyup\n                return;\n            }\n        }\n\n        keys_pressed[code] = keydown;\n\n        if(!keydown)\n        {\n            code |= 0x80;\n        }\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\n\n        if(code > 0xFF)\n        {\n            // prefix\n            send_to_controller(code >> 8);\n            send_to_controller(code & 0xFF);\n        }\n        else\n        {\n            send_to_controller(code);\n        }\n    }\n\n    function send_to_controller(code)\n    {\n        keyboard.bus.send(\"keyboard-code\", code);\n    }\n}\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction MouseAdapter(bus, screen_container)\n{\n    /** @const */\n    var SPEED_FACTOR = 0.15;\n\n    var left_down = false,\n        right_down = false,\n        middle_down = false,\n\n        last_x = 0,\n        last_y = 0,\n\n        mouse = this;\n\n    // set by controller\n    this.enabled = false;\n\n    // set by emulator\n    this.emu_enabled = true;\n\n    this.bus = bus;\n\n    this.bus.register(\"mouse-enable\", function(enabled)\n    {\n        this.enabled = enabled;\n    }, this);\n\n    this.destroy = function()\n    {\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\n        window.addEventListener(\"touchend\", touch_end_handler, false);\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n    this.init();\n\n    function is_child(child, parent)\n    {\n        while(child.parentNode)\n        {\n            if(child === parent)\n            {\n                return true;\n            }\n            child = child.parentNode;\n        }\n\n        return false;\n    }\n\n    function may_handle(e)\n    {\n        if(!mouse.enabled || !mouse.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\n        {\n            return true;\n        }\n\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\n        {\n            var parent = screen_container || document.body;\n            return is_child(e.target, parent);\n        }\n\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\n    }\n\n    function touch_start_handler(e)\n    {\n        if(may_handle(e))\n        {\n            var touches = e[\"changedTouches\"];\n\n            if(touches && touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n            }\n        }\n    }\n\n    function touch_end_handler(e)\n    {\n        if(left_down || middle_down || right_down)\n        {\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\n            left_down = middle_down = right_down = false;\n        }\n    }\n\n    function mousemove_handler(e)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = 0;\n        var delta_y = 0;\n\n        var touches = e[\"changedTouches\"];\n\n        if(touches)\n        {\n            if(touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                delta_x = touch.clientX - last_x;\n                delta_y = touch.clientY - last_y;\n\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n\n                e.preventDefault();\n            }\n        }\n        else\n        {\n            if(typeof e[\"movementX\"] === \"number\")\n            {\n                delta_x = e[\"movementX\"];\n                delta_y = e[\"movementY\"];\n            }\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\n            {\n                delta_x = e[\"webkitMovementX\"];\n                delta_y = e[\"webkitMovementY\"];\n            }\n            else if(typeof e[\"mozMovementX\"] === \"number\")\n            {\n                delta_x = e[\"mozMovementX\"];\n                delta_y = e[\"mozMovementY\"];\n            }\n            else\n            {\n                // Fallback for other browsers?\n                delta_x = e.clientX - last_x;\n                delta_y = e.clientY - last_y;\n\n                last_x = e.clientX;\n                last_y = e.clientY;\n            }\n        }\n\n        if(SPEED_FACTOR !== 1)\n        {\n            delta_x = delta_x * SPEED_FACTOR;\n            delta_y = delta_y * SPEED_FACTOR;\n        }\n\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\n        //{\n        //    // Large mouse delta, drop?\n        //}\n\n        delta_y = -delta_y;\n\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\n\n        let absolute_x = e.pageX - screen_container.offsetLeft;\n        let absolute_y = e.pageY - screen_container.offsetTop;\n        mouse.bus.send(\"mouse-absolute\", [\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\n    }\n\n    function mousedown_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, true);\n        }\n    }\n\n    function mouseup_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, false);\n        }\n    }\n\n    function click_event(e, down)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(e.which === 1)\n        {\n            left_down = down;\n        }\n        else if(e.which === 2)\n        {\n            middle_down = down;\n        }\n        else if(e.which === 3)\n        {\n            right_down = down;\n        }\n        else\n        {\n            console.log(\"Unknown event.which: \" + e.which);\n        }\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\n    }\n\n    function mousewheel_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = e.wheelDelta || -e.detail;\n        var delta_y = 0;\n\n        if(delta_x < 0)\n        {\n            delta_x = -1;\n        }\n        else if(delta_x > 0)\n        {\n            delta_x = 1;\n        }\n\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\n        e.preventDefault();\n    }\n}\n","\"use strict\";\n\n/**\n * Note: Uses AudioContext.createScriptProcessor, which is deprecated,\n * but which no satisfactory substitute is availble.\n * @constructor\n * @param {BusConnector} bus\n * @suppress {deprecated}\n */\nfunction SpeakerAdapter(bus)\n{\n    if(typeof window === \"undefined\")\n    {\n        return;\n    }\n    if(!window.AudioContext && !window.webkitAudioContext)\n    {\n        console.warn(\"Web browser doesn't support Web Audio API\");\n        return;\n    }\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.audio_context = new (window.AudioContext || window.webkitAudioContext)();\n\n    this.beep_gain = this.audio_context.createGain();\n    this.beep_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\n    this.beep_gain.connect(this.audio_context.destination);\n\n    this.beep_oscillator = this.audio_context.createOscillator();\n    this.beep_oscillator.type = \"square\";\n    this.beep_oscillator.frequency.setValueAtTime(440, this.audio_context.currentTime);\n    this.beep_oscillator.connect(this.beep_gain);\n    this.beep_oscillator.start();\n\n    this.beep_playing = false;\n    this.beep_enable = false;\n    this.beep_frequency = 440;\n    this.pit_enabled = false;\n\n    this.dac_processor = this.audio_context.createScriptProcessor(2048, 0, 2);\n    this.dac_processor.onaudioprocess = this.dac_process.bind(this);\n    this.dac_processor.connect(this.audio_context.destination);\n    this.dac_buffer0 = new Float32Array(this.dac_processor.bufferSize);\n    this.dac_buffer1 = new Float32Array(this.dac_processor.bufferSize);\n    this.dac_enabled = true;\n\n    bus.register(\"pcspeaker-enable\", function(yesplease)\n    {\n        this.beep_enable = yesplease;\n        this.beep_update();\n    }, this);\n\n    bus.register(\"pcspeaker-update\", function(data)\n    {\n        var counter_mode = data[0];\n        var counter_reload = data[1];\n        this.pit_enabled = counter_mode == 3;\n        this.beep_frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\n        this.beep_update();\n    }, this);\n\n    bus.register(\"speaker-update-data\", function(data)\n    {\n        this.dac_buffer0 = data[0];\n        this.dac_buffer1 = data[1];\n    }, this);\n\n    bus.register(\"speaker-request-samplerate\", function()\n    {\n        bus.send(\"speaker-tell-samplerate\", this.audio_context.sampleRate);\n    }, this);\n\n    bus.send(\"speaker-tell-samplerate\", this.audio_context.sampleRate);\n\n    bus.register(\"speaker-update-enable\", function(enabled)\n    {\n        if(this.dac_enabled && !enabled)\n        {\n            this.dac_processor.disconnect(this.audio_context.destination);\n            this.dac_enabled = false;\n        }\n        else if(!this.dac_enabled && enabled)\n        {\n            this.dac_processor.connect(this.audio_context.destination);\n            this.dac_enabled = true;\n        }\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debug_dac = false;\n        this.debug_dac_out = [];\n        window[\"speaker_debug_dac_out\"] = this.debug_dac_out;\n        window[\"speaker_debug_start\"] = () =>\n        {\n            this.debug_dac = true;\n            setTimeout(() =>\n            {\n                this.debug_dac = false;\n            },250);\n        }\n    }\n}\n\nSpeakerAdapter.prototype.beep_update = function()\n{\n    var current_time = this.audio_context.currentTime;\n\n    if(this.pit_enabled && this.beep_enable)\n    {\n        this.beep_oscillator.frequency.setValueAtTime(this.beep_frequency, current_time);\n        if(!this.beep_playing)\n        {\n            this.beep_gain.gain.setValueAtTime(1, current_time);\n            this.beep_playing = true;\n        }\n    }\n    else if(this.beep_playing)\n    {\n        this.beep_gain.gain.setValueAtTime(0, current_time);\n        this.beep_playing = false;\n    }\n};\n\nSpeakerAdapter.prototype.dac_process = function(event)\n{\n    if(!this.dac_enabled)\n    {\n        return;\n    }\n\n    var out = event.outputBuffer;\n\n    out.copyToChannel(this.dac_buffer0, 0);\n    out.copyToChannel(this.dac_buffer1, 1);\n\n    this.bus.send(\"speaker-request-data\", out.length);\n\n    if(DEBUG)\n    {\n        if(this.debug_dac)\n        {\n            this.debug_dac_out.push(event.outputBuffer.getChannelData(0).slice());\n        }\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction SerialAdapter(element, bus)\n{\n    var serial = this;\n\n    this.enabled = true;\n    this.bus = bus;\n    this.text = \"\";\n    this.text_new_line = false;\n\n    this.last_update = 0;\n\n\n    this.bus.register(\"serial0-output-char\", function(chr)\n    {\n        this.show_char(chr);\n    }, this);\n\n\n    this.destroy = function()\n    {\n        element.removeEventListener(\"keypress\", keypress_handler, false);\n        element.removeEventListener(\"keydown\", keydown_handler, false);\n        element.removeEventListener(\"paste\", paste_handler, false);\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\n    };\n\n    this.init = function()\n    {\n        this.destroy();\n\n        element.addEventListener(\"keypress\", keypress_handler, false);\n        element.addEventListener(\"keydown\", keydown_handler, false);\n        element.addEventListener(\"paste\", paste_handler, false);\n        window.addEventListener(\"mousedown\", window_click_handler, false);\n    };\n    this.init();\n\n\n    this.show_char = function(chr)\n    {\n        if(chr === \"\\x08\")\n        {\n            this.text = this.text.slice(0, -1);\n            this.update();\n        }\n        else if(chr === \"\\r\")\n        {\n            // do nothing\n        }\n        else\n        {\n            this.text += chr;\n\n            if(chr === \"\\n\")\n            {\n                this.text_new_line = true;\n            }\n\n            this.update();\n        }\n    };\n\n    this.update = function()\n    {\n        var now = Date.now();\n        var delta = now - this.last_update;\n\n        if(delta < 16)\n        {\n            if(this.update_timer === undefined)\n            {\n                this.update_timer = setTimeout(() => {\n                    this.update_timer = undefined;\n                    var now = Date.now();\n                    dbg_assert(now - this.last_update >= 16);\n                    this.last_update = now;\n                    this.render();\n                }, 16 - delta);\n            }\n        }\n        else\n        {\n            if(this.update_timer !== undefined)\n            {\n                clearTimeout(this.update_timer);\n                this.update_timer = undefined;\n            }\n\n            this.last_update = now;\n            this.render();\n        }\n    };\n\n    this.render = function()\n    {\n        element.value = this.text;\n\n        if(this.text_new_line)\n        {\n            this.text_new_line = false;\n            element.scrollTop = 1e9;\n        }\n    }\n\n    /**\n     * @param {number} chr_code\n     */\n    this.send_char = function(chr_code)\n    {\n        if(serial.bus)\n        {\n            serial.bus.send(\"serial0-input\", chr_code);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(!serial.enabled)\n        {\n            return false;\n        }\n\n        // Something here?\n\n        return true;\n    }\n\n    function keypress_handler(e)\n    {\n        if(!serial.bus)\n        {\n            return;\n        }\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var chr = e.which;\n\n        serial.send_char(chr);\n        e.preventDefault();\n    }\n\n    function keydown_handler(e)\n    {\n        var chr = e.which;\n\n        if(chr === 8)\n        {\n            // supress backspace\n            serial.send_char(127);\n            e.preventDefault();\n        }\n        else if(chr === 9)\n        {\n            // tab\n            serial.send_char(9);\n            e.preventDefault();\n        }\n    }\n\n    function paste_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var data = e.clipboardData.getData(\"text/plain\");\n\n        for(var i = 0; i < data.length; i++)\n        {\n            serial.send_char(data.charCodeAt(i));\n        }\n\n        e.preventDefault();\n    }\n\n    function window_click_handler(e)\n    {\n        if(e.target !== element)\n        {\n            element.blur();\n        }\n    }\n}\n","\"use strict\";\n\n/**\n * An ethernet-through-websocket adapter, to be used with\n *     https://github.com/benjamincburns/websockproxy\n *\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\n *\n * @constructor\n *\n * @param {string} url\n * @param {BusConnector} bus\n */\nfunction NetworkAdapter(url, bus)\n{\n    this.send_data = function(x) {};\n\n    this.bus = bus;\n    this.socket = undefined;\n\n    // TODO: circular buffer?\n    this.send_queue = [];\n    this.url = url;\n\n    this.reconnect_interval = 10000;\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\n    this.send_queue_limit = 64;\n\n    this.bus.register(\"net0-send\", function(data)\n    {\n        this.send(data);\n    }, this);\n}\n\nNetworkAdapter.prototype.handle_message = function(e)\n{\n    if(this.bus)\n    {\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\n    }\n};\n\nNetworkAdapter.prototype.handle_close = function(e)\n{\n    //console.log(\"onclose\", e);\n\n    this.connect();\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\n};\n\nNetworkAdapter.prototype.handle_open = function(e)\n{\n    //console.log(\"open\", e);\n\n    for(var i = 0; i < this.send_queue.length; i++)\n    {\n        this.send(this.send_queue[i]);\n    }\n\n    this.send_queue = [];\n};\n\nNetworkAdapter.prototype.handle_error = function(e)\n{\n    //console.log(\"onerror\", e);\n};\n\nNetworkAdapter.prototype.destroy = function()\n{\n    if(this.socket)\n    {\n        this.socket.close();\n    }\n};\n\nNetworkAdapter.prototype.connect = function()\n{\n    if(this.socket)\n    {\n        var state = this.socket.readyState;\n\n        if(state === 0 || state === 1)\n        {\n            // already or almost there\n            return;\n        }\n    }\n\n    var now = Date.now();\n\n    if(this.last_connect_attempt + this.reconnect_interval > now)\n    {\n        return;\n    }\n\n    this.last_connect_attempt = Date.now();\n\n    try\n    {\n        this.socket = new WebSocket(this.url);\n    }\n    catch(e)\n    {\n        this.handle_close(undefined);\n        return;\n    }\n\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = this.handle_open.bind(this);;\n    this.socket.onmessage = this.handle_message.bind(this);\n    this.socket.onclose = this.handle_close.bind(this);\n    this.socket.onerror = this.handle_error.bind(this);\n};\n\nNetworkAdapter.prototype.send = function(data)\n{\n    //console.log(\"send\", data);\n\n    if(!this.socket || this.socket.readyState !== 1)\n    {\n        this.send_queue.push(data);\n\n        if(this.send_queue.length > 2 * this.send_queue_limit)\n        {\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\n        }\n\n        this.connect();\n    }\n    else\n    {\n        this.socket.send(data);\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar ASYNC_SAFE = false;\n\n(function()\n{\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        v86util.load_file = load_file_nodejs;\n    }\n    else\n    {\n        v86util.load_file = load_file;\n    }\n\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\n    v86util.SyncFileBuffer = SyncFileBuffer;\n\n    /**\n     * @param {string} filename\n     * @param {Object} options\n     */\n    function load_file(filename, options)\n    {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method || \"get\", filename, true);\n\n        if(!options.as_text)\n        {\n            http.responseType = \"arraybuffer\";\n        }\n\n        if(options.headers)\n        {\n            var header_names = Object.keys(options.headers);\n\n            for(var i = 0; i < header_names.length; i++)\n            {\n                var name = header_names[i];\n                http.setRequestHeader(name, options.headers[name]);\n            }\n        }\n\n        if(options.range)\n        {\n            let start = options.range.start;\n            let end = start + options.range.length - 1;\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\n        }\n\n        http.onload = function(e)\n        {\n            if(http.readyState === 4)\n            {\n                if(http.status !== 200 && http.status !== 206)\n                {\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\n                }\n                else if(http.response)\n                {\n                    options.done && options.done(http.response, http);\n                }\n            }\n        };\n\n        if(options.progress)\n        {\n            http.onprogress = function(e)\n            {\n                options.progress(e);\n            };\n        }\n\n        http.send(null);\n    }\n\n    function load_file_nodejs(filename, options)\n    {\n        let fs = require(\"fs\");\n\n        if(options.range)\n        {\n            dbg_assert(!options.as_text);\n\n            fs[\"open\"](filename, \"r\", (err, fd) =>\n            {\n                if(err) throw err;\n\n                let length = options.range.length;\n                var buffer = new global[\"Buffer\"](length);\n\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\n                {\n                    if(err) throw err;\n\n                    dbg_assert(bytes_read === length);\n                    options.done && options.done(new Uint8Array(buffer));\n\n                    fs[\"close\"](fd, (err) => {\n                        if(err) throw err;\n                    });\n                });\n            });\n        }\n        else\n        {\n            var o = {\n                encoding: options.as_text ? \"utf-8\" : null,\n            };\n\n            fs[\"readFile\"](filename, o, function(err, data)\n            {\n                if(err)\n                {\n                    console.log(\"Could not read file:\", filename, err);\n                }\n                else\n                {\n                    var result = data;\n\n                    if(!options.as_text)\n                    {\n                        result = new Uint8Array(result).buffer;\n                    }\n\n                    options.done(result);\n                }\n            });\n        }\n    }\n\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        var determine_size = function(path, cb)\n        {\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\n            {\n                if(err)\n                {\n                    cb(err);\n                }\n                else\n                {\n                    cb(null, stats.size);\n                }\n            });\n        };\n    }\n    else\n    {\n        var determine_size = function(url, cb)\n        {\n            v86util.load_file(url, {\n                done: (buffer, http) =>\n                {\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\n                    var match = header.match(/\\/(\\d+)\\s*$/);\n\n                    if(match)\n                    {\n                        cb(null, +match[1]);\n                    }\n                    else\n                    {\n                        cb({ header });\n                    }\n                },\n                headers: {\n                    Range: \"bytes=0-0\",\n\n                    //\"Accept-Encoding\": \"\",\n\n                    // Added by Chromium, but can cause the whole file to be sent\n                    // Settings this to empty also causes problems and Chromium\n                    // doesn't seem to create this header any more\n                    //\"If-Range\": \"\",\n                }\n            });\n        };\n    }\n\n    /**\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\n     * using the `Range: bytes=...` header\n     *\n     * @constructor\n     * @param {string} filename Name of the file to download\n     * @param {number|undefined} size\n     */\n    function AsyncXHRBuffer(filename, size)\n    {\n        this.filename = filename;\n\n        /** @const */\n        this.block_size = 256;\n        this.byteLength = size;\n\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncXHRBuffer.prototype.load = function()\n    {\n        if(this.byteLength !== undefined)\n        {\n            this.onload && this.onload({});\n            return;\n        }\n\n        // Determine the size using a request\n\n        determine_size(this.filename, (error, size) =>\n        {\n            if(error)\n            {\n                console.assert(false,\n                    \"Cannot use: \" + this.filename + \". \" +\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\n            }\n            else\n            {\n                dbg_assert(size >= 0);\n                this.byteLength = size;\n                this.onload && this.onload({});\n            }\n        });\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\n    {\n        var number_of_blocks = len / this.block_size;\n        var block_index = offset / this.block_size;\n\n        for(var i = 0; i < number_of_blocks; i++)\n        {\n            var block = this.loaded_blocks[block_index + i];\n\n            if(!block)\n            {\n                return;\n            }\n        }\n\n        if(number_of_blocks === 1)\n        {\n            return this.loaded_blocks[block_index];\n        }\n        else\n        {\n            var result = new Uint8Array(len);\n            for(var i = 0; i < number_of_blocks; i++)\n            {\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset + len <= this.byteLength);\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            if(ASYNC_SAFE)\n            {\n                setTimeout(fn.bind(this, block), 0);\n            }\n            else\n            {\n                fn(block);\n            }\n            return;\n        }\n\n        v86util.load_file(this.filename, {\n            done: function done(buffer)\n            {\n                var block = new Uint8Array(buffer);\n                this.handle_read(offset, len, block);\n                fn(block);\n            }.bind(this),\n            range: { start: offset, length: len },\n        });\n    };\n\n    /**\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\n     *\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     *\n     * @param {number} start\n     * @param {!Uint8Array} data\n     * @param {function()} fn\n     */\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\n    {\n        console.assert(start + data.byteLength <= this.byteLength);\n\n        var len = data.length;\n\n        console.assert(start % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var start_block = start / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var block = this.loaded_blocks[start_block + i];\n\n            if(block === undefined)\n            {\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            }\n\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\n            block.set(data_slice);\n\n            console.assert(block.byteLength === data_slice.length);\n        }\n\n        fn();\n    };\n\n    /**\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     * @param {number} offset\n     * @param {number} len\n     * @param {!Uint8Array} block\n     */\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\n    {\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\n        // Overwrites blocks from the original source that have been written since\n\n        var start_block = offset / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var written_block = this.loaded_blocks[start_block + i];\n\n            if(written_block)\n            {\n                block.set(written_block, i * this.block_size);\n            }\n            //else\n            //{\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\n            //}\n        }\n    };\n\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must download all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\n    {\n        var count = 0;\n        for(var _ in this.loaded_blocks)\n        {\n            count++;\n        }\n\n        var buffer = new Uint8Array(count * this.block_size);\n        var indices = [];\n\n        var i = 0;\n        for(var index in this.loaded_blocks)\n        {\n            var block = this.loaded_blocks[index];\n            dbg_assert(block.length === this.block_size);\n            index = +index;\n            indices.push(index);\n            buffer.set(\n                block,\n                i * this.block_size\n            );\n            i++;\n        }\n\n        return {\n            buffer,\n            indices,\n            block_size: this.block_size,\n        };\n    };\n\n    /**\n     * Synchronous access to File, loading blocks from the input type=file\n     * The whole file is loaded into memory during initialisation\n     *\n     * @constructor\n     */\n    function SyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        if(file.size > (1 << 30))\n        {\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\n        }\n\n        this.buffer = new ArrayBuffer(file.size);\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    SyncFileBuffer.prototype.load = function()\n    {\n        this.load_next(0);\n    };\n\n    /**\n     * @param {number} start\n     */\n    SyncFileBuffer.prototype.load_next = function(start)\n    {\n        /** @const */\n        var PART_SIZE = 4 << 20;\n\n        var filereader = new FileReader();\n\n        filereader.onload = function(e)\n        {\n            var buffer = new Uint8Array(e.target.result);\n            new Uint8Array(this.buffer, start).set(buffer);\n            this.load_next(start + PART_SIZE);\n        }.bind(this);\n\n        if(this.onprogress)\n        {\n            this.onprogress({\n                loaded: start,\n                total: this.byteLength,\n                lengthComputable: true,\n            });\n        }\n\n        if(start < this.byteLength)\n        {\n            var end = Math.min(start + PART_SIZE, this.byteLength);\n            var slice = this.file.slice(start, end);\n            filereader.readAsArrayBuffer(slice);\n        }\n        else\n        {\n            this.file = undefined;\n            this.onload && this.onload({ buffer: this.buffer });\n        }\n    };\n\n    /**\n     * @param {number} start\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    SyncFileBuffer.prototype.get = function(start, len, fn)\n    {\n        console.assert(start + len <= this.byteLength);\n        fn(new Uint8Array(this.buffer, start, len));\n    };\n\n    /**\n     * @param {number} offset\n     * @param {!Uint8Array} slice\n     * @param {function()} fn\n     */\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\n    {\n        console.assert(offset + slice.byteLength <= this.byteLength);\n\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\n        fn();\n    };\n\n    SyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        fn(this.buffer);\n    };\n\n    /**\n     * Asynchronous access to File, loading blocks from the input type=file\n     *\n     * @constructor\n     */\n    function AsyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        /** @const */\n        this.block_size = 256;\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncFileBuffer.prototype.load = function()\n    {\n        this.onload && this.onload({});\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            fn(block);\n            return;\n        }\n\n        var fr = new FileReader();\n\n        fr.onload = function(e)\n        {\n            var buffer = e.target.result;\n            var block = new Uint8Array(buffer);\n\n            this.handle_read(offset, len, block);\n            fn(block);\n        }.bind(this);\n\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\n    };\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\n\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must load all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncFileBuffer.prototype.get_as_file = function(name)\n    {\n        var parts = [];\n        var existing_blocks = Object.keys(this.loaded_blocks)\n                                .map(Number)\n                                .sort(function(x, y) { return x - y; });\n\n        var current_offset = 0;\n\n        for(var i = 0; i < existing_blocks.length; i++)\n        {\n            var block_index = existing_blocks[i];\n            var block = this.loaded_blocks[block_index];\n            var start = block_index * this.block_size;\n            console.assert(start >= current_offset);\n\n            if(start !== current_offset)\n            {\n                parts.push(this.file.slice(current_offset, start));\n                current_offset = start;\n            }\n\n            parts.push(block);\n            current_offset += block.length;\n        }\n\n        if(current_offset !== this.file.size)\n        {\n            parts.push(this.file.slice(current_offset));\n        }\n\n        var file = new File(parts, name);\n        console.assert(file.size === this.file.size);\n\n        return file;\n    };\n\n})();\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction DummyScreenAdapter(bus)\n{\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-text-scroll\", function(rows)\n    {\n        console.log(\"scroll\", rows);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n        }\n    };\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n    };\n\n    this.clear_screen = function()\n    {\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_buffer = new Uint8Array(4 * width * height);\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n    };\n\n    this.update_cursor_scanline = function(start, end)\n    {\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n    };\n\n    this.get_text_screen = function()\n    {\n        var screen = [];\n\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            screen.push(this.get_text_row(i));\n        }\n\n        return screen;\n    };\n\n    this.get_text_row = function(i)\n    {\n        var row = \"\";\n        var offset = 3 * i * text_mode_width;\n\n        for(var j = 0; j < text_mode_width; j++)\n        {\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\n        }\n\n        return row;\n    };\n}\n"],
"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","$jscomp.iteratorFromArray","Virtio9p","filesystem","bus","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","Uint8Array","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","Math","floor","total_size","inodes","length","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","bind","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","data","i","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_SIZE","ChangeSize","offset","count","FID_XATTR","caps","file","send","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","number_as_color","n","toString","Array","join","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","graphical_mode_width","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","position","backgroundColor","display","register","set_mode","update_buffer","min","max","put_char","update_cursor","update_cursor_scanline","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","open","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","createImageData","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","marginTop","this.update_cursor","this.text_update_row","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","min_y","putImageData","dump_file","ab","download","blob","Blob","file_or_blob","a","href","URL","createObjectURL","dataset","createEvent","ev","initMouseEvent","dispatchEvent","click","revokeObjectURL","get_query_arguments","query","location","search","substr","split","parameters","param","decodeURIComponent","chr_repeat","result","$","getElementById","el","onload","start_profile","infos","title","settings","initial_state","fda","cdrom","hda","multiboot","memory_size","vga_memory_size","undefined","boot_order","description","innerHTML","start_emulation","done","emulator","query_args","setTimeout","keyboard_send_text","XMLHttpRequest","onclick","set_profile","floppy_file","files","last_file","cd_file","hd_file","multiboot_file","oses","HOST","ON_LOCALHOST","ON_HTTPS","OTHER_HOST","profile","use_bochs_bios","element","blur","parseInt","alert","MB","value","biosfile","vgabiosfile","bios","BIOSPATH","vga_bios","V86Starter","add_listener","init_ui","file_index","file_count","loaded","total","line","per100","per50","progress_ticks","file_name","update_info","now","instruction_counter","get_instruction_counter","last_ips","last_instr_counter","delta_time","last_tick","running_time","time","v86util.pad0","add_image_download_button","obj","elem.onclick","disk_images","filename","get_as_file","get_buffer","b","ctrl_w_rescue","ctrlKey","onbeforeunload","window.onbeforeunload","init_filesystem_panel","cpu_is_running","stop","run","pathname","mouse_is_enabled","lock_mouse","mouse_adapter","emu_enabled","interval","os_uses_mouse","setInterval","clearInterval","args","read","write","read_sectors","write_sectors","bytes_received","bytes_transmitted","is_enabled","restart","hdb","fdb","v86","cpu","mem8","save_state","error","log","stack","onchange","was_running","filereader","FileReader","filereader.onload","restore_state","target","err","readAsArrayBuffer","keyboard_send_scancodes","parseFloat","screen_set_scale","screen_go_fullscreen","getSelection","isCollapsed","phone_keyboard","getElementsByClassName","top","body","scrollTop","left","scrollLeft","focus","setAttribute","tabIndex","addEventListener","screen_make_screenshot","forEach","call","loader","v86util.SyncFileBuffer","loader.onload","create_file","load","onkeypress","which","disabled","read_file","uint8array","replace","onpopstate","reload","prof","history","pushState","hostname","endsWith","protocol","readyState","IO","ports","create_empty_entry","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","stopped","running","CPU","register_tick","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","run_hardware_timers","hlt_loop","v86.microtick","handle_irqs","t","TIME_PER_FRAME","do_run","do_many_cycles","dt","next_tick","v86.prototype.stop","v86.prototype.restart","reset","load_bios","v86.prototype.init","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","source","v86.prototype","v86_prototype$next_tick","hidden","v86.prototype.save_state","v86.prototype.restore_state","performance","str","len","h","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","SyncBuffer.prototype.get_buffer","int_log2_table","v86util.int_log2_byte","x","v86util.int_log2","tt","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","y","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","FPU.prototype.integer_round","rc","rounded","round","ceil","FPU.prototype.truncate","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","devices","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","rtc","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","IDEInterface.prototype.read_data","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGAScreen","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","start_address","screen_height","screen_width","crtc","previous_start_address","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch3","latch2","latch1","latch0","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_color_index_read","dac_color_index_write","offset_register","index_crtc","attribute_controller_index","dac_map","sequencer_index","plane_write_bm","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C8_write","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","svga_memory","diff_addr_min","diff_addr_max","dest_buffer","screen_fill_buffer","VGA_PLANAR_REAL_BUFFER_START","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","vga_memory","plane0","VGA_BANK_SIZE","plane1","plane2","plane3","me","plane1_byte","plane2_byte","plane3_byte","write_mode","plane0_byte","actual_buffer_addr","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","complete_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.destroy","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.set_video_mode","VGAScreen.prototype.port3C0_write","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","set_video_mode","switch_video_mode","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D5_write","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","mouse_buffer","code","kbd_send_code","kbd_irq","mouse_send_click","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","mouse_irq","PS2.prototype.port60_read","next_byte_is_aux","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","MAGIC_CPU_EXCEPTION","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","dump","this.dump","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","RTC.prototype.encode_time","digit","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","ACPI","acpi","pm1_enable","pm1_status","last_timer","gpe","ACPI.prototype.timer","highest_bit_changed","ACPI.prototype.get_state","ACPI.prototype.set_state","APIC","timer_divider","apic_id","timer_divider_shift","timer_current_count","timer_initial_count","lvt_error","lvt_int1","lvt_int0","lvt_perf_counter","lvt_timer","IOAPIC_CONFIG_MASKED","icr1","icr0","tpr","tmr","spurious_vector","destination_format","read_error","local_destination","APIC_ADDRESS","off","APIC.prototype","APIC.prototype.read32","APIC.prototype.write32","check_vector","highest_isr","register_get_highest_bit","highest","register_clear_bit","ioapic","IOAPIC_IRQ_COUNT","config","ioredtbl_config","IOAPIC_CONFIG_REMOTE_IRR","check_irq","vector","delivery_mode","is_level","destination_shorthand","deliver","route","IOAPIC_DELIVERY_FIXED","divide_shift","APIC.prototype.timer","steps","APIC_TIMER_FREQ","APIC_TIMER_MODE_MASK","APIC_TIMER_MODE_PERIODIC","APIC_TIMER_MODE_ONE_SHOT","APIC.prototype.deliver","IOAPIC_DELIVERY_INIT","IOAPIC_DELIVERY_NMI","register_set_bit","APIC.prototype.check_vector","highest_irr","APIC.prototype.acknowledge_irq","APIC.prototype.get_state","APIC.prototype.set_state","APIC.prototype.register_set_bit","v","bit","APIC.prototype.register_clear_bit","APIC.prototype.register_get_highest_bit","IOAPIC","ioredtbl_destination","ioapic_id","ioregsel","IOAPIC_ADDRESS","IOREGSEL","IOWIN","IOAPIC.prototype.check_irq","mask","IOAPIC_CONFIG_TRIGGER_MODE_LEVEL","IOAPIC_DELIVERY_LOWEST_PRIORITY","apic","IOAPIC.prototype","IOAPIC.prototype.set_irq","IOAPIC.prototype.clear_irq","IOAPIC.prototype.read","reg","IOAPIC.prototype.write","old_value","IOAPIC_CONFIG_READONLY_MASK","IOAPIC.prototype.get_state","IOAPIC.prototype.set_state","StateLoadError","msg","message","Error","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","Uint32Array","info","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","receive","cr","rxcr","memory","curpg","total_length","packet_length","data_start","next","cut","START_RX_PAGE","pstop","pstart","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","tsr","mac","random","rsar","START_PAGE","STOP_PAGE","boundary","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","lower_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","FM_HANDLERS","SB16","cpu_paused","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_unhandled_registers","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dac_rate_ratio","dac_process_samples","SB_DMA_BLOCK_SAMPLES","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","audio_samplerate","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","rate","audio_send","reset_dsp","SB16.prototype.reset_dsp","DSP_NO_COMMAND","fill","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_default_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_default_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_default_read","SB16.prototype.mixer_default_write","register_mixer_read","register_mixer_write","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB16.prototype.dma_on_unmask","dma_transfer_next","SB16.prototype.dma_transfer_next","samples","dma_to_dac","SB16.prototype.dma_to_dac","sample_count","repeats","sample","SB16.prototype.audio_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","mul32_result","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","hpet","ps2","uart","fdc","pit","net","pic","sb16","CPU.prototype.set_state","full_clear_tlb","exception_cleanup","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","ide_device_count","enable_ne2k","fs9p","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","$jscomp.makeIterator","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.do_many_cycles","do_many_cycles_unsafe","CPU.prototype.do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.run_hardware_timers","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","dpl","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","src","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.do_mul32","a00","a16","b00","b16","low_result","high_result","CPU.prototype.do_imul32","is_neg","do_mul32","CPU.prototype.imul_reg32","do_imul32","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","sti","st0","fcom","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","integer_round","truncate","fucom","int32","invalid_arithmatic","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","show","neg","target_operand","result_mod","do_div32","dest_operand_low","dest_operand_high","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","new_tick","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","write_mmx64s","source16","destination16","read_mmx_mem64s","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte0","byte1","byte2","byte3","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","debug.show","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","s","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","FS","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","path","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","substring","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","FS.prototype.PrepareCAPs","url","OnSuccess","OnError","responseType","onreadystatechange","req.onreadystatechange","arrayBuffer","response","require","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put","key","KeyboardAdapter","keyup_handler","keydown_handler","blur_handler","keys_pressed","handle_code","keydown","keyboard","shiftKey","keyCode","className","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","removeEventListener","simulate_press","this.simulate_press","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","mousewheel_handler","wheelDelta","detail","SpeakerAdapter","AudioContext","webkitAudioContext","audio_context","beep_gain","createGain","gain","setValueAtTime","currentTime","connect","beep_oscillator","createOscillator","frequency","beep_enable","beep_playing","beep_frequency","pit_enabled","dac_processor","createScriptProcessor","onaudioprocess","dac_process","dac_buffer0","bufferSize","dac_buffer1","dac_enabled","beep_update","sampleRate","disconnect","warn","SpeakerAdapter.prototype.beep_update","current_time","SpeakerAdapter.prototype.dac_process","event","out","outputBuffer","copyToChannel","SerialAdapter","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","text_new_line","show_char","this.show_char","update","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onmessage","onclose","onerror","NetworkAdapter.prototype.send","load_file","options","http","method","as_text","headers","header_names","setRequestHeader","range","http.onload","progress","onprogress","http.onprogress","load_file_nodejs","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","determine_size","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","PART_SIZE","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.get_as_file","parts","existing_blocks","Number","sort","current_offset","File","put_on_settings","fs9p_json","add_file","files_to_load","loadable","async","OnJSONLoaded","adapter_bus","emulator_bus","keyboard_adapter","screen_adapter","DummyScreenAdapter","image_names","fs_url","base_url","starter","lengthComputable","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","V86Starter.prototype.keyboard_send_text","string","V86Starter.prototype.screen_make_screenshot","V86Starter.prototype.screen_set_scale","sx","sy","V86Starter.prototype.screen_go_fullscreen","focus_element","V86Starter.prototype.lock_mouse","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","V86Starter.prototype.read_file","graphic_buffer"]
}
