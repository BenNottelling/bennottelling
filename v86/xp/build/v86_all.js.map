{
"version":3,
"file":"build/v86_all.js",
"lineCount":566,
"mappings":"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R,CD0N4B/qB,IAAAknB,KAAA,CAAU,IAAA6D,EAAV,CC1N5B,ED6NOtC,CAAH,EAEI,IAAA0F,EACA,CADkB,CAClB,CAAA,IAAAD,EAAA,CAAyB,CAH7B,GASI,IAAAC,EACA,CADkB,EAClB,CAAA,IAAAD,EAAA,CAAyB,EAV7B,CC7NJ,CD2OI,IAAAD,EC3OJ,CD2O0B,IAAAlD,EC3O1B,CD2O8C,IAAAoD,EC3O9C,CD2OgE,IAAAD,EC3OhE,CD6OO,IAAAD,EC7OP,ID6OgC,IAAAA,EC7OhC,CD6OsD,CC7OtD,IDgPQ,IAAAA,EChPR,CDgP8BjuB,IAAAC,MAAA,CAAW,IAAAguB,EAAX,CChP9B,ED2PQ9O,CC3PR,CD2Pc7I,CAAA2I,EAAAE,GC3Pd,CD8PIA,CC9PJiP,GAAA,CApPwCC,EAoPxC,CAAA,ED+PiD,CC/PjD,ED+PgE,CC/PhE,CD+PsD,IAAA3F,GC/PtD,CDgQIvJ,CChQJiP,GAAA,CApQ+BE,EAoQ/B,CAAA,CDgQmCnP,CC3Q5BiP,GAAA,CAzPwBE,EAyPxB,CAWP,CDgQmE,EChQnE,CDgQ0E,GChQ1E,CDmQInP,CCnQJiP,GAAA,CDmQmB1uB,ECnQnB,CAAA,CDmQ4B,IAAAuuB,ECnQ5B,CDmQkD,GCnQlD,CDoQI9O,CCpQJiP,GAAA,CDoQmB1uB,ECpQnB,CAAA,CDoQ4B,IAAAuuB,ECpQ5B,EDoQmD,CCpQnD,CDoQuD,GCpQvD,CDqQI9O,CCrQJiP,GAAA,CDqQmB1uB,ECrQnB,CAAA,CDqQ4B,IAAAyuB,ECrQ5B,CDqQ8C,GCrQ9C,CDsQIhP,CCtQJiP,GAAA,CDsQmB1uB,ECtQnB,CAAA,CDsQ4ByS,GCtQ5B,CDuQIgN,CCvQJiP,GAAA,CDuQmB1uB,ECvQnB,CAAA,CDuQ4ByS,GCvQ5B,CDwQIgN,CCxQJiP,GAAA,CDwQmB1uB,ECxQnB,CAAA;ADwQ4ByS,GCxQ5B,CDyQIgN,CCzQJiP,GAAA,CDyQmB1uB,ECzQnB,CAAA,CDyQ4B,IAAAuuB,ECzQ5B,CDyQkD,GCzQlD,CD0QI9O,CC1QJiP,GAAA,CD0QmB1uB,EC1QnB,CAAA,CD0Q4B,IAAAuuB,EC1Q5B,ED0QmD,CC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",
"sources":["lib/closure-base.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/string/endswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/math/trunc] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] ","lib/9p.js","lib/filesystem.js","src/browser/screen.js","src/browser/main.js","src/browser/starter.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","lib/marshall.js","lib/utf8.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/dummy_screen.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) ||\n      !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      // goog.require only return a value with-in goog.module files.\n      return name in goog.loadedModules_ ?\n          goog.loadedModules_[name] :\n          goog.getObjectByName(name);\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareTestMethods: boolean\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Indicate that a module's exports that are known test methods should\n * be copied to the global object.  This makes the test methods visible to\n * test runners that inspect the global object.\n *\n * TODO(johnlenz): Make the test framework aware of goog.module so\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\n * to minimize boiler plate.\n * @suppress {missingProvide}\n * @deprecated This approach does not translate to ES6 module syntax, instead\n *    use goog.testing.testSuite to declare the test methods.\n */\ngoog.module.declareTestMethods = function() {\n  if (!goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareTestMethods must be called from ' +\n        'within a goog.module');\n  }\n  goog.moduleLoaderState_.declareTestMethods = true;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\n *     a module as declared by goog.module.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.pathIsModule[path] = !!opt_isModule;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      } else {\n        return null;\n      }\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default, the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @private {!Object<string, boolean>}\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   pathIsModule: !Object<string, boolean>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    pathIsModule: {}, // 1 to 1\n\n    nameToPath: {}, // 1 to 1\n\n    requires: {}, // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {}, // Used to keep track of script files we have written.\n\n    deferred: {} // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('SCRIPT');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @const @private {boolean} */\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\n      goog.global.document.all;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of the module.\n   * @param {string} src Script source URL.\n   * @private\n   */\n  goog.importModule_ = function(src) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\n\n    if (goog.importScript_('', bootstrap)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' +\n          scriptText +\n          '\\n' + // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) &&\n        goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && goog.dependencies_.pathIsModule[path]) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * @param {function(?):?|string} moduleDef The module definition.\n   */\n  goog.loadModule = function(moduleDef) {\n    // NOTE: we allow function definitions to be either in the from\n    // of a string to eval (which keeps the original source intact) or\n    // in a eval forbidden environment (CSP) we allow a function definition\n    // which in its body must call {@code goog.module}, and return the exports\n    // of the module.\n    var previousState = goog.moduleLoaderState_;\n    try {\n      goog.moduleLoaderState_ = {\n        moduleName: undefined, declareTestMethods: false};\n      var exports;\n      if (goog.isFunction(moduleDef)) {\n        exports = moduleDef.call(goog.global, {});\n      } else if (goog.isString(moduleDef)) {\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\n      } else {\n        throw Error('Invalid module definition');\n      }\n\n      var moduleName = goog.moduleLoaderState_.moduleName;\n      if (!goog.isString(moduleName) || !moduleName) {\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n      }\n\n      // Don't seal legacy namespaces as they may be uses as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\n        Object.seal(exports);\n      }\n\n      goog.loadedModules_[moduleName] = exports;\n      if (goog.moduleLoaderState_.declareTestMethods) {\n        for (var entry in exports) {\n          if (entry.indexOf('test', 0) === 0 ||\n              entry == 'tearDown' ||\n              entry == 'setUp' ||\n              entry == 'setUpPage' ||\n              entry == 'tearDownPage') {\n            goog.global[entry] = exports[entry];\n          }\n        }\n      }\n    } finally {\n      goog.moduleLoaderState_ = previousState;\n    }\n  };\n\n\n  /**\n   * @param {string} source\n   * @return {!Object}\n   * @private\n   */\n  goog.loadModuleFromSource_ = function(source) {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    var doc = goog.global.document;\n    var scriptEl = doc.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var isOldIE = goog.IS_OLD_IE_;\n\n      if (opt_sourceText === undefined) {\n        if (!isOldIE) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' +\n                  src + '\"' + state + '></' + 'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            opt_sourceText +\n            '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {!HTMLScriptElement} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    var loadingModule = false;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        if (!deps.pathIsModule[path]) {\n          goog.importScript_(goog.basePath + path);\n        } else {\n          loadingModule = true;\n          goog.importModule_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (i && components[i] == '..' &&\n        components[i - 1] && components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {string} File contents.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    var xhr = new goog.global['XMLHttpRequest']();\n    xhr.open('get', src, false);\n    xhr.send();\n    return xhr.responseText;\n  }\n};\n\n\n/**\n * Retrieve and execute a module.\n * @param {string} src Script source URL.\n * @private\n */\ngoog.retrieveAndExecModule_ = function(src) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n\n    if (scriptText != null) {\n      var execModuleScript = goog.wrapModule_(src, scriptText);\n      var isOldIE = goog.IS_OLD_IE_;\n      if (isOldIE) {\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\n        goog.queuedModules_.push(originalPath);\n      } else {\n        importScript(src, execModuleScript);\n      }\n    } else {\n      throw new Error('load of ' + src + 'failed');\n    }\n  }\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\n *     deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('SCRIPT');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\n                'with strict mode code. See ' +\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {\n *     !Object|\n *     {constructor:!Function}|\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\n * @suppress {missingProvide}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by\n * goog.defineClass should be sealed when possible.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\n      Object.seal instanceof Function) {\n    // Don't seal subclasses of unsealable-tagged legacy classes.\n    if (superClass && superClass.prototype &&\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\n      return ctr;\n    }\n    /**\n     * @this {Object}\n     * @return {?}\n     */\n    var wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n    return wrappedCtr;\n  }\n  return ctr;\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor.  As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n'declare global';\n'declare window';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ? global : maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\", but there's not\n// currently any way to do this in the existing type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    return /** @type {symbol} */ (\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + (counter++));\n  }\n  return Symbol;\n})();\n\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.arrayIterator(this);\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Returns an iterator from the given array.\n * @param {!Array<T>} array\n * @return {!IteratorIterable<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  var index = 0;\n  return $jscomp.iteratorPrototype(function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  });\n};\n\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() { return this; };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator for the given iterable.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  $jscomp.initSymbolIterator();\n\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = /** @type {?} */ (iterable)[Symbol.iterator];\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","// -------------------------------------------------\n// --------------------- 9P ------------------------\n// -------------------------------------------------\n// Implementation of the 9p filesystem device following the \n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\n\n\"use strict\";\n\n// TODO\n// flush\n// lock?\n// correct hard links\n\nvar EPERM = 1;       /* Operation not permitted */\nvar ENOENT = 2;      /* No such file or directory */\nvar EINVAL = 22;     /* Invalid argument */\nvar ENOTSUPP = 524;  /* Operation is not supported */\nvar ENOTEMPTY = 39;  /* Directory not empty */\nvar EPROTO    = 71   /* Protocol error */\n\nvar P9_SETATTR_MODE = 0x00000001;\nvar P9_SETATTR_UID = 0x00000002;\nvar P9_SETATTR_GID = 0x00000004;\nvar P9_SETATTR_SIZE = 0x00000008;\nvar P9_SETATTR_ATIME = 0x00000010;\nvar P9_SETATTR_MTIME = 0x00000020;\nvar P9_SETATTR_CTIME = 0x00000040;\nvar P9_SETATTR_ATIME_SET = 0x00000080;\nvar P9_SETATTR_MTIME_SET = 0x00000100;\n\nvar P9_STAT_MODE_DIR = 0x80000000;\nvar P9_STAT_MODE_APPEND = 0x40000000;\nvar P9_STAT_MODE_EXCL = 0x20000000;\nvar P9_STAT_MODE_MOUNT = 0x10000000;\nvar P9_STAT_MODE_AUTH = 0x08000000;\nvar P9_STAT_MODE_TMP = 0x04000000;\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\nvar P9_STAT_MODE_LINK = 0x01000000;\nvar P9_STAT_MODE_DEVICE = 0x00800000;\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\nvar P9_STAT_MODE_SOCKET = 0x00100000;\nvar P9_STAT_MODE_SETUID = 0x00080000;\nvar P9_STAT_MODE_SETGID = 0x00040000;\nvar P9_STAT_MODE_SETVTX = 0x00010000;\n\nvar FID_NONE = -1;\nvar FID_INODE = 1;\nvar FID_XATTR = 2;\n\n/** \n * @constructor \n *\n * @param {FS} filesystem\n */\nfunction Virtio9p(filesystem, bus) {\n    /** @const @type {FS} */\n    this.fs = filesystem;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.SendReply = function(x, y) {};\n    this.deviceid = 0x9; // 9p filesystem\n    this.hostfeature = 0x1; // mountpoint\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\n\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\n    this.VERSION = \"9P2000.L\";\n    this.BLOCKSIZE = 8192; // Let's define one page.\n    this.msize = 8192; // maximum message size\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\n    this.replybuffersize = 0;\n\n    this.fids = [];\n}\n\nVirtio9p.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.deviceid;\n    state[1] = this.hostfeature;\n    state[2] = this.configspace;\n    state[3] = this.VERSION;\n    state[4] = this.BLOCKSIZE;\n    state[5] = this.msize;\n    state[6] = this.replybuffer;\n    state[7] = this.replybuffersize;\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\n\n    return state;\n};\n\nVirtio9p.prototype.set_state = function(state)\n{\n    this.deviceid = state[0];\n    this.hostfeature = state[1];\n    this.configspace = state[2];\n    this.VERSION = state[3];\n    this.BLOCKSIZE = state[4];\n    this.msize = state[5];\n    this.replybuffer = state[6];\n    this.replybuffersize = state[7];\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\n};\n\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\n\treturn {inodeid: inode, type: type, uid: uid};\n}\n\nVirtio9p.prototype.Reset = function() {\n    this.fids = [];\n}\n\n\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\n    if ((payloadsize+7) >= this.replybuffer.length) {\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\n    }\n    //for(var i=0; i<payload.length; i++)\n    //    this.replybuffer[7+i] = payload[i];\n    this.replybuffersize = payloadsize+7;\n    return;\n}\n\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\n    this.BuildReply(6, tag, size);\n}\n\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\n    var size = header[0];\n    var id = header[1];\n    var tag = header[2];\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\n\n    switch(id)\n    {\n        case 8: // statfs\n            size = this.fs.GetTotalSize(); // size used by all files\n            var space = this.fs.GetSpace();\n            var req = [];\n            req[0] = 0x01021997;\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\n            req[2] = Math.floor(space/req[1]); // free blocks, let's say 1GB\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\n            req[5] = this.fs.inodes.length; // total number of inodes\n            req[6] = 1024*1024;\n            req[7] = 0; // file system id?\n            req[8] = 256; // maximum length of filenames\n\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 112: // topen\n        case 12: // tlopen\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var mode = req[1];\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\n            var idx = this.fids[fid].inodeid;\n            var inode = this.fs.GetInode(idx);\n            message.Debug(\"file open \" + inode.name);\n            //if (inode.status == STATUS_LOADING) return;\n            var ret = this.fs.OpenInode(idx, mode);\n\n            this.fs.AddEvent(this.fids[fid].inodeid,\n                function() {\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\n                    req[0] = inode.qid;\n                    req[1] = this.msize - 24;\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\n                    this.BuildReply(id, tag, 13+4);\n                    this.SendReply(0, index);\n                }.bind(this)\n            );\n            break;\n\n        case 70: // link (just copying)\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var dfid = req[0];\n            var fid = req[1];\n            var name = req[2];\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\n            var inode = this.fs.CreateInode();\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\n            //inode = inodetarget;\n            inode.mode = inodetarget.mode;\n            inode.size = inodetarget.size;\n            inode.symlink = inodetarget.symlink;\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\n            for(var i=0; i<inode.size; i++) {\n                data[i] = targetdata[i];\n            }\n            inode.name = name;\n            inode.parentid = this.fids[dfid].inodeid;\n            this.fs.PushInode(inode);\n            \n            //inode.uid = inodetarget.uid;\n            //inode.gid = inodetarget.gid;\n            //inode.mode = inodetarget.mode | S_IFLNK;\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);       \n            break;\n\n        case 16: // symlink\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var symgt = req[2];\n            var gid = req[3];\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 18: // mknod\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var major = req[3];\n            var minor = req[4];\n            var gid = req[5];\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n\n        case 22: // TREADLINK\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            var fid = req[0];\n            message.Debug(\"[readlink] fid=\" + fid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n\n        case 72: // tmkdir\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var gid = req[3];\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode | S_IFDIR;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 14: // tlcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var flags = req[2];\n            var mode = req[3];\n            var gid = req[4];\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\n            this.fids[fid].inodeid = idx;\n            this.fids[fid].type = FID_INODE;\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            inode.mode = mode;\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13+4);\n            this.SendReply(0, index);\n            break;\n\n        case 52: // lock always suceed\n            message.Debug(\"lock file\\n\");\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\n            this.BuildReply(id, tag, 1);\n            this.SendReply(0, index);\n            break;\n\n        /*\n        case 54: // getlock\n            break;        \n        */\n\n        case 24: // getattr\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"getattr: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            req[0] |= 0x1000; // P9_STATS_GEN\n\n            req[0] = req[1]; // request mask\n            req[1] = inode.qid;\n\n            req[2] = inode.mode; \n            req[3] = inode.uid; // user id\n            req[4] = inode.gid; // group id\n            \n            req[5] = 0x1; // number of hard links\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\n            req[7] = inode.size; // size low\n            req[8] = this.BLOCKSIZE;\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\n            req[10] = inode.atime; // atime\n            req[11] = 0x0;\n            req[12] = inode.mtime; // mtime\n            req[13] = 0x0;\n            req[14] = inode.ctime; // ctime\n            req[15] = 0x0;\n            req[16] = 0x0; // btime\n            req[17] = 0x0; \n            req[18] = 0x0; // st_gen\n            req[19] = 0x0; // data_version\n            marshall.Marshall([\n            \"d\", \"Q\", \n            \"w\",  \n            \"w\", \"w\", \n            \"d\", \"d\", \n            \"d\", \"d\", \"d\",\n            \"d\", \"d\", // atime\n            \"d\", \"d\", // mtime\n            \"d\", \"d\", // ctime\n            \"d\", \"d\", // btime\n            \"d\", \"d\",\n            ], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\n            this.SendReply(0, index);\n            break;\n\n        case 26: // setattr\n            var req = marshall.Unmarshall2([\"w\", \"w\", \n                \"w\", // mode \n                \"w\", \"w\", // uid, gid\n                \"d\", // size\n                \"d\", \"d\", // atime\n                \"d\", \"d\"] // mtime\n            , GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\n            if (req[1] & P9_SETATTR_MODE) {\n                inode.mode = req[2];\n            }\n            if (req[1] & P9_SETATTR_UID) {\n                inode.uid = req[3];\n            }\n            if (req[1] & P9_SETATTR_GID) {\n                inode.gid = req[4];\n            }\n            if (req[1] & P9_SETATTR_ATIME) {\n                inode.atime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_MTIME) {\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_CTIME) {\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_ATIME_SET) {\n                inode.atime = req[6];\n            }\n            if (req[1] & P9_SETATTR_MTIME_SET) {\n                inode.mtime = req[8];\n            }\n            if (req[1] & P9_SETATTR_SIZE) {\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 50: // fsync\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 40: // TREADDIR\n        case 116: // read\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"read/treaddir: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            if (this.fids[fid].type == FID_XATTR) {\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\n                for(var i=0; i<count; i++)\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                this.BuildReply(id, tag, 4 + count);\n                this.SendReply(0, index);\n            } else {\n                var file = this.fs.inodes[this.fids[fid].inodeid];\n                this.bus.send(\"9p-read-start\");\n\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\n                this.fs.AddEvent(this.fids[fid].inodeid,\n                    function() {\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\n\n                        if (inode.size < offset+count) count = inode.size - offset;\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\n                        if(data) {\n                            for(var i=0; i<count; i++)\n                                this.replybuffer[7+4+i] = data[offset+i];\n                        }\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                        this.BuildReply(id, tag, 4 + count);\n                        this.SendReply(0, index);\n                    }.bind(this)\n                );\n            }\n            break;\n\n        case 118: // write\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\n\n            var file = this.fs.inodes[this.fids[fid].inodeid];\n            this.bus.send(\"9p-write-end\", [file.name, count]);\n\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n            this.BuildReply(id, tag, 4);\n            this.SendReply(0, index);\n            break;\n\n        case 74: // RENAMEAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\n            var olddirfid = req[0];\n            var oldname = req[1];\n            var newdirfid = req[2];\n            var newname = req[3];\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\n            if (ret == false) {\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 76: // TUNLINKAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\n            var dirfd = req[0];\n            var name = req[1];\n            var flags = req[2];\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\n            if (fid == -1) {\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\n                   this.SendReply(0, index);\n                   break;\n            }\n            var ret = this.fs.Unlink(fid);\n            if (!ret) {\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 100: // version\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\n            this.msize = version[0];\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 104: // attach\n            // return root directorie's QID\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var uid = req[4];\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 108: // tflush\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\n            var oldtag = req[0];\n            message.Debug(\"[flush] \" + tag);\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n\n        case 110: // walk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\n            var fid = req[0];\n            var nwfid = req[1];\n            var nwname = req[2];\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\n            if (nwname == 0) {\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\n                this.BuildReply(id, tag, 2);\n                this.SendReply(0, index);\n                break;\n            }\n            var wnames = [];\n            for(var i=0; i<nwname; i++) {\n                wnames.push(\"s\");\n            }\n            var walk = marshall.Unmarshall2(wnames, GetByte);\n            var idx = this.fids[fid].inodeid;\n            var offset = 7+2;\n            var nwidx = 0;\n            //console.log(idx, this.fs.inodes[idx]);\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\n            for(var i=0; i<nwname; i++) {\n                idx = this.fs.Search(idx, walk[i]);\n\n                if (idx == -1) {\n                   message.Debug(\"Could not find: \" + walk[i]);\n                   break;\n                }\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\n                nwidx++;\n                //message.Debug(this.fids[nwfid].inodeid);\n                //this.fids[nwfid].inodeid = idx;\n                //this.fids[nwfid].type = FID_INODE;\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\n            }\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\n            this.BuildReply(id, tag, offset-7);\n            this.SendReply(0, index);\n            break;\n\n        case 120: // clunk\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            message.Debug(\"[clunk]: fid=\" + req[0]);\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\n                this.fids[req[0]].inodeid = -1;\n                this.fids[req[0]].type = FID_NONE;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 32: // txattrcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var attr_size = req[2];\n            var flags = req[3];\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\n            //this.SendReply(0, index);\n            break;\n\n        case 30: // xattrwalk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var fid = req[0];\n            var newfid = req[1];\n            var name = req[2];\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\n            //this.fids[newfid].type = FID_NONE;\n            var length = 0;\n            if (name == \"security.capability\") {\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\n                this.fids[newfid].type = FID_XATTR;\n            }\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\n            this.BuildReply(id, tag, 8);\n            this.SendReply(0, index);\n            break;\n\n        default:\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\n            message.Abort();\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\n            //this.SendReply(0, index);\n            break;\n    }\n\n    //consistency checks if there are problems with the filesystem\n    //this.fs.Check();\n}\n\n","// -------------------------------------------------\n// ----------------- FILESYSTEM---------------------\n// -------------------------------------------------\n// Implementation of a unix filesystem in memory.\n\n\"use strict\";\n\nvar S_IRWXUGO = 0x1FF;\nvar S_IFMT = 0xF000;\nvar S_IFSOCK = 0xC000;\nvar S_IFLNK = 0xA000;\nvar S_IFREG = 0x8000;\nvar S_IFBLK = 0x6000;\nvar S_IFDIR = 0x4000;\nvar S_IFCHR = 0x2000;\n\n//var S_IFIFO  0010000\n//var S_ISUID  0004000\n//var S_ISGID  0002000\n//var S_ISVTX  0001000\n\nvar O_RDONLY = 0x0000; // open for reading only \nvar O_WRONLY = 0x0001; // open for writing only\nvar O_RDWR = 0x0002; // open for reading and writing\nvar O_ACCMODE = 0x0003; // mask for above modes\n\nvar STATUS_INVALID = -0x1;\nvar STATUS_OK = 0x0;\nvar STATUS_OPEN = 0x1;\nvar STATUS_ON_SERVER = 0x2;\nvar STATUS_LOADING = 0x3;\nvar STATUS_UNLINKED = 0x4;\n\n\n/** @const */ var JSONFS_VERSION = 2;\n\n\n/** @const */ var JSONFS_IDX_NAME = 0\n/** @const */ var JSONFS_IDX_SIZE = 1\n/** @const */ var JSONFS_IDX_MTIME = 2\n/** @const */ var JSONFS_IDX_MODE = 3\n/** @const */ var JSONFS_IDX_UID = 4\n/** @const */ var JSONFS_IDX_GID = 5\n/** @const */ var JSONFS_IDX_TARGET = 6\n\n\n/** @constructor */\nfunction FS(baseurl) {\n    /** @type {Array.<Inode>} */\n    this.inodes = [];\n    this.events = [];\n\n    this.baseurl = baseurl;\n\n    this.qidnumber = 0x0;\n    this.filesinloadingqueue = 0;\n    this.OnLoaded = function() {};\n\n    //this.tar = new TAR(this);\n\n    this.inodedata = {};\n\n    this.total_size = 256 * 1024 * 1024 * 1024;\n    this.used_size = 0;\n\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\n    //RegisterMessage(\"tar\",\n    //    function(data) {\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n    //RegisterMessage(\"sync\",\n    //    function(data) {\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n\n    // root entry\n    this.CreateDirectory(\"\", -1);\n}\n\n\n// -----------------------------------------------------\n\nFS.prototype.AddEvent = function(id, OnEvent) {\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_OK) {\n        OnEvent();\n        return;\n    }\n    this.events.push({id: id, OnEvent: OnEvent});    \n}\n\nFS.prototype.HandleEvent = function(id) {\n\n    if (this.filesinloadingqueue == 0) {\n        this.OnLoaded();\n        this.OnLoaded = function() {}\n    }\n    //message.Debug(\"number of events: \" + this.events.length);\n    var newevents = [];\n    for(var i=0; i<this.events.length; i++) {\n        if (this.events[i].id == id) {\n            this.events[i].OnEvent();\n        } else {\n            newevents.push(this.events[i]);\n        }\n    }\n    this.events = newevents;\n}\n\nFS.prototype.OnJSONLoaded = function(fs)\n{\n    if(DEBUG)\n    {\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\n    }\n\n    //console.time(\"parse\");\n    var fsdata = JSON.parse(fs);\n    //console.timeEnd(\"parse\");\n\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\n    {\n        throw \"The filesystem JSON format has changed. \" +\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\n    }\n\n    var fsroot = fsdata[\"fsroot\"];\n    this.used_size = fsdata[\"size\"];\n\n    var me = this;\n\n    setTimeout(function()\n    {\n        //console.time(\"Load\");\n        //console.profile(\"Load\");\n        for(var i = 0; i < fsroot.length; i++) {\n            me.LoadRecursive(fsroot[i], 0);\n        }\n        //console.profileEnd(\"Load\");\n        //console.timeEnd(\"Load\");\n\n        //if(DEBUG)\n        //{\n        //    console.time(\"Check\");\n        //    me.Check();\n        //    console.timeEnd(\"Check\");\n        //}\n\n        me.OnLoaded();\n        me.OnLoaded = function() {};\n    }, 0);\n};\n\nFS.prototype.LoadRecursive = function(data, parentid)\n{\n    var inode = this.CreateInode();\n\n    inode.name = data[JSONFS_IDX_NAME]\n    inode.size = data[JSONFS_IDX_SIZE];\n    inode.mtime = data[JSONFS_IDX_MTIME];\n    inode.ctime = inode.mtime;\n    inode.atime = inode.mtime;\n    inode.mode = data[JSONFS_IDX_MODE];\n    inode.uid = data[JSONFS_IDX_UID];\n    inode.gid = data[JSONFS_IDX_GID];\n\n    inode.parentid = parentid;\n\n    var ifmt = inode.mode & S_IFMT;\n\n    if(ifmt === S_IFDIR)\n    {\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\n    }\n    else if(ifmt === S_IFREG)\n    {\n        inode.status = STATUS_ON_SERVER;\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFLNK)\n    {\n        inode.symlink = data[JSONFS_IDX_TARGET];\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFSOCK)\n    {\n        // socket: ignore\n    }\n    else\n    {\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\n    }\n}\n\nFS.prototype.LoadDir = function(inode, children)\n{\n    inode.updatedir = true;\n\n    var p = this.inodes.length;\n    this.PushInode(inode);\n\n    for(var i = 0; i < children.length; i++) {\n        this.LoadRecursive(children[i], p);\n    }\n}\n\n// Loads the data from a url for a specific inode\nFS.prototype.LoadFile = function(idx) {\n    var inode = this.inodes[idx];\n    if (inode.status != STATUS_ON_SERVER) {\n        return;\n    }\n    inode.status = STATUS_LOADING;\n    this.filesinloadingqueue++;\n\n    //if (inode.compressed) {\n    //    inode.data = new Uint8Array(inode.size);\n    //    LoadBinaryResource(inode.url + \".bz2\",\n    //    function(buffer){\n    //        var buffer8 = new Uint8Array(buffer);\n    //        var ofs = 0;\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \n    //        inode.status = STATUS_OK;\n    //        this.filesinloadingqueue--;\n    //        this.HandleEvent(idx);            \n    //    }.bind(this), \n    //    function(error){throw error;});\n    //    return;\n    //}\n\n    if(this.baseurl)\n    {\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \n            function(buffer){\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\n                inode.size = data.length; // correct size if the previous was wrong. \n                inode.status = STATUS_OK;\n\n                this.filesinloadingqueue--;\n                this.HandleEvent(idx);            \n            }.bind(this), \n            function(error){throw error;});\n    }\n    else\n    {\n        // If baseurl is not set, we started with an empty filesystem. No files\n        // can be loaded\n    }\n}\n\n// -----------------------------------------------------\n\nFS.prototype.PushInode = function(inode) {\n    if (inode.parentid != -1) {\n        this.inodes.push(inode);\n        inode.fid = this.inodes.length - 1;\n        var parent_node = this.inodes[inode.parentid];\n        parent_node.updatedir = true;\n        inode.nextid = parent_node.firstid;\n        parent_node.firstid = this.inodes.length-1;\n        return;\n    } else {\n        if (this.inodes.length == 0) { // if root directory\n            this.inodes.push(inode);\n            return;\n        }\n    }\n\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\n    message.Abort();\n\n}\n\n/** @constructor */\nfunction Inode(qidnumber)\n{\n    this.updatedir = false; // did the directory listing changed?\n    this.parentid = -1;\n    this.firstid = -1; // first file id in directory\n    this.nextid = -1; // next id in directory\n    this.status = 0;\n    this.name = \"\";\n    this.size = 0x0;\n    this.uid = 0x0;\n    this.gid = 0x0;\n    this.fid = 0;\n    this.ctime = 0;\n    this.atime = 0;\n    this.mtime = 0;\n    this.major = 0x0;\n    this.minor = 0x0;\n    //data = new Uint8Array(0);\n    this.symlink = \"\";\n    this.mode = 0x01ED;\n    this.qid = {\n        type: 0, \n        version: 0, \n        path: qidnumber\n    };\n    this.caps = undefined;\n\n    //this.qid_type = 0;\n    //this.qid_version = 0;\n    //this.qid_path = qidnumber;\n}\n\nFS.prototype.CreateInode = function() {\n    //console.log(\"CreateInode\", Error().stack);\n    return new Inode(++this.qidnumber);\n};\n\n\nFS.prototype.CreateDirectory = function(name, parentid) {\n    var x = this.CreateInode();\n    x.name = name;\n    x.parentid = parentid;\n    x.mode = 0x01FF | S_IFDIR;\n    x.updatedir = true;\n    if (parentid >= 0) {\n        x.uid = this.inodes[parentid].uid;\n        x.gid = this.inodes[parentid].gid;\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\n    }\n    x.qid.type = S_IFDIR >> 8;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateFile = function(filename, parentid) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFREG >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\n    return this.inodes.length-1;\n}\n\n\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.major = major;\n    x.minor = minor;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFSOCK >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n     \nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    x.qid.type = S_IFLNK >> 8;\n    x.symlink = symlink;\n    x.mode = S_IFLNK;\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(str.length);\n    x.size = str.length;\n    for (var j = 0; j < str.length; j++) {\n        data[j] = str.charCodeAt(j);\n    }\n    return id;\n}\n\n/** \n * @param {Uint8Array} buffer\n */\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\n    data.set(buffer);\n    x.size = buffer.length;\n    return id;\n}\n\n\nFS.prototype.OpenInode = function(id, mode) {\n    var inode = this.GetInode(id);\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n        this.FillDirectory(id);\n    }\n    /*\n    var type = \"\";\n    switch(inode.mode&S_IFMT) {\n        case S_IFREG: type = \"File\"; break;\n        case S_IFBLK: type = \"Block Device\"; break;\n        case S_IFDIR: type = \"Directory\"; break;\n        case S_IFCHR: type = \"Character Device\"; break;\n    }\n    */\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\n    if (inode.status == STATUS_ON_SERVER) {\n        this.LoadFile(id);\n        return false;\n    }\n    return true;\n}\n\nFS.prototype.CloseInode = function(id) {\n    //message.Debug(\"close: \" + this.GetFullPath(id));\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_UNLINKED) {\n        //message.Debug(\"Filesystem: Delete unlinked file\");\n        inode.status = STATUS_INVALID;\n        delete this.inodedata[id];\n        inode.size = 0;\n    }\n}\n\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\n    if ((olddirid == newdirid) && (oldname == newname)) {\n        return true;\n    }\n    var oldid = this.Search(olddirid, oldname);\n    var oldpath = this.GetFullPath(oldid);\n    if (oldid == -1) {\n        return false;\n    }\n    var newid = this.Search(newdirid, newname);\n    if (newid != -1) {\n        this.Unlink(newid);\n    }\n\n    var idx = oldid; // idx contains the id which we want to rename\n    var inode = this.inodes[idx];\n\n    // remove inode ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n\n    inode.parentid = newdirid;\n    inode.name = newname;\n    inode.qid.version++;\n\n    inode.nextid = this.inodes[inode.parentid].firstid;\n    this.inodes[inode.parentid].firstid = idx;\n\n    this.inodes[olddirid].updatedir = true;\n    this.inodes[newdirid].updatedir = true;\n\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\n    \n    return true;\n}\n\nFS.prototype.Write = function(id, offset, count, GetByte) {\n    this.NotifyListeners(id, 'write');\n    var inode = this.inodes[id];\n    var data = this.inodedata[id];\n\n    if (!data || data.length < (offset+count)) {\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\n        inode.size = offset + count;\n        data = this.inodedata[id];\n    } else\n    if (inode.size < (offset+count)) {\n        inode.size = offset + count;\n    }\n    for(var i=0; i<count; i++)\n        data[offset+i] = GetByte();\n}\n\nFS.prototype.Search = function(parentid, name) {\n    var id = this.inodes[parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].parentid != parentid) { // consistency check\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\n        }\n        if (this.inodes[id].name == name) return id;\n        id = this.inodes[id].nextid;\n    }\n    return -1;\n}\n\nFS.prototype.GetTotalSize = function() {\n    return this.used_size;\n    //var size = 0;\n    //for(var i=0; i<this.inodes.length; i++) {\n    //    var d = this.inodes[i].data;\n    //    size += d ? d.length : 0;\n    //}\n    //return size;\n}\n\nFS.prototype.GetSpace = function() {\n    return this.total_size;\n};\n\nFS.prototype.GetFullPath = function(idx) {\n    var path = \"\";\n\n    while(idx != 0) {\n        path = \"/\" + this.inodes[idx].name + path;\n        idx = this.inodes[idx].parentid;\n    }\n    return path.substring(1);\n}\n\n// no double linked list. So, we need this\nFS.prototype.FindPreviousID = function(idx) {\n    var inode = this.GetInode(idx);\n    var id = this.inodes[inode.parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].nextid == idx) return id;\n        id = this.inodes[id].nextid;\n    }\n    return id;\n}\n\nFS.prototype.Unlink = function(idx) {\n    this.NotifyListeners(idx, 'delete');\n    if (idx == 0) return false; // root node cannot be deleted\n    var inode = this.GetInode(idx);\n    //message.Debug(\"Unlink \" + inode.name);\n\n    // check if directory is not empty\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n       if (inode.firstid != -1) return false;\n    }\n\n    // update ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n    // don't delete the content. The file is still accessible\n    this.inodes[inode.parentid].updatedir = true;\n    inode.status = STATUS_UNLINKED;\n    inode.nextid = -1;\n    inode.firstid = -1;\n    inode.parentid = -1;\n    return true;\n}\n\nFS.prototype.GetInode = function(idx)\n{\n    if (isNaN(idx)) {\n        message.Debug(\"Error in filesystem: id is not a number \");\n        return 0;\n    }\n\n    if ((idx < 0) || (idx > this.inodes.length)) {\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\n        return 0;\n    }\n    return this.inodes[idx];\n}\n\nFS.prototype.ChangeSize = function(idx, newsize)\n{\n    var inode = this.GetInode(idx);\n    var temp = this.inodedata[idx];\n    //message.Debug(\"change size to: \" + newsize);\n    if (newsize == inode.size) return;\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\n    inode.size = newsize;\n    if(!temp) return;\n    var size = Math.min(temp.length, inode.size);\n    for(var i=0; i<size; i++) {\n        data[i] = temp[i];\n    }\n}\n\nFS.prototype.SearchPath = function(path) {\n    //path = path.replace(/\\/\\//g, \"/\");\n    path = path.replace(\"//\", \"/\");\n    var walk = path.split(\"/\");\n    var n = walk.length;\n    if (walk[n-1].length == 0) walk.pop();\n    if (walk[0].length == 0) walk.shift();\n    n = walk.length;\n\n    var parentid = 0;\n    var id = -1;\n    for(var i=0; i<n; i++) {\n        id = this.Search(parentid, walk[i]);        \n        if (id == -1) {\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\n        }\n        parentid = id;\n    }\n    return {id: id, parentid: parentid, name: walk[i]};\n}\n// -----------------------------------------------------\n\nFS.prototype.GetRecursiveList = function(dirid, list) {\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        list.push(id);\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\n            this.GetRecursiveList(id, list);\n        }\n        id = this.inodes[id].nextid;\n    }\n}\n\nFS.prototype.MergeFile = function(file) {\n    message.Debug(\"Merge path:\" + file.name);\n    var ids = this.SearchPath(file.name);\n    if (ids.parentid == -1) return; // not even the path seems to exist\n    if (ids.id == -1) {\n        ids.id = this.CreateFile(ids.name, ids.parentid); \n    }\n    this.inodes[ids.id].data = file.data;\n    this.inodes[ids.id].size = file.data.length;\n}\n\n\nFS.prototype.RecursiveDelete = function(path) {\n    var toDelete = []\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    this.GetRecursiveList(ids.id, toDelete);\n\n    for(var i=toDelete.length-1; i>=0; i--)\n        this.Unlink(toDelete[i]);\n\n}\n\nFS.prototype.DeleteNode = function(path) {\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\n        this.Unlink(ids.id);\n        return;\n    }\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\n        var toDelete = []\n        this.GetRecursiveList(ids.id, toDelete);\n        for(var i=toDelete.length-1; i>=0; i--)\n            this.Unlink(toDelete[i]);\n        this.Unlink(ids.id);\n        return;\n    }\n}\n\n/** @param {*=} info */\nFS.prototype.NotifyListeners = function(id, action, info) {\n    //if(info==undefined)\n    //    info = {};\n\n    //var path = this.GetFullPath(id);\n    //if (this.watchFiles[path] == true && action=='write') {\n    //  message.Send(\"WatchFileEvent\", path);\n    //}\n    //for (var directory in this.watchDirectories) {\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\n    //        var indexOf = path.indexOf(directory)\n    //        if(indexOf == 0 || indexOf == 1)\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \n    //    }\n    //}\n}\n\n\nFS.prototype.Check = function() {\n    for(var i=1; i<this.inodes.length; i++)\n    {\n        if (this.inodes[i].status == STATUS_INVALID) continue;\n        if (this.inodes[i].nextid == i) {\n            message.Debug(\"Error in filesystem: file points to itself\");\n            message.Abort();\n        }\n\n        var inode = this.GetInode(i);\n        if (inode.parentid < 0) {\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\n        }\n        var n = inode.name.length;\n        if (n == 0) {\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\n        }\n\n        for (var j in inode.name) {\n            var c = inode.name.charCodeAt(j);\n            if (c < 32) {\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\n            } \n        }\n    }\n\n}\n\n\nFS.prototype.FillDirectory = function(dirid) {\n    var inode = this.GetInode(dirid);\n    if (!inode.updatedir) return;\n    var parentid = inode.parentid;\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\n\n    // first get size\n    var size = 0;\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\n        id = this.inodes[id].nextid;\n    }\n\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\n    //message.Debug(\"size of dir entry: \" + size);\n    var data = this.inodedata[dirid] = new Uint8Array(size);\n    inode.size = size;\n\n    var offset = 0x0;\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[dirid].qid, \n        offset+13+8+1+2+1, \n        this.inodes[dirid].mode >> 12, \n        \".\"],\n        data, offset);\n\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[parentid].qid,\n        offset+13+8+1+2+2, \n        this.inodes[parentid].mode >> 12, \n        \"..\"],\n        data, offset);\n\n    id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[id].qid,\n        offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\n        this.inodes[id].mode >> 12,\n        this.inodes[id].name],\n        data, offset);\n        id = this.inodes[id].nextid;\n    }\n    inode.updatedir = false;\n}\n\n\n// -----------------------------------------------------\n\n// only support for security.capabilities\n// should return a  \"struct vfs_cap_data\" defined in\n// linux/capability for format\n// check also:\n//   sys/capability.h\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\nFS.prototype.PrepareCAPs = function(id) {\n    var inode = this.GetInode(id);\n    if (inode.caps) return inode.caps.length;\n    inode.caps = new Uint8Array(12);\n    // format is little endian\n    // magic_etc (revision=0x01: 12 bytes)\n    inode.caps[0]  = 0x00;\n    inode.caps[1]  = 0x00;\n    inode.caps[2]  = 0x00;\n    inode.caps[3]  = 0x01;\n    // permitted (full capabilities)\n    inode.caps[4]  = 0xFF;\n    inode.caps[5]  = 0xFF;\n    inode.caps[6]  = 0xFF;\n    inode.caps[7]  = 0xFF;\n    // inheritable (full capabilities\n    inode.caps[8]  = 0xFF;\n    inode.caps[9]  = 0xFF;\n    inode.caps[10] = 0xFF;\n    inode.caps[11] = 0xFF;\n\n    return inode.caps.length;\n}\n\n","\"use strict\";\n\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\n{\n    window.requestAnimationFrame =\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame;\n}\n\n\n/**\n * Adapter to use visual screen in browsers (in constrast to node)\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction ScreenAdapter(screen_container, bus)\n{\n    console.assert(screen_container, \"1st argument must be a DOM container\");\n\n    var\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\n        graphic_context = graphic_screen.getContext(\"2d\"),\n\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\n        cursor_element = document.createElement(\"div\");\n\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        /** @type {number} */\n        scale_x = 1,\n\n        /** @type {number} */\n        scale_y = 1,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        modified_pixel_min = 0,\n        modified_pixel_max = 0,\n\n        changed_rows,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    var screen = this;\n\n    // 0x12345 -> \"#012345\"\n    function number_as_color(n)\n    {\n        n = n.toString(16);\n\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\n    }\n\n\n    /**\n     * Charmaps that containt unicode sequences for the default dospage\n     * @const\n     */\n    var charmap_high = new Uint16Array([\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\n    ]);\n\n    /** @const */\n    var charmap_low = new Uint16Array([\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\n    ]);\n\n    var charmap = [],\n        chr;\n\n    for(var i = 0; i < 256; i++)\n    {\n        if(i > 127)\n        {\n            chr = charmap_high[i - 0x80];\n        }\n        else if(i < 32)\n        {\n            chr = charmap_low[i];\n        }\n        else\n        {\n            chr = i;\n        }\n\n        charmap[i] = String.fromCharCode(chr);\n    }\n\n    graphic_context[\"imageSmoothingEnabled\"] = false;\n\n    cursor_element.style.position = \"absolute\";\n    cursor_element.style.backgroundColor = \"#ccc\";\n    cursor_element.style.width = \"7px\";\n    cursor_element.style.display = \"inline-block\";\n\n    text_screen.style.display = \"block\";\n    graphic_screen.style.display = \"none\";\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        this.update_buffer(data);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-clear\", function()\n    {\n        this.clear_screen();\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\n    }, this);\n\n\n    this.init = function()\n    {\n        // not necessary, because this gets initialized by the bios early,\n        // but nicer to look at\n        this.set_size_text(80, 25);\n\n        this.timer();\n    };\n\n    this.make_screenshot = function()\n    {\n        try {\n            window.open(graphic_screen.toDataURL());\n        }\n        catch(e) {}\n    };\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n\n            changed_rows[row] = 1;\n        }\n    };\n\n    this.timer = function()\n    {\n        requestAnimationFrame(is_graphical ? update_graphical : update_text);\n    };\n\n    var update_text = function()\n    {\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            if(changed_rows[i])\n            {\n                screen.text_update_row(i);\n                changed_rows[i] = 0;\n            }\n        }\n\n        this.timer();\n    }.bind(this);\n\n    var update_graphical = function()\n    {\n        this.bus.send(\"screen-fill-buffer\");\n        this.timer();\n    }.bind(this);\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n\n        if(graphical)\n        {\n            text_screen.style.display = \"none\";\n            graphic_screen.style.display = \"block\";\n        }\n        else\n        {\n            text_screen.style.display = \"block\";\n            graphic_screen.style.display = \"none\";\n        }\n    };\n\n    this.clear_screen = function()\n    {\n        graphic_context.fillStyle = \"#000\";\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        changed_rows = new Int8Array(rows);\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n\n        while(text_screen.childNodes.length > rows)\n        {\n            text_screen.removeChild(text_screen.firstChild);\n        }\n\n        while(text_screen.childNodes.length < rows)\n        {\n            text_screen.appendChild(document.createElement(\"div\"));\n        }\n\n        for(var i = 0; i < rows; i++)\n        {\n            this.text_update_row(i);\n        }\n\n        update_scale_text();\n    };\n\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            width = buffer_width;\n            height = buffer_height;\n        }\n\n        graphic_screen.style.display = \"block\";\n\n        graphic_screen.width = width;\n        graphic_screen.height = height;\n\n        //graphic_screen.style.width = width * scale_x + \"px\";\n        //graphic_screen.style.height = height * scale_y + \"px\";\n\n        // Make sure to call this here, because pixels are transparent otherwise\n        //screen.clear_screen();\n\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n        update_scale_graphic();\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n        scale_x = s_x;\n        scale_y = s_y;\n\n        update_scale_text();\n        update_scale_graphic();\n    };\n    this.set_scale(scale_x, scale_y);\n\n    function update_scale_text()\n    {\n        elem_set_scale(text_screen, scale_x, scale_y, true);\n    }\n\n    function update_scale_graphic()\n    {\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\n    }\n\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\n    {\n        elem.style.width = \"\";\n        elem.style.height = \"\";\n\n        if(use_scale)\n        {\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\n        }\n\n        var rectangle = elem.getBoundingClientRect();\n\n        if(use_scale)\n        {\n            var scale_str = \"\";\n\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\n\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\n        }\n        else\n        {\n            // unblur non-fractional scales\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\n            {\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\n                graphic_screen.style.imageRendering = \"pixelated\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\n            }\n            else\n            {\n                graphic_screen.style.imageRendering = \"\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\n            }\n\n            // undo fractional css-to-device pixel ratios\n            var device_pixel_ratio = window.devicePixelRatio || 1;\n            if(device_pixel_ratio % 1 !== 0)\n            {\n                scale_x /= device_pixel_ratio;\n                scale_y /= device_pixel_ratio;\n            }\n        }\n\n        if(scale_x !== 1)\n        {\n            elem.style.width = rectangle.width * scale_x + \"px\";\n        }\n        if(scale_y !== 1)\n        {\n            elem.style.height = rectangle.height * scale_y + \"px\";\n        }\n    }\n\n    this.update_cursor_scanline = function(start, end)\n    {\n        if(start & 0x20)\n        {\n            cursor_element.style.display = \"none\";\n        }\n        else\n        {\n            cursor_element.style.display = \"inline\";\n\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\n        }\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            changed_rows[row] = 1;\n            changed_rows[cursor_row] = 1;\n\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.text_update_row = function(row)\n    {\n        var offset = 3 * row * text_mode_width,\n            row_element,\n            color_element,\n            fragment;\n\n        var bg_color,\n            fg_color,\n            text;\n\n        row_element = text_screen.childNodes[row];\n        fragment = document.createElement(\"div\");\n\n        for(var i = 0; i < text_mode_width; )\n        {\n            color_element = document.createElement(\"span\");\n\n            bg_color = text_mode_data[offset + 1];\n            fg_color = text_mode_data[offset + 2];\n\n            color_element.style.backgroundColor = number_as_color(bg_color);\n            color_element.style.color = number_as_color(fg_color);\n\n            text = \"\";\n\n            // put characters of the same color in one element\n            while(i < text_mode_width &&\n                text_mode_data[offset + 1] === bg_color &&\n                text_mode_data[offset + 2] === fg_color)\n            {\n                var ascii = text_mode_data[offset];\n\n                text += charmap[ascii];\n\n                i++;\n                offset += 3;\n\n                if(row === cursor_row)\n                {\n                    if(i === cursor_col)\n                    {\n                        // next row will be cursor\n                        // create new element\n                        break;\n                    }\n                    else if(i === cursor_col + 1)\n                    {\n                        // found the cursor\n                        fragment.appendChild(cursor_element);\n                        break;\n                    }\n                }\n            }\n\n            color_element.textContent = text;\n            fragment.appendChild(color_element);\n        }\n\n        row_element.parentNode.replaceChild(fragment, row_element);\n    };\n\n    this.update_buffer = function(layers)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            graphic_context.putImageData(\n                graphic_image_data,\n                0, 0\n            );\n\n            // For each visible layer that would've been drawn, draw a\n            // rectangle to visualise the layer instead.\n            graphic_context.strokeStyle = \"#0F0\";\n            graphic_context.lineWidth = 4;\n            layers.forEach((layer) =>\n            {\n                graphic_context.strokeRect(\n                    layer.buffer_x,\n                    layer.buffer_y,\n                    layer.buffer_width,\n                    layer.buffer_height\n                );\n            });\n            graphic_context.lineWidth = 1;\n            return;\n        }\n\n        layers.forEach((layer) =>\n        {\n            graphic_context.putImageData(\n                graphic_image_data,\n                layer.screen_x - layer.buffer_x,\n                layer.screen_y - layer.buffer_y,\n                layer.buffer_x,\n                layer.buffer_y,\n                layer.buffer_width,\n                layer.buffer_height\n            );\n        });\n    };\n\n    this.init();\n}\n\n\n","\"use strict\";\n\n(function()\n{\n    /** @const */\n    var ON_LOCALHOST = !location.hostname.endsWith(\"copy.sh\");\n\n    /** @const */\n    var HOST = ON_LOCALHOST ? \"\" : \"//i.copy.sh/\";\n\n    /** @const */\n    var OTHER_HOST = ON_LOCALHOST ? \"\" : \"//j.copy.sh:8880/\";\n\n    /** @const */\n    var ON_HTTPS = location.protocol === \"https:\";\n\n    function dump_file(ab, name)\n    {\n        if(!(ab instanceof Array))\n        {\n            ab = [ab];\n        }\n\n        var blob = new Blob(ab);\n        download(blob, name);\n    }\n\n    function download(file_or_blob, name)\n    {\n        var a = document.createElement(\"a\");\n        a[\"download\"] = name;\n        a.href = window.URL.createObjectURL(file_or_blob);\n        a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\n\n        if(document.createEvent)\n        {\n            var ev = document.createEvent(\"MouseEvent\");\n            ev.initMouseEvent(\"click\", true, true, window,\n                              0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            a.dispatchEvent(ev);\n        }\n        else\n        {\n            a.click();\n        }\n\n        window.URL.revokeObjectURL(a.href);\n    }\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    function get_query_arguments()\n    {\n        var query = location.search.substr(1).split(\"&\");\n        var parameters = {};\n\n        for(var i = 0; i < query.length; i++)\n        {\n            var param = query[i].split(\"=\");\n            parameters[param[0]] = decodeURIComponent(param[1]);\n        }\n\n        return parameters;\n    }\n\n    function set_title(text)\n    {\n        document.title = text + \" - Virtual x86\" +  (DEBUG ? \" - debug\" : \"\");\n    }\n\n    function format_timestamp(time)\n    {\n        if(time < 60)\n        {\n            return time + \"s\";\n        }\n        else if(time < 3600)\n        {\n            return (time / 60 | 0) + \"m \" + v86util.pad0(time % 60, 2) + \"s\";\n        }\n        else\n        {\n            return (time / 3600 | 0) + \"h \" +\n                v86util.pad0((time / 60 | 0) % 60, 2) + \"m \" +\n                v86util.pad0(time % 60, 2) + \"s\";\n        }\n    }\n\n    function chr_repeat(chr, count)\n    {\n        var result = \"\";\n\n        while(count-- > 0)\n        {\n            result += chr;\n        }\n\n        return result;\n    }\n\n    var progress_ticks = 0;\n\n    function show_progress(e)\n    {\n        var el = $(\"loading\");\n        el.style.display = \"block\";\n\n        if(e.file_index === e.file_count - 1 && e.loaded >= e.total - 2048)\n        {\n            // last file is (almost) loaded\n            el.textContent = \"Done downloading. Starting now ...\";\n            return;\n        }\n\n        var line = \"Downloading images \";\n\n        if(typeof e.file_index === \"number\" && e.file_count)\n        {\n            line += \"[\" + (e.file_index + 1) + \"/\" + e.file_count + \"] \";\n        }\n\n        if(e.total && typeof e.loaded === \"number\")\n        {\n            var per100 = Math.floor(e.loaded / e.total * 100);\n            per100 = Math.min(100, Math.max(0, per100));\n\n            var per50 = Math.floor(per100 / 2);\n\n            line += per100 + \"% [\";\n            line += chr_repeat(\"#\", per50);\n            line += chr_repeat(\" \", 50 - per50) + \"]\";\n        }\n        else\n        {\n            line += chr_repeat(\".\", progress_ticks++ % 50);\n        }\n\n        el.textContent = line;\n    }\n\n    function $(id)\n    {\n        var el = document.getElementById(id);\n\n        if(!el)\n        {\n            dbg_log(\"Element with id `\" + id + \"` not found\");\n        }\n\n        return el;\n    }\n\n    function onload()\n    {\n        if(!(\"responseType\" in new XMLHttpRequest))\n        {\n            alert(\"Your browser is not supported \" +\n                  \"because it doesn't have XMLHttpRequest.responseType\");\n            return;\n        }\n\n        var settings = {};\n\n        $(\"start_emulation\").onclick = function()\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_profile(\"custom\");\n\n            var images = [];\n            var last_file;\n\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                last_file = floppy_file;\n                settings.fda = { buffer: floppy_file };\n            }\n\n            var cd_file = $(\"cd_image\").files[0];\n            if(cd_file)\n            {\n                last_file = cd_file;\n                settings.cdrom = { buffer: cd_file };\n            }\n\n            var hd_file = $(\"hd_image\").files[0];\n            if(hd_file)\n            {\n                last_file = hd_file;\n                settings.hda = { buffer: hd_file };\n            }\n\n            if($(\"multiboot_image\"))\n            {\n                var multiboot_file = $(\"multiboot_image\").files[0];\n                if(multiboot_file)\n                {\n                    last_file = multiboot_file;\n                    settings.multiboot = { buffer: multiboot_file };\n                }\n            }\n\n            if(last_file)\n            {\n                set_title(last_file.name);\n            }\n\n            start_emulation(settings);\n        };\n\n        if(DEBUG)\n        {\n            debug_onload(settings);\n        }\n\n        var oses = [\n            {\n                id: \"archlinux\",\n                state: {\n                    \"url\": HOST + \"images/v86state.bin\",\n                    \"size\": 142770436,\n                },\n                name: \"Arch Linux\",\n                memory_size: 128 * 1024 * 1024,\n                vga_memory_size: 8 * 1024 * 1024,\n\n                // required for restoring state, should not be used when booted on 9p\n                hda: {\n                    \"url\": HOST + \"images/arch3.img\",\n                    \"size\": 16 * 1024 * 1024 * 1024,\n                    \"async\": true,\n                },\n\n                filesystem: {\n                    \"basefs\": {\n                        \"url\": HOST + \"images/fs.json\",\n                        \"size\": 10232633,\n                    },\n                    \"baseurl\": HOST + \"arch/\",\n                },\n            },\n            {\n                id: \"msdos\",\n                hda: {\n                    \"url\": HOST + \"images/msdos.img\",\n                    \"size\": 8 * 1024 * 1024,\n                },\n                boot_order: 0x132,\n                name: \"MS-DOS\",\n            },\n            {\n                id: \"freedos\",\n                fda: {\n                    \"url\": HOST + \"images/freedos722.img\",\n                    \"size\": 737280,\n                },\n                name: \"FreeDOS\",\n            },\n            {\n                id: \"oberon\",\n                fda: {\n                    \"url\": HOST + \"images/oberon-boot.dsk\",\n                    \"size\": 1440 * 1024,\n                },\n                hda: {\n                    \"url\": HOST + \"images/oberon.dsk\",\n                    \"size\": 41943040,\n                },\n                name: \"Oberon\",\n            },\n            {\n                id: \"windows1\",\n                fda: {\n                    \"url\": HOST + \"images/windows101.img\",\n                    \"size\": 1474560,\n                },\n                name: \"Windows\",\n            },\n            {\n                id: \"linux26\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux.iso\",\n                    \"size\": 5666816,\n                },\n                name: \"Linux\",\n            },\n            {\n                id: \"linux3\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux3.iso\",\n                    \"size\": 8624128,\n                },\n                name: \"Linux\",\n                filesystem: {},\n            },\n            {\n                id: \"kolibrios\",\n                fda: {\n                    \"url\": (ON_LOCALHOST || ON_HTTPS) ?\n                            \"images/kolibri.img\" :\n                            \"//builds.kolibrios.org/eng/data/data/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"kolibrios-fallback\",\n                fda: {\n                    \"url\": HOST + \"images/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"openbsd\",\n                fda: {\n                    \"url\": HOST + \"images/openbsd.img\",\n                    \"size\": 1474560,\n                },\n                name: \"OpenBSD\",\n            },\n            {\n                id: \"solos\",\n                fda: {\n                    \"url\": HOST + \"images/os8.dsk\",\n                    \"size\": 1474560,\n                },\n                name: \"Sol OS\",\n            },\n            {\n                id: \"dexos\",\n                cdrom: {\n                    \"url\": HOST + \"images/DexOSv6.iso\",\n                    \"size\": 1837056,\n                },\n                name: \"DexOS\",\n            },\n            {\n                id: \"bootchess\",\n                fda: {\n                    \"url\": HOST + \"images/bootchess.img\",\n                },\n                name: \"Bootchess\",\n            },\n            {\n                id: \"windows98\",\n                memory_size: 64 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/windows98.img\",\n                    \"async\": true,\n                    \"size\": 300 * 1024 * 1024,\n                },\n                name: \"Windows 98\",\n                state: {\n                    \"url\": HOST + \"images/windows98_state.bin\",\n                    \"size\": 75705744,\n                },\n            },\n            {\n                id: \"windows95\",\n                memory_size: 32 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/W95.IMG\",\n                    \"size\": 242049024,\n                    \"async\": true,\n                },\n                name: \"Windows 95\",\n                state: {\n                    \"url\": HOST + \"images/windows95_state.bin\",\n                    \"size\": 42151316,\n                },\n            },\n            {\n                id: \"freebsd\",\n                memory_size: 128 * 1024 * 1024,\n                state: {\n                    \"url\": HOST + \"images/freebsd_state.bin\",\n                    \"size\": 142815292,\n                },\n                hda: {\n                    \"url\": ON_LOCALHOST ? \"../v86-images/os/freebsd3.img\" :\n                                          OTHER_HOST + \"images/freebsd3.img\",\n                    \"size\": 17179869184,\n                    \"async\": true,\n                },\n                name: \"FreeBSD\",\n            },\n            {\n                id: \"reactos\",\n                memory_size: 256 * 1024 * 1024,\n                cdrom: {\n                    \"url\": HOST + \"images/ReactOS-0.4.4-live.iso\",\n                    \"async\": true,\n                },\n                state: {\n                    \"url\": HOST + \"images/reactos_state.bin\",\n                    \"size\": 276971224,\n                },\n                name: \"ReactOS\",\n                description: 'Running <a href=\"https://reactos.org/\">ReactOS</a>',\n            },\n        ];\n\n        if(DEBUG)\n        {\n            // see tests/kvm-unit-tests/x86/\n            var tests = [\n                \"realmode\",\n                // All tests below require an APIC\n                \"cmpxchg8b\",\n                \"port80\",\n                \"setjmp\",\n                \"sieve\",\n                \"hypercall\", // crashes\n                \"init\", // stops execution\n                \"msr\", // TODO: Expects 64 bit msrs\n                \"smap\", // test stops, SMAP not enabled\n                \"tsc_adjust\", // TODO: IA32_TSC_ADJUST\n                \"tsc\", // TODO: rdtscp\n                \"rmap_chain\", // crashes\n                \"memory\", // missing mfence (uninteresting)\n                \"taskswitch\", // TODO: Jump\n                \"taskswitch2\", // TODO: Call TSS\n                \"eventinj\", // Missing #nt\n                \"ioapic\",\n                \"apic\",\n            ];\n\n            for(let test of tests)\n            {\n                oses.push({\n                    name: \"Test case: \" + test,\n                    id: \"test-\" + test,\n                    memory_size: 128 * 1024 * 1024,\n                    multiboot: { \"url\": \"tests/kvm-unit-tests/x86/\" + test + \".flat\", }\n                });\n            }\n        }\n\n        var query_args = get_query_arguments();\n        var profile = query_args[\"profile\"];\n\n        if(query_args[\"use_bochs_bios\"])\n        {\n            settings.use_bochs_bios = true;\n        }\n\n        for(var i = 0; i < oses.length; i++)\n        {\n            var infos = oses[i];\n\n            if(profile === infos.id)\n            {\n                start_profile(infos);\n                return;\n            }\n\n            var element = $(\"start_\" + infos.id);\n\n            if(element)\n            {\n                element.onclick = function(infos, element)\n                {\n                    set_profile(infos.id);\n                    element.blur();\n\n                    start_profile(infos);\n                }.bind(this, infos, element);\n            }\n        }\n\n        if(profile === \"custom\")\n        {\n            if(query_args[\"hda.url\"])\n            {\n                settings.hda = {\n                    \"size\": parseInt(query_args[\"hda.size\"], 10) || undefined,\n                    \"url\": query_args[\"hda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"cdrom.url\"])\n            {\n                settings.cdrom = {\n                    \"size\": parseInt(query_args[\"cdrom.size\"], 10) || undefined,\n                    \"url\": query_args[\"cdrom.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"fda.url\"])\n            {\n                settings.fda = {\n                    \"size\": parseInt(query_args[\"fda.size\"], 10) || undefined,\n                    \"url\": query_args[\"fda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(settings.fda || settings.cdrom || settings.hda)\n            {\n                $(\"boot_options\").style.display = \"none\";\n\n                start_emulation(settings, done);\n            }\n        }\n\n        function start_profile(infos)\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_title(infos.name);\n\n            settings.filesystem = infos.filesystem;\n\n            if(infos.state)\n            {\n                $(\"reset\").style.display = \"none\";\n                settings.initial_state = infos.state;\n            }\n\n            settings.fda = infos.fda;\n            settings.cdrom = infos.cdrom;\n            settings.hda = infos.hda;\n            settings.multiboot = infos.multiboot;\n\n            settings.memory_size = infos.memory_size;\n            settings.vga_memory_size = infos.vga_memory_size;\n\n            settings.id = infos.id;\n\n            if(infos.boot_order !== undefined)\n            {\n                settings.boot_order = infos.boot_order;\n            }\n\n            if(!DEBUG && infos.description)\n            {\n                $(\"description\").style.display = \"block\";\n                $(\"description\").innerHTML = \"<br>\" + infos.description;\n            }\n\n            start_emulation(settings, done);\n        }\n\n        function done(emulator)\n        {\n            if(query_args[\"c\"])\n            {\n                setTimeout(function()\n                {\n                    //emulator.serial0_send(query_args[\"c\"] + \"\\n\");\n                    emulator.keyboard_send_text(query_args[\"c\"] + \"\\n\");\n                }, 25);\n            }\n        }\n    }\n\n    function debug_onload(settings)\n    {\n        // called on window.onload, in debug mode\n\n        //settings.filesystem = {\n        //    baseurl: \"http://localhost/v86-images/arch/\",\n        //    basefs: \"http://localhost/v86-images/fs.json\",\n        //};\n\n        //$(\"restore_state\").onchange = function()\n        //{\n        //};\n\n        //$(\"start_test\").onclick = function()\n        //{\n        //};\n\n        var log_levels = $(\"log_levels\");\n\n        for(var i = 0; i < LOG_NAMES.length; i++)\n        {\n            var mask = LOG_NAMES[i][0];\n\n            if(mask === 1)\n                continue;\n\n            var name = LOG_NAMES[i][1].toLowerCase(),\n                input = document.createElement(\"input\"),\n                label = document.createElement(\"label\");\n\n            input.type = \"checkbox\";\n\n            label.htmlFor = input.id = \"log_\" + name;\n\n            if(LOG_LEVEL & mask)\n            {\n                input.checked = true;\n            }\n            input.mask = mask;\n\n            label.appendChild(input);\n            label.appendChild(document.createTextNode(v86util.pads(name, 4) + \" \"));\n            log_levels.appendChild(label);\n\n            if(i === Math.floor(LOG_NAMES.length / 2))\n            {\n                log_levels.appendChild(document.createTextNode(\"\\n\"));\n            }\n        }\n\n        log_levels.onchange = function(e)\n        {\n            var target = e.target,\n                mask = target.mask;\n\n            if(target.checked)\n            {\n                LOG_LEVEL |= mask;\n            }\n            else\n            {\n                LOG_LEVEL &= ~mask;\n            }\n\n            target.blur();\n        };\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent = \"ACPI: \" + (ENABLE_ACPI ? \"enabled\" : \"disabled\");\n    }\n\n    window.addEventListener(\"load\", onload, false);\n\n    // old webkit fires popstate on every load, fuck webkit\n    // https://code.google.com/p/chromium/issues/detail?id=63040\n    window.addEventListener(\"load\", function()\n    {\n        setTimeout(function()\n        {\n            window.addEventListener(\"popstate\", onpopstate);\n        }, 0);\n    });\n\n    // works in firefox and chromium\n    if(document.readyState === \"complete\")\n    {\n        onload();\n    }\n\n    /** @param {?=} done */\n    function start_emulation(settings, done)\n    {\n        /** @const */\n        var MB = 1024 * 1024;\n\n        var memory_size = settings.memory_size;\n\n        if(!memory_size)\n        {\n            memory_size = parseInt($(\"memory_size\").value, 10) * MB;\n\n            if(!memory_size)\n            {\n                alert(\"Invalid memory size - reset to 128MB\");\n                memory_size = 128 * MB;\n            }\n        }\n\n        var vga_memory_size = settings.vga_memory_size;\n\n        if(!vga_memory_size)\n        {\n            vga_memory_size = parseInt($(\"video_memory_size\").value, 10) * MB;\n\n            if(!vga_memory_size)\n            {\n                alert(\"Invalid video memory size - reset to 8MB\");\n                vga_memory_size = 8 * MB;\n            }\n        }\n\n        if(!settings.fda)\n        {\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                settings.fda = { buffer: floppy_file };\n            }\n        }\n\n        /** @const */\n        var BIOSPATH = \"bios/\";\n\n        if(settings.use_bochs_bios)\n        {\n            var biosfile = \"bochs-bios.bin\";\n            var vgabiosfile = \"bochs-vgabios.bin\";\n        }\n        else\n        {\n            var biosfile = DEBUG ? \"seabios-debug.bin\" : \"seabios.bin\";\n            var vgabiosfile = DEBUG ? \"vgabios-debug.bin\" : \"vgabios.bin\";\n            //var biosfile = DEBUG ? \"seabios-ultradebug.bin\" : \"seabios.bin\";\n            //var vgabiosfile = DEBUG ? \"vgabios-ultradebug.bin\" : \"vgabios.bin\";\n        }\n\n        //var biosfile = \"seabios-qemu.bin\";\n        //var vgabiosfile = \"vgabios-qemu.bin\";\n\n        var bios;\n        var vga_bios;\n\n        // a bios is only needed if the machine is booted\n        if(!settings.initial_state)\n        {\n            bios = {\n                \"url\": BIOSPATH + biosfile,\n            };\n            vga_bios = {\n                \"url\": BIOSPATH + vgabiosfile,\n            };\n        }\n\n        var emulator = new V86Starter({\n            \"memory_size\": memory_size,\n            \"vga_memory_size\": vga_memory_size,\n\n            \"screen_container\": $(\"screen_container\"),\n            \"serial_container\": $(\"serial\"),\n\n            \"boot_order\": settings.boot_order || parseInt($(\"boot_order\").value, 16) || 0,\n\n            \"network_relay_url\": \"wss://relay.widgetry.org/\",\n            //\"network_relay_url\": \"ws://localhost:8001/\",\n\n            \"bios\": bios,\n            \"vga_bios\": vga_bios,\n\n            \"fda\": settings.fda,\n            \"hda\": settings.hda,\n            \"cdrom\": settings.cdrom,\n\n            \"multiboot\": settings.multiboot,\n\n            \"initial_state\": settings.initial_state,\n            \"filesystem\": settings.filesystem || {},\n\n            \"autostart\": true,\n        });\n\n        if(DEBUG) window[\"emulator\"] = emulator;\n\n        emulator.add_listener(\"emulator-ready\", function()\n        {\n            if(DEBUG)\n            {\n                debug_start(emulator);\n            }\n\n            init_ui(settings, emulator);\n\n            done && done(emulator);\n        });\n\n        emulator.add_listener(\"download-progress\", function(e)\n        {\n            show_progress(e);\n        });\n\n        emulator.add_listener(\"download-error\", function(e)\n        {\n            var el = $(\"loading\");\n            el.style.display = \"block\";\n            el.textContent = \"Loading \" + e.file_name + \" failed. Check your connection \" +\n                             \"and reload the page to try again.\";\n        });\n    }\n\n    /**\n     * @param {Object} settings\n     * @param {V86Starter} emulator\n     */\n    function init_ui(settings, emulator)\n    {\n        $(\"boot_options\").style.display = \"none\";\n        $(\"loading\").style.display = \"none\";\n        $(\"runtime_options\").style.display = \"block\";\n        $(\"runtime_infos\").style.display = \"block\";\n        $(\"screen_container\").style.display = \"block\";\n\n        if(settings.filesystem)\n        {\n            init_filesystem_panel(emulator);\n        }\n\n        $(\"run\").onclick = function()\n        {\n            if(emulator.is_running())\n            {\n                $(\"run\").value = \"Run\";\n                emulator.stop();\n            }\n            else\n            {\n                $(\"run\").value = \"Pause\";\n                emulator.run();\n            }\n\n            $(\"run\").blur();\n        };\n\n        $(\"exit\").onclick = function()\n        {\n            emulator.stop();\n            location.href = location.pathname;\n        };\n\n        $(\"lock_mouse\").onclick = function()\n        {\n            if(!mouse_is_enabled)\n            {\n                $(\"toggle_mouse\").onclick();\n            }\n\n            emulator.lock_mouse();\n            $(\"lock_mouse\").blur();\n        };\n\n        var mouse_is_enabled = true;\n\n        $(\"toggle_mouse\").onclick = function()\n        {\n            mouse_is_enabled = !mouse_is_enabled;\n\n            emulator.mouse_set_status(mouse_is_enabled);\n            $(\"toggle_mouse\").value = (mouse_is_enabled ? \"Dis\" : \"En\") + \"able mouse\";\n            $(\"toggle_mouse\").blur();\n        };\n\n\n        var last_tick = 0;\n        var running_time = 0;\n        var last_instr_counter = 0;\n        var interval;\n        var os_uses_mouse = false;\n\n        function update_info()\n        {\n            var now = Date.now();\n\n            var instruction_counter = emulator.get_instruction_counter();\n            var last_ips = instruction_counter - last_instr_counter;\n\n            last_instr_counter = instruction_counter;\n\n            var delta_time = now - last_tick;\n            running_time += delta_time;\n            last_tick = now;\n\n            $(\"speed\").textContent = last_ips / delta_time | 0;\n            $(\"avg_speed\").textContent = instruction_counter / running_time | 0;\n            $(\"running_time\").textContent = format_timestamp(running_time / 1000 | 0);\n        }\n\n        emulator.add_listener(\"emulator-started\", function()\n        {\n            last_tick = Date.now();\n            interval = setInterval(update_info, 1000);\n        });\n\n        emulator.add_listener(\"emulator-stopped\", function()\n        {\n            update_info();\n            clearInterval(interval);\n        });\n\n        var stats_9p = {\n            read: 0,\n            write: 0,\n        };\n\n        emulator.add_listener(\"9p-read-start\", function()\n        {\n            $(\"info_filesystem\").style.display = \"block\";\n            $(\"info_filesystem_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"9p-read-end\", function(args)\n        {\n            stats_9p.read += args[1];\n\n            $(\"info_filesystem_status\").textContent = \"Idle\";\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_read\").textContent = stats_9p.read;\n        });\n        emulator.add_listener(\"9p-write-end\", function(args)\n        {\n            stats_9p.write += args[1];\n\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_written\").textContent = stats_9p.write;\n        });\n\n        var stats_storage = {\n            read: 0,\n            read_sectors: 0,\n            write: 0,\n            write_sectors: 0,\n        };\n\n        emulator.add_listener(\"ide-read-start\", function()\n        {\n            $(\"info_storage\").style.display = \"block\";\n            $(\"info_storage_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"ide-read-end\", function(args)\n        {\n            stats_storage.read += args[1];\n            stats_storage.read_sectors += args[2];\n\n            $(\"info_storage_status\").textContent = \"Idle\";\n            $(\"info_storage_bytes_read\").textContent = stats_storage.read;\n            $(\"info_storage_sectors_read\").textContent = stats_storage.read_sectors;\n        });\n        emulator.add_listener(\"ide-write-end\", function(args)\n        {\n            stats_storage.write += args[1];\n            stats_storage.write_sectors += args[2];\n\n            $(\"info_storage_bytes_written\").textContent = stats_storage.write;\n            $(\"info_storage_sectors_written\").textContent = stats_storage.write_sectors;\n        });\n\n        var stats_net = {\n            bytes_transmitted: 0,\n            bytes_received: 0,\n        };\n\n        emulator.add_listener(\"eth-receive-end\", function(args)\n        {\n            stats_net.bytes_received += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_received\").textContent = stats_net.bytes_received;\n        });\n        emulator.add_listener(\"eth-transmit-end\", function(args)\n        {\n            stats_net.bytes_transmitted += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_transmitted\").textContent = stats_net.bytes_transmitted;\n        });\n\n\n        emulator.add_listener(\"mouse-enable\", function(is_enabled)\n        {\n            os_uses_mouse = is_enabled;\n            $(\"info_mouse_enabled\").textContent = is_enabled ? \"Yes\" : \"No\";\n        });\n\n        emulator.add_listener(\"screen-set-mode\", function(is_graphical)\n        {\n            if(is_graphical)\n            {\n                $(\"info_vga_mode\").textContent = \"Graphical\";\n            }\n            else\n            {\n                $(\"info_vga_mode\").textContent = \"Text\";\n                $(\"info_res\").textContent = \"-\";\n                $(\"info_bpp\").textContent = \"-\";\n            }\n        });\n        emulator.add_listener(\"screen-set-size-graphical\", function(args)\n        {\n            $(\"info_res\").textContent = args[0] + \"x\" + args[1];\n            $(\"info_bpp\").textContent = args[4];\n        });\n\n\n        $(\"reset\").onclick = function()\n        {\n            emulator.restart();\n            $(\"reset\").blur();\n        };\n\n        add_image_download_button(settings.hda, \"hda\");\n        add_image_download_button(settings.hdb, \"hdb\");\n        add_image_download_button(settings.fda, \"fda\");\n        add_image_download_button(settings.fdb, \"fdb\");\n        add_image_download_button(settings.cdrom, \"cdrom\");\n\n        function add_image_download_button(obj, type)\n        {\n            var elem = $(\"get_\" + type + \"_image\");\n\n            if(!obj || obj.size > 100 * 1024 * 1024)\n            {\n                elem.style.display = \"none\";\n                return;\n            }\n\n            elem.onclick = function(e)\n            {\n                let buffer = emulator.disk_images[type];\n                let filename = settings.id + (type === \"cdrom\" ? \".iso\" : \".img\");\n\n                if(buffer.get_as_file)\n                {\n                    var file = buffer.get_as_file(filename);\n                    download(file, filename);\n                }\n                else\n                {\n                    buffer.get_buffer(function(b)\n                    {\n                        if(b)\n                        {\n                            dump_file(b, filename);\n                        }\n                        else\n                        {\n                            alert(\"The file could not be loaded. Maybe it's too big?\");\n                        }\n                    });\n                }\n\n                elem.blur();\n            };\n        }\n\n        $(\"memory_dump\").onclick = function()\n        {\n            dump_file(emulator.v86.cpu.mem8, \"v86memory.bin\");\n            $(\"memory_dump\").blur();\n        };\n\n        //$(\"memory_dump_dmp\").onclick = function()\n        //{\n        //    var memory = emulator.v86.cpu.mem8;\n        //    var memory_size = memory.length;\n        //    var page_size = 4096;\n        //    var header = new Uint8Array(4096);\n        //    var header32 = new Int32Array(header.buffer);\n\n        //    header32[0] = 0x45474150; // 'PAGE'\n        //    header32[1] = 0x504D5544; // 'DUMP'\n\n        //    header32[0x10 >> 2] = emulator.v86.cpu.cr[3]; // DirectoryTableBase\n        //    header32[0x24 >> 2] = 1; // NumberProcessors\n        //    header32[0xf88 >> 2] = 1; // DumpType: full dump\n        //    header32[0xfa0 >> 2] = header.length + memory_size; // RequiredDumpSpace\n\n        //    header32[0x064 + 0 >> 2] = 1; // NumberOfRuns\n        //    header32[0x064 + 4 >> 2] = memory_size / page_size; // NumberOfPages\n        //    header32[0x064 + 8 >> 2] = 0; // BasePage\n        //    header32[0x064 + 12 >> 2] = memory_size / page_size; // PageCount\n\n        //    dump_file([header, memory], \"v86memory.dmp\");\n\n        //    $(\"memory_dump_dmp\").blur();\n        //};\n\n        $(\"save_state\").onclick = function()\n        {\n            emulator.save_state(function(error, result)\n            {\n                if(error)\n                {\n                    console.log(error.stack);\n                    console.log(\"Couldn't save state: \", error);\n                }\n                else\n                {\n                    dump_file(result, \"v86state.bin\");\n                }\n            });\n\n            $(\"save_state\").blur();\n        };\n\n        $(\"load_state\").onclick = function()\n        {\n            $(\"load_state_input\").click();\n            $(\"load_state\").blur();\n        };\n\n        $(\"load_state_input\").onchange = function()\n        {\n            var file = this.files[0];\n\n            if(!file)\n            {\n                return;\n            }\n\n            var was_running = emulator.is_running();\n\n            if(was_running)\n            {\n                emulator.stop();\n            }\n\n            var filereader = new FileReader();\n            filereader.onload = function(e)\n            {\n                try\n                {\n                    emulator.restore_state(e.target.result);\n                }\n                catch(err)\n                {\n                    alert(\"Something bad happened while restoring the state:\\n\" + err + \"\\n\\n\" +\n                          \"Note that the current configuration must be the same as the original\");\n                    throw err;\n                }\n\n                if(was_running)\n                {\n                    emulator.run();\n                }\n            };\n            filereader.readAsArrayBuffer(file);\n\n            this.value = \"\";\n        };\n\n        $(\"ctrlaltdel\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x1D, // ctrl\n                0x38, // alt\n                0x53, // delete\n\n                // break codes\n                0x1D | 0x80,\n                0x38 | 0x80,\n                0x53 | 0x80,\n            ]);\n\n            $(\"ctrlaltdel\").blur();\n        };\n\n        $(\"alttab\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x38, // alt\n                0x0F, // tab\n            ]);\n\n            setTimeout(function()\n            {\n                emulator.keyboard_send_scancodes([\n                    0x38 | 0x80,\n                    0x0F | 0x80,\n                ]);\n            }, 100);\n\n            $(\"alttab\").blur();\n        };\n\n        $(\"scale\").onchange = function()\n        {\n            var n = parseFloat(this.value);\n\n            if(n || n > 0)\n            {\n                emulator.screen_set_scale(n, n);\n            }\n        };\n\n        $(\"fullscreen\").onclick = function()\n        {\n            emulator.screen_go_fullscreen();\n        };\n\n        $(\"screen_container\").onclick = function()\n        {\n            if(mouse_is_enabled && os_uses_mouse)\n            {\n                emulator.lock_mouse();\n                $(\"lock_mouse\").blur();\n            }\n            else\n            {\n                // allow text selection\n                if(window.getSelection().isCollapsed)\n                {\n                    let phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n                    // stop mobile browser from scrolling into view when the keyboard is shown\n                    phone_keyboard.style.top = document.body.scrollTop + 100 + \"px\";\n                    phone_keyboard.style.left = document.body.scrollLeft + 100 + \"px\";\n\n                    phone_keyboard.focus();\n                }\n            }\n        };\n\n        const phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n        phone_keyboard.setAttribute(\"autocorrect\", \"off\");\n        phone_keyboard.setAttribute(\"autocapitalize\", \"off\");\n        phone_keyboard.setAttribute(\"spellcheck\", \"false\");\n        phone_keyboard.tabIndex = 0;\n\n        $(\"screen_container\").addEventListener(\"mousedown\", (e) =>\n        {\n            phone_keyboard.focus();\n        }, false);\n\n        $(\"take_screenshot\").onclick = function()\n        {\n            emulator.screen_make_screenshot();\n\n            $(\"take_screenshot\").blur();\n        };\n\n        $(\"serial\").style.display = \"block\";\n\n        window.addEventListener(\"keydown\", ctrl_w_rescue, false);\n        window.addEventListener(\"keyup\", ctrl_w_rescue, false);\n        window.addEventListener(\"blur\", ctrl_w_rescue, false);\n\n        function ctrl_w_rescue(e)\n        {\n            if(e.ctrlKey)\n            {\n                window.onbeforeunload = function()\n                {\n                    window.onbeforeunload = null;\n                    return \"CTRL-W cannot be sent to the emulator.\";\n                };\n            }\n            else\n            {\n                window.onbeforeunload = null;\n            }\n        }\n    }\n\n    function init_filesystem_panel(emulator)\n    {\n        $(\"filesystem_panel\").style.display = \"block\";\n\n        $(\"filesystem_send_file\").onchange = function()\n        {\n            Array.prototype.forEach.call(this.files, function(file)\n            {\n                var loader = new v86util.SyncFileBuffer(file);\n                loader.onload = function()\n                {\n                    loader.get_buffer(function(buffer)\n                    {\n                        emulator.create_file(\"/\" + file.name, new Uint8Array(buffer));\n                    });\n                };\n                loader.load();\n            }, this);\n\n            this.value = \"\";\n            this.blur();\n        };\n\n        $(\"filesystem_get_file\").onkeypress = function(e)\n        {\n            if(e.which !== 13)\n            {\n                return;\n            }\n\n            this.disabled = true;\n\n            emulator.read_file(this.value, function(err, uint8array)\n            {\n                this.disabled = false;\n\n                if(uint8array)\n                {\n                    var filename = this.value.replace(/\\/$/, \"\").split(\"/\");\n                    filename = filename[filename.length - 1] || \"root\";\n\n                    dump_file(uint8array, filename);\n                    this.value = \"\";\n                }\n                else\n                {\n                    alert(\"Can't read file\");\n                }\n            }.bind(this));\n        };\n    }\n\n    function debug_start(emulator)\n    {\n        if(!emulator.v86)\n        {\n            return;\n        }\n\n        // called as soon as soon as emulation is started, in debug mode\n        var debug = emulator.v86.cpu.debug;\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent += \" | logging ops: \" +\n            (debug.step_mode || debug.trace_all ? \"yes\" : \"no\");\n\n        $(\"step\").onclick = debug.step.bind(debug);\n        $(\"run_until\").onclick = debug.run_until.bind(debug);\n        $(\"dump_gdt\").onclick = debug.dump_gdt_ldt.bind(debug);\n        $(\"dump_idt\").onclick = debug.dump_idt.bind(debug);\n        $(\"dump_regs\").onclick = debug.dump_regs.bind(debug);\n        $(\"dump_pt\").onclick = debug.dump_page_directory.bind(debug);\n        $(\"dump_instructions\").onclick = debug.dump_instructions.bind(debug);\n\n        $(\"dump_log\").onclick = function()\n        {\n            dump_file(log_data, \"v86.log\");\n        };\n\n        $(\"dump_instructions_file\").onclick = function()\n        {\n            var ins = debug.get_instructions();\n\n            if(ins)\n            {\n                dump_file(ins, \"trace.txt\");\n            }\n        };\n\n        var cpu = emulator.v86.cpu;\n\n        $(\"debug_panel\").style.display = \"block\";\n        setInterval(function()\n        {\n            $(\"debug_panel\").textContent =\n                cpu.debug.get_regs_short().join(\"\\n\") + \"\\n\" + cpu.debug.get_state();\n        }, 1000);\n\n        // helps debugging\n        window.emulator = emulator;\n        window.cpu = cpu;\n        window.dump_file = dump_file;\n    }\n\n    function onpopstate(e)\n    {\n        location.reload();\n    }\n\n    function set_profile(prof)\n    {\n        if(window.history.pushState)\n        {\n            window.history.pushState({ profile: prof }, \"\", \"?profile=\" + prof);\n        }\n\n    }\n\n})();\n","\"use strict\";\n\n/**\n * Constructor for emulator instances.\n *\n * Usage: `var emulator = new V86Starter(options);`\n *\n * Options can have the following properties (all optional, default in parenthesis):\n *\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\n *   be a power of 2.\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\n *\n * - `autostart boolean` (false) - If emulation should be started when emulator\n *   is ready.\n *\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\n *\n * - `network_relay_url string` (No network card) - The url of a server running\n *   websockproxy. See [networking.md](networking.md). Setting this will\n *   enable an emulated network card.\n *\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\n *   ArrayBuffer, see below.\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\n * - `hda Object` (No hard drive) - First hard disk, see below.\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\n * - `cdrom Object` (No CD) - See below.\n * - `initial_state Object` (Normal boot) - An initial state to load, see\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\n *\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\n *   [filesystem.md](filesystem.md).\n *\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\n *   that will receive and send data to the emulated serial terminal.\n *   Alternatively the serial terminal can also be accessed programatically,\n *   see [serial.html](../examples/serial.html).\n *\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\n *   have a certain structure, see [basic.html](../examples/basic.html).\n *\n * ***\n *\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\n *\n * - Pass an object that has a url. Optionally, `async: true` and `size:\n *   size_in_bytes` can be added to the object, so that sectors of the image\n *   are loaded on demand instead of being loaded before boot (slower, but\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\n *   header must be supported on the server.\n *\n *   ```javascript\n *   // download file before boot\n *   bios: {\n *       url: \"bios/seabios.bin\"\n *   }\n *   // download file sectors as requested, size is required\n *   hda: {\n *       url: \"disk/linux.iso\",\n *       async: true,\n *       size: 16 * 1024 * 1024\n *   }\n *   ```\n *\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\n *\n *   ```javascript\n *   // use <input type=file>\n *   bios: {\n *       buffer: document.all.hd_image.files[0]\n *   }\n *   // start with empty hard drive\n *   hda: {\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\n *   }\n *   ```\n *\n * ***\n *\n * @param {Object} options Options to initialize the emulator with.\n * @constructor\n */\nfunction V86Starter(options)\n{\n    //var worker = new Worker(\"src/browser/worker.js\");\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\n\n    this.cpu_is_running = false;\n\n    var bus = Bus.create();\n    var adapter_bus = this.bus = bus[0];\n    this.emulator_bus = bus[1];\n    var emulator = this.v86 = new v86(this.emulator_bus);\n\n    this.bus.register(\"emulator-stopped\", function()\n    {\n        this.cpu_is_running = false;\n    }, this);\n\n    this.bus.register(\"emulator-started\", function()\n    {\n        this.cpu_is_running = true;\n    }, this);\n\n    var settings = {};\n\n    this.disk_images = {\n        \"fda\": undefined,\n        \"fdb\": undefined,\n        \"hda\": undefined,\n        \"hdb\": undefined,\n        \"cdrom\": undefined,\n    };\n\n    settings.load_devices = true;\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\n    settings.boot_order = options[\"boot_order\"] || 0x213;\n    settings.fastboot = options[\"fastboot\"] || false;\n    settings.fda = undefined;\n    settings.fdb = undefined;\n\n    if(options[\"network_relay_url\"])\n    {\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\n        settings.enable_ne2k = true;\n    }\n\n    if(!options[\"disable_keyboard\"])\n    {\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\n    }\n    if(!options[\"disable_mouse\"])\n    {\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\n    }\n\n    if(options[\"screen_container\"])\n    {\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\n    }\n    else if(options[\"screen_dummy\"])\n    {\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\n    }\n\n    if(options[\"serial_container\"])\n    {\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\n    }\n\n    if(!options[\"disable_speaker\"])\n    {\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\n    }\n\n    // ugly, but required for closure compiler compilation\n    function put_on_settings(name, buffer)\n    {\n        switch(name)\n        {\n            case \"hda\":\n                settings.hda = this.disk_images[\"hda\"] = buffer;\n                break;\n            case \"hdb\":\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\n                break;\n            case \"cdrom\":\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\n                break;\n            case \"fda\":\n                settings.fda = this.disk_images[\"fda\"] = buffer;\n                break;\n            case \"fdb\":\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\n                break;\n\n            case \"multiboot\":\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\n                break;\n\n            case \"bios\":\n                settings.bios = buffer.buffer;\n                break;\n            case \"vga_bios\":\n                settings.vga_bios = buffer.buffer;\n                break;\n            case \"initial_state\":\n                settings.initial_state = buffer.buffer;\n                break;\n            case \"fs9p_json\":\n                settings.fs9p_json = buffer.buffer;\n                break;\n            default:\n                dbg_assert(false, name);\n        }\n    }\n\n    var files_to_load = [];\n\n    function add_file(name, file)\n    {\n        if(!file)\n        {\n            return;\n        }\n\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\n        {\n            files_to_load.push({\n                name: name,\n                loadable: file,\n            });\n            return;\n        }\n\n        // Anything coming from the outside world needs to be quoted for\n        // Closure Compiler compilation\n        file = {\n            buffer: file[\"buffer\"],\n            async: file[\"async\"],\n            url: file[\"url\"],\n            size: file[\"size\"],\n        };\n\n        if(name === \"bios\" || name === \"vga_bios\" ||\n            name === \"initial_state\" || name === \"multiboot\")\n        {\n            // Ignore async for these because they must be availabe before boot.\n            // This should make result.buffer available after the object is loaded\n            file.async = false;\n        }\n\n        if(file.buffer instanceof ArrayBuffer)\n        {\n            var buffer = new SyncBuffer(file.buffer);\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\n        {\n            // SyncFileBuffer:\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\n            // - can later serve get/set operations fast and synchronously\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\n            //\n            // AsyncFileBuffer:\n            // - loads slices of the file asynchronously as requested\n            // - slower get/set\n\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\n            if(file.async === undefined)\n            {\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\n            }\n\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\n            }\n            else\n            {\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\n            }\n\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(file.url)\n        {\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\n                files_to_load.push({\n                    name: name,\n                    loadable: buffer,\n                });\n            }\n            else\n            {\n                files_to_load.push({\n                    name: name,\n                    url: file.url,\n                    size: file.size,\n                });\n            }\n        }\n        else\n        {\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\n        }\n    }\n\n    var image_names = [\n        \"bios\", \"vga_bios\",\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\n        \"initial_state\", \"multiboot\",\n    ];\n\n    for(var i = 0; i < image_names.length; i++)\n    {\n        add_file(image_names[i], options[image_names[i]]);\n    }\n\n    if(options[\"filesystem\"])\n    {\n        var fs_url = options[\"filesystem\"][\"basefs\"];\n        var base_url = options[\"filesystem\"][\"baseurl\"];\n\n        this.fs9p = new FS(base_url);\n        settings.fs9p = this.fs9p;\n\n        if(fs_url)\n        {\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\n\n            var size;\n\n            if(typeof fs_url === \"object\")\n            {\n                size = fs_url[\"size\"];\n                fs_url = fs_url[\"url\"];\n            }\n            dbg_assert(typeof fs_url === \"string\");\n\n            files_to_load.push({\n                name: \"fs9p_json\",\n                url: fs_url,\n                size: size,\n                as_text: true,\n            });\n        }\n    }\n\n    var starter = this;\n    var total = files_to_load.length;\n\n    var cont = function(index)\n    {\n        if(index === total)\n        {\n            setTimeout(done.bind(this), 0);\n            return;\n        }\n\n        var f = files_to_load[index];\n\n        if(f.loadable)\n        {\n            f.loadable.onload = function(e)\n            {\n                put_on_settings.call(this, f.name, f.loadable);\n                cont(index + 1);\n            }.bind(this);\n            f.loadable.load();\n        }\n        else\n        {\n            v86util.load_file(f.url, {\n                done: function(result)\n                {\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\n                    cont(index + 1);\n                }.bind(this),\n                progress: function progress(e)\n                {\n                    if(e.target.status === 200)\n                    {\n                        starter.emulator_bus.send(\"download-progress\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n\n                            lengthComputable: e.lengthComputable,\n                            total: e.total || f.size,\n                            loaded: e.loaded,\n                        });\n                    }\n                    else\n                    {\n                        starter.emulator_bus.send(\"download-error\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n                            request: e.target,\n                        });\n                    }\n                },\n                as_text: f.as_text,\n            });\n        }\n    }.bind(this);\n    cont(0);\n\n    function done()\n    {\n        if(settings.initial_state)\n        {\n            // avoid large allocation now, memory will be restored later anyway\n            settings.memory_size = 0;\n        }\n\n        this.bus.send(\"cpu-init\", settings);\n\n        setTimeout(function()\n        {\n            if(settings.initial_state)\n            {\n                emulator.restore_state(settings.initial_state);\n            }\n\n            setTimeout(function()\n            {\n                if(settings.fs9p && settings.fs9p_json)\n                {\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\n                }\n\n                if(options[\"autostart\"])\n                {\n                    this.bus.send(\"cpu-run\");\n                }\n            }.bind(this), 0);\n        }.bind(this), 0);\n    }\n}\n\n/**\n * Start emulation. Do nothing if emulator is running already. Can be\n * asynchronous.\n * @export\n */\nV86Starter.prototype.run = function()\n{\n    this.bus.send(\"cpu-run\");\n};\n\n/**\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\n * @export\n */\nV86Starter.prototype.stop = function()\n{\n    this.bus.send(\"cpu-stop\");\n};\n\n/**\n * @ignore\n * @export\n */\nV86Starter.prototype.destroy = function()\n{\n    this.keyboard_adapter.destroy();\n};\n\n/**\n * Restart (force a reboot).\n * @export\n */\nV86Starter.prototype.restart = function()\n{\n    this.bus.send(\"cpu-restart\");\n};\n\n/**\n * Add an event listener (the emulator is an event emitter). A list of events\n * can be found at [events.md](events.md).\n *\n * The callback function gets a single argument which depends on the event.\n *\n * @param {string} event Name of the event.\n * @param {function(*)} listener The callback function.\n * @export\n */\nV86Starter.prototype.add_listener = function(event, listener)\n{\n    this.bus.register(event, listener, this);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} event\n * @param {function(*)} listener\n * @export\n */\nV86Starter.prototype.remove_listener = function(event, listener)\n{\n    this.bus.unregister(event, listener);\n};\n\n/**\n * Restore the emulator state from the given state, which must be an\n * ArrayBuffer returned by\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\n *\n * Note that the state can only be restored correctly if this constructor has\n * been created with the same options as the original instance (e.g., same disk\n * images, memory size, etc.).\n *\n * Different versions of the emulator might use a different format for the\n * state buffer.\n *\n * @param {ArrayBuffer} state\n * @export\n */\nV86Starter.prototype.restore_state = function(state)\n{\n    this.v86.restore_state(state);\n};\n\n/**\n * Asynchronously save the current state of the emulator. The first argument to\n * the callback is an Error object if something went wrong and is null\n * otherwise.\n *\n * @param {function(Object, ArrayBuffer)} callback\n * @export\n */\nV86Starter.prototype.save_state = function(callback)\n{\n    // Might become asynchronous at some point\n\n    setTimeout(function()\n    {\n        try\n        {\n            callback(null, this.v86.save_state());\n        }\n        catch(e)\n        {\n            callback(e, null);\n        }\n    }.bind(this), 0);\n};\n\n/**\n * Return an object with several statistics. Return value looks similar to\n * (but can be subject to change in future versions or different\n * configurations, so use defensively):\n *\n * ```javascript\n * {\n *     \"cpu\": {\n *         \"instruction_counter\": 2821610069\n *     },\n *     \"hda\": {\n *         \"sectors_read\": 95240,\n *         \"sectors_written\": 952,\n *         \"bytes_read\": 48762880,\n *         \"bytes_written\": 487424,\n *         \"loading\": false\n *     },\n *     \"cdrom\": {\n *         \"sectors_read\": 0,\n *         \"sectors_written\": 0,\n *         \"bytes_read\": 0,\n *         \"bytes_written\": 0,\n *         \"loading\": false\n *     },\n *     \"mouse\": {\n *         \"enabled\": true\n *     },\n *     \"vga\": {\n *         \"is_graphical\": true,\n *         \"res_x\": 800,\n *         \"res_y\": 600,\n *         \"bpp\": 32\n *     }\n * }\n * ```\n *\n * @deprecated\n * @return {Object}\n * @export\n */\nV86Starter.prototype.get_statistics = function()\n{\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\n\n    var stats = {\n        cpu: {\n            instruction_counter: this.get_instruction_counter(),\n        },\n    };\n\n    if(!this.v86)\n    {\n        return stats;\n    }\n\n    var devices = this.v86.cpu.devices;\n\n    if(devices.hda)\n    {\n        stats.hda = devices.hda.stats;\n    }\n\n    if(devices.cdrom)\n    {\n        stats.cdrom = devices.cdrom.stats;\n    }\n\n    if(devices.ps2)\n    {\n        stats[\"mouse\"] = {\n            \"enabled\": devices.ps2.use_mouse,\n        };\n    }\n\n    if(devices.vga)\n    {\n        stats[\"vga\"] = {\n            \"is_graphical\": devices.vga.stats.is_graphical,\n        };\n    }\n\n    return stats;\n};\n\n/**\n * @return {number}\n * @ignore\n * @export\n */\nV86Starter.prototype.get_instruction_counter = function()\n{\n    if(this.v86)\n    {\n        return this.v86.cpu.timestamp_counter;\n    }\n    else\n    {\n        // TODO: Should be handled using events\n        return 0;\n    }\n};\n\n/**\n * @return {boolean}\n * @export\n */\nV86Starter.prototype.is_running = function()\n{\n    return this.cpu_is_running;\n};\n\n/**\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\n * Do nothing if there is no keyboard controller.\n *\n * @param {Array.<number>} codes\n * @export\n */\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.bus.send(\"keyboard-code\", codes[i]);\n    }\n};\n\n/**\n * Send translated keys\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_keys = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.keyboard_adapter.simulate_press(codes[i]);\n    }\n};\n\n/**\n * Send text\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_text = function(string)\n{\n    for(var i = 0; i < string.length; i++)\n    {\n        this.keyboard_adapter.simulate_char(string[i]);\n    }\n};\n\n/**\n * Download a screenshot.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_make_screenshot = function()\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.make_screenshot();\n    }\n};\n\n/**\n * Set the scaling level of the emulated screen.\n *\n * @param {number} sx\n * @param {number} sy\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_set_scale = function(sx, sy)\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.set_scale(sx, sy);\n    }\n};\n\n/**\n * Go fullscreen.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_go_fullscreen = function()\n{\n    if(!this.screen_adapter)\n    {\n        return;\n    }\n\n    var elem = document.getElementById(\"screen_container\");\n\n    if(!elem)\n    {\n        return;\n    }\n\n    // bracket notation because otherwise they get renamed by closure compiler\n    var fn = elem[\"requestFullScreen\"] ||\n            elem[\"webkitRequestFullscreen\"] ||\n            elem[\"mozRequestFullScreen\"] ||\n            elem[\"msRequestFullScreen\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\n        // Might (but doesn't seem to) break something else\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\n        focus_element && focus_element.focus();\n    }\n\n    //this.lock_mouse(elem);\n    this.lock_mouse();\n};\n\n/**\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\n * browser window.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.lock_mouse = function()\n{\n    var elem = document.body;\n\n    var fn = elem[\"requestPointerLock\"] ||\n                elem[\"mozRequestPointerLock\"] ||\n                elem[\"webkitRequestPointerLock\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n    }\n};\n\n/**\n * Enable or disable sending mouse events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n */\nV86Starter.prototype.mouse_set_status = function(enabled)\n{\n    if(this.mouse_adapter)\n    {\n        this.mouse_adapter.emu_enabled = enabled;\n    }\n};\n\n/**\n * Enable or disable sending keyboard events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n * @export\n */\nV86Starter.prototype.keyboard_set_status = function(enabled)\n{\n    if(this.keyboard_adapter)\n    {\n        this.keyboard_adapter.emu_enabled = enabled;\n    }\n};\n\n\n/**\n * Send a string to the first emulated serial terminal.\n *\n * @param {string} data\n * @export\n */\nV86Starter.prototype.serial0_send = function(data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\n    }\n};\n\n/**\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\n * been initialized. First argument to the callback is an error object if\n * something went wrong and null otherwise.\n *\n * @param {string} file\n * @param {Uint8Array} data\n * @param {function(Object)=} callback\n * @export\n */\nV86Starter.prototype.create_file = function(file, data, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var parts = file.split(\"/\");\n    var filename = parts[parts.length - 1];\n\n    var path_infos = fs.SearchPath(file);\n    var parent_id = path_infos.parentid;\n    var not_found = filename === \"\" || parent_id === -1;\n\n    if(!not_found)\n    {\n        fs.CreateBinaryFile(filename, parent_id, data);\n    }\n\n    if(callback)\n    {\n        setTimeout(function()\n        {\n            if(not_found)\n            {\n                callback(new FileNotFoundError());\n            }\n            else\n            {\n                callback(null);\n            }\n        }, 0);\n    }\n};\n\n/**\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\n * initialized.\n *\n * @param {string} file\n * @param {function(Object, Uint8Array)} callback\n * @export\n */\nV86Starter.prototype.read_file = function(file, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var path_infos = fs.SearchPath(file);\n    var id = path_infos.id;\n\n    if(id === -1)\n    {\n        callback(new FileNotFoundError(), null);\n    }\n    else\n    {\n        fs.OpenInode(id, undefined);\n        fs.AddEvent(\n            id,\n            function()\n            {\n                var data = fs.inodedata[id];\n\n                if(data)\n                {\n                    callback(null, data.subarray(0, fs.inodes[id].size));\n                }\n                else\n                {\n                    callback(new FileNotFoundError(), null);\n                }\n            }\n        );\n    }\n};\n\n/**\n * @ignore\n * @constructor\n *\n * @param {string=} message\n */\nfunction FileNotFoundError(message)\n{\n    this.message = message || \"File not found\";\n}\nFileNotFoundError.prototype = Error.prototype;\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"V86Starter\"] = V86Starter;\n    window[\"V86\"] = V86Starter;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"V86Starter\"] = V86Starter;\n    module.exports[\"V86\"] = V86Starter;\n}\nelse if(typeof importScripts === \"function\")\n{\n    // web worker\n    self[\"V86Starter\"] = V86Starter;\n    self[\"V86\"] = V86Starter;\n}\n","\"use strict\";\n\n/**\n * The ISA IO bus\n * Devices register their ports here\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction IO(cpu)\n{\n    /** @const */\n    this.ports = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 0x10000; i++)\n    {\n        this.ports[i] = this.create_empty_entry();\n    }\n\n    var memory_size = cpu.memory_size;\n\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\n    {\n        // avoid sparse arrays\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\n    }\n\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\n        function(addr) {\n            // read outside of the memory size\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return 0xFF;\n        },\n        function(addr, value) {\n            // write outside of the memory size\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\n        },\n        function(addr) {\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return -1;\n        },\n        function(addr, value) {\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\n        }\n    );\n}\n\nIO.prototype.create_empty_entry = function()\n{\n    return {\n        read8: this.empty_port_read8,\n        read16: this.empty_port_read16,\n        read32: this.empty_port_read32,\n\n        write8: this.empty_port_write,\n        write16: this.empty_port_write,\n        write32: this.empty_port_write,\n\n        device: undefined,\n    };\n};\n\nIO.prototype.empty_port_read8 = function()\n{\n    return 0xFF;\n};\n\nIO.prototype.empty_port_read16 = function()\n{\n    return 0xFFFF;\n};\n\nIO.prototype.empty_port_read32 = function()\n{\n    return -1;\n};\n\nIO.prototype.empty_port_write = function(x)\n{\n};\n\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function():number=} r8\n * @param {function():number=} r16\n * @param {function():number=} r32\n */\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!r8 || typeof r8 === \"function\");\n    dbg_assert(!r16 || typeof r16 === \"function\");\n    dbg_assert(!r32 || typeof r32 === \"function\");\n    dbg_assert(r8 || r16 || r32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\n            return -1 >>> (32 - n) | 0;\n        };\n        if(!r8) r8 = fail.bind(this, 8);\n        if(!r16) r16 = fail.bind(this, 16);\n        if(!r32) r32 = fail.bind(this, 32);\n    }\n\n    if(r8) this.ports[port_addr].read8 = r8;\n    if(r16) this.ports[port_addr].read16 = r16;\n    if(r32) this.ports[port_addr].read32 = r32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function(number)=} w8\n * @param {function(number)=} w16\n * @param {function(number)=} w32\n */\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!w8 || typeof w8 === \"function\");\n    dbg_assert(!w16 || typeof w16 === \"function\");\n    dbg_assert(!w32 || typeof w32 === \"function\");\n    dbg_assert(w8 || w16 || w32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\n        };\n        if(!w8) w8 = fail.bind(this, 8);\n        if(!w16) w16 = fail.bind(this, 16);\n        if(!w32) w32 = fail.bind(this, 32);\n    }\n\n    if(w8) this.ports[port_addr].write8 = w8;\n    if(w16) this.ports[port_addr].write16 = w16;\n    if(w32) this.ports[port_addr].write32 = w32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\n *\n * This info is not correct for all ports, but handled by the following functions\n *\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\n * ports and 0 or 1 32-bit ports\n *\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function():number} r8_1\n * @param {function():number} r8_2\n * @param {function():number=} r8_3\n * @param {function():number=} r8_4\n */\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function r16_1()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8;\n    }\n    function r16_2()\n    {\n        return r8_3.call(this) |\n                r8_4.call(this) << 8;\n    }\n    function r32()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8 |\n                r8_3.call(this) << 16 |\n                r8_4.call(this) << 24;\n    }\n\n    if(r8_3 && r8_4)\n    {\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\n        this.register_read(port_addr + 1, device, r8_2);\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\n        this.register_read(port_addr + 3, device, r8_4);\n    }\n    else\n    {\n        this.register_read(port_addr, device, r8_1, r16_1);\n        this.register_read(port_addr + 1, device, r8_2);\n    }\n};\n\n/**\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function(number)} w8_1\n * @param {function(number)} w8_2\n * @param {function(number)=} w8_3\n * @param {function(number)=} w8_4\n */\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function w16_1(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n    }\n    function w16_2(data)\n    {\n        w8_3.call(this, data & 0xFF);\n        w8_4.call(this, data >> 8 & 0xFF);\n    }\n    function w32(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n        w8_3.call(this, data >> 16 & 0xFF);\n        w8_4.call(this, data >>> 24);\n    }\n\n    if(w8_3 && w8_4)\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\n        this.register_write(port_addr + 1, device, w8_2);\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\n        this.register_write(port_addr + 3, device, w8_4);\n    }\n    else\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1);\n        this.register_write(port_addr + 1, device, w8_2);\n    }\n};\n\nIO.prototype.in_mmap_range = function(start, count)\n{\n    start >>>= 0;\n    count >>>= 0;\n\n    var end = start + count;\n\n    if(end >= this.cpu.memory_size)\n    {\n        return true;\n    }\n\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\n    start &= ~(MMAP_BLOCK_SIZE - 1);\n\n    while(start < end)\n    {\n        if(this.cpu.in_mapped_range(start))\n        {\n            return true;\n        }\n\n        start += MMAP_BLOCK_SIZE;\n    }\n\n    return false;\n};\n\nIO.prototype.mmap_read32_shim = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_read8[aligned_addr];\n\n    return fn(addr) | fn(addr + 1) << 8 |\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\n};\n\nIO.prototype.mmap_write32_shim = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_write8[aligned_addr];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1, value >> 8 & 0xFF);\n    fn(addr + 2, value >> 16 & 0xFF);\n    fn(addr + 3, value >>> 24);\n};\n\n/**\n * @param {number} addr\n * @param {number} size\n * @param {*} read_func8\n * @param {*} write_func8\n * @param {*=} read_func32\n * @param {*=} write_func32\n */\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\n{\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\n\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    if(!read_func32)\n        read_func32 = this.mmap_read32_shim.bind(this);\n\n    if(!write_func32)\n        write_func32 = this.mmap_write32_shim.bind(this);\n\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    for(; size > 0; aligned_addr++)\n    {\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\n\n        size -= MMAP_BLOCK_SIZE;\n    }\n};\n\n\nIO.prototype.port_write8 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write8.call(entry.device, data);\n};\n\nIO.prototype.port_write16 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write16.call(entry.device, data);\n};\n\nIO.prototype.port_write32 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write32.call(entry.device, data);\n};\n\nIO.prototype.port_read8 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read8.call(entry.device);\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read16 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read16.call(entry.device);\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read32 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read32.call(entry.device);\n    dbg_assert((value | 0) === value);\n    return value;\n};\n\n// via seabios ioport.h\nvar debug_port_list = {\n    0x0004: \"PORT_DMA_ADDR_2\",\n    0x0005: \"PORT_DMA_CNT_2\",\n    0x000a: \"PORT_DMA1_MASK_REG\",\n    0x000b: \"PORT_DMA1_MODE_REG\",\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\n    0x0020: \"PORT_PIC1_CMD\",\n    0x0021: \"PORT_PIC1_DATA\",\n    0x0040: \"PORT_PIT_COUNTER0\",\n    0x0041: \"PORT_PIT_COUNTER1\",\n    0x0042: \"PORT_PIT_COUNTER2\",\n    0x0043: \"PORT_PIT_MODE\",\n    0x0060: \"PORT_PS2_DATA\",\n    0x0061: \"PORT_PS2_CTRLB\",\n    0x0064: \"PORT_PS2_STATUS\",\n    0x0070: \"PORT_CMOS_INDEX\",\n    0x0071: \"PORT_CMOS_DATA\",\n    0x0080: \"PORT_DIAG\",\n    0x0081: \"PORT_DMA_PAGE_2\",\n    0x0092: \"PORT_A20\",\n    0x00a0: \"PORT_PIC2_CMD\",\n    0x00a1: \"PORT_PIC2_DATA\",\n    0x00b2: \"PORT_SMI_CMD\",\n    0x00b3: \"PORT_SMI_STATUS\",\n    0x00d4: \"PORT_DMA2_MASK_REG\",\n    0x00d6: \"PORT_DMA2_MODE_REG\",\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\n    0x00f0: \"PORT_MATH_CLEAR\",\n    0x0170: \"PORT_ATA2_CMD_BASE\",\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\n    0x0278: \"PORT_LPT2\",\n    0x02e8: \"PORT_SERIAL4\",\n    0x02f8: \"PORT_SERIAL2\",\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\n    0x0378: \"PORT_LPT1\",\n    0x03e8: \"PORT_SERIAL3\",\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\n    0x03f0: \"PORT_FD_BASE\",\n    0x03f2: \"PORT_FD_DOR\",\n    0x03f4: \"PORT_FD_STATUS\",\n    0x03f5: \"PORT_FD_DATA\",\n    0x03f6: \"PORT_HD_DATA\",\n    0x03f7: \"PORT_FD_DIR\",\n    0x03f8: \"PORT_SERIAL1\",\n    0x0cf8: \"PORT_PCI_CMD\",\n    0x0cf9: \"PORT_PCI_REBOOT\",\n    0x0cfc: \"PORT_PCI_DATA\",\n    0x0402: \"PORT_BIOS_DEBUG\",\n    0x0510: \"PORT_QEMU_CFG_CTL\",\n    0x0511: \"PORT_QEMU_CFG_DATA\",\n    0xb000: \"PORT_ACPI_PM_BASE\",\n    0xb100: \"PORT_SMB_BASE\",\n    0x8900: \"PORT_BIOS_APM\"\n};\n\nIO.prototype.get_port_description = function(addr)\n{\n    if(debug_port_list[addr])\n    {\n        return \"  (\" + debug_port_list[addr] + \")\";\n    }\n    else\n    {\n        return \"\";\n    }\n};\n\n\n","\"use strict\";\n\nvar\n/** @const */ LOG_ALL = -1,\n/** @const */ LOG_NONE = 0,\n\n/** @const */ LOG_OTHER =  0x000001,\n/** @const */ LOG_CPU =    0x000002,\n/** @const */ LOG_FPU =    0x000004,\n/** @const */ LOG_MEM =    0x000008,\n/** @const */ LOG_DMA =    0x000010,\n/** @const */ LOG_IO =     0x000020,\n/** @const */ LOG_PS2 =    0x000040,\n/** @const */ LOG_PIC =    0x000080,\n/** @const */ LOG_VGA =    0x000100,\n/** @const */ LOG_PIT =    0x000200,\n/** @const */ LOG_MOUSE =  0x000400,\n/** @const */ LOG_PCI =    0x000800,\n/** @const */ LOG_BIOS =   0x001000,\n/** @const */ LOG_FLOPPY = 0x002000,\n/** @const */ LOG_SERIAL = 0x004000,\n/** @const */ LOG_DISK =   0x008000,\n/** @const */ LOG_RTC =    0x010000,\n/** @const */ LOG_HPET =   0x020000,\n/** @const */ LOG_ACPI =   0x040000,\n/** @const */ LOG_APIC =   0x080000,\n/** @const */ LOG_NET =    0x100000,\n/** @const */ LOG_VIRTIO = 0x200000,\n/** @const */ LOG_9P =     0x400000,\n/** @const */ LOG_SB16 =   0x800000;\n\n\n/**\n * @const\n * @type {Array<Array<string|number>>}\n */\nvar LOG_NAMES = [\n    [1, \"\"],\n    [LOG_CPU, \"CPU\"],\n    [LOG_DISK, \"DISK\"],\n    [LOG_FPU, \"FPU\"],\n    [LOG_MEM, \"MEM\"],\n    [LOG_DMA, \"DMA\"],\n    [LOG_IO, \"IO\"],\n    [LOG_PS2, \"PS2\"],\n    [LOG_PIC, \"PIC\"],\n    [LOG_VGA, \"VGA\"],\n    [LOG_PIT, \"PIT\"],\n    [LOG_MOUSE, \"MOUS\"],\n    [LOG_PCI, \"PCI\"],\n    [LOG_BIOS, \"BIOS\"],\n    [LOG_FLOPPY, \"FLOP\"],\n    [LOG_SERIAL, \"SERI\"],\n    [LOG_RTC, \"RTC\"],\n    [LOG_HPET, \"HPET\"],\n    [LOG_ACPI, \"ACPI\"],\n    [LOG_APIC, \"APIC\"],\n    [LOG_NET, \"NET\"],\n    [LOG_VIRTIO, \"VIO\"],\n    [LOG_9P, \"9P\"],\n    [LOG_SB16, \"SB16\"]\n];\n\nvar\n/** @const */ TLB_SYSTEM_READ = 1,\n/** @const */ TLB_SYSTEM_WRITE = 2,\n/** @const */ TLB_USER_READ = 4,\n/** @const */ TLB_USER_WRITE = 8;\n\n\nvar\n\n// flags register bitflags\n/** @const */ flag_carry = 1,\n/** @const */ flag_parity = 4,\n/** @const */ flag_adjust = 16,\n/** @const */ flag_zero = 64,\n/** @const */ flag_sign = 128,\n/** @const */ flag_trap = 256,\n/** @const */ flag_interrupt = 512,\n/** @const */ flag_direction = 1024,\n/** @const */ flag_overflow = 2048,\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\n/** @const */ flag_nt = 1 << 14,\n/** @const */ flag_rf = 1 << 16,\n/** @const */ flag_vm = 1 << 17,\n/** @const */ flag_ac = 1 << 18,\n/** @const */ flag_vif = 1 << 19,\n/** @const */ flag_vip = 1 << 20,\n/** @const */ flag_id = 1 << 21,\n\n/**\n * default values of reserved flags bits\n * @const\n */\nflags_default = 1 << 1,\n\n/**\n * bitmask to select non-reserved flags bits\n * @const\n */\nflags_mask =\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\n    flag_vif | flag_vip | flag_id,\n\n\n/**\n * all arithmetic flags\n * @const\n */\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\n\n\n/**\n * opsizes used by get flag functions\n *\n * @const\n */\nOPSIZE_8 = 7,\n/** @const */\nOPSIZE_16 = 15,\n/** @const */\nOPSIZE_32 = 31,\n\n/** @const */\nPSE_ENABLED = 128,\n\n/** @const */ reg_eax = 0,\n/** @const */ reg_ecx = 1,\n/** @const */ reg_edx = 2,\n/** @const */ reg_ebx = 3,\n/** @const */ reg_esp = 4,\n/** @const */ reg_ebp = 5,\n/** @const */ reg_esi = 6,\n/** @const */ reg_edi = 7,\n\n/** @const */ reg_ax = 0,\n/** @const */ reg_cx = 2,\n/** @const */ reg_dx = 4,\n/** @const */ reg_bx = 6,\n/** @const */ reg_sp = 8,\n/** @const */ reg_bp = 10,\n/** @const */ reg_si = 12,\n/** @const */ reg_di = 14,\n\n/** @const */ reg_al = 0,\n/** @const */ reg_cl = 4,\n/** @const */ reg_dl = 8,\n/** @const */ reg_bl = 12,\n/** @const */ reg_ah = 1,\n/** @const */ reg_ch = 5,\n/** @const */ reg_dh = 9,\n/** @const */ reg_bh = 13,\n\n\n/** @const */ reg_es = 0,\n/** @const */ reg_cs = 1,\n/** @const */ reg_ss = 2,\n/** @const */ reg_ds = 3,\n/** @const */ reg_fs = 4,\n/** @const */ reg_gs = 5,\n\n\n/** @const */ reg_tr = 6, // task register\n/** @const */ reg_ldtr = 7; // local descriptor table register\n\nvar\n    /**\n     * The minimum number of bytes that can be memory-mapped\n     * by one device.\n     *\n     * @const\n     */\n    MMAP_BLOCK_BITS = 17,\n    /** @const */\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\n\n\n/** @const */\nvar MEM_PAGE_WRITTEN = 1;\n\n\n/** @const */\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\n\n\nvar\n    /** @const */\n    REPEAT_STRING_PREFIX_NONE = 0,\n    /** @const */\n    REPEAT_STRING_PREFIX_NZ = 1,\n    /** @const */\n    REPEAT_STRING_PREFIX_Z = 2;\n\nvar\n    /** @const */\n    CR0_PE = 1,\n    /** @const */\n    CR0_MP = 1 << 1,\n    /** @const */\n    CR0_EM = 1 << 2,\n    /** @const */\n    CR0_TS = 1 << 3,\n    /** @const */\n    CR0_ET = 1 << 4,\n    /** @const */\n    CR0_WP = 1 << 16,\n    /** @const */\n    CR0_NW = 1 << 29,\n    /** @const */\n    CR0_CD = 1 << 30,\n    /** @const */\n    CR0_PG = 1 << 31;\n\nvar\n    /** @const */\n    CR4_VME = 1,\n    /** @const */\n    CR4_PVI = 1 << 1,\n    /** @const */\n    CR4_TSD = 1 << 2,\n    /** @const */\n    CR4_PSE = 1 << 4,\n    /** @const */\n    CR4_DE = 1 << 3,\n    /** @const */\n    CR4_PAE = 1 << 5,\n    /** @const */\n    CR4_PGE = 1 << 7,\n    /** @const */\n    CR4_OSFXSR = 1 << 9,\n    /** @const */\n    CR4_OSXMMEXCPT = 1 << 10;\n\n\n// Segment prefixes must not collide with reg_*s variables\n// _ZERO is a special zero offset segment\nvar\n    /** @const */\n    SEG_PREFIX_NONE = -1,\n\n    /** @const */\n    SEG_PREFIX_ZERO = 7;\n\n\nvar\n    /** @const */\n    IA32_SYSENTER_CS = 0x174,\n\n    // Note: These are wrong in Intel's manuals. Fuck Intel\n    /** @const */\n    IA32_SYSENTER_ESP = 0x175,\n\n    /** @const */\n    IA32_SYSENTER_EIP = 0x176;\n\n/** @const */\nvar IA32_TIME_STAMP_COUNTER = 0x10;\n\n/** @const */\nvar IA32_PLATFORM_ID = 0x17;\n\n/** @const */\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\n\n/** @const */\nvar IA32_APIC_BASE_MSR = 0x1B;\n\n/** @const */\nvar IA32_BIOS_SIGN_ID = 0x8B;\n\n/** @const */\nvar IA32_MISC_ENABLE = 0x1A0;\n\n/** @const */\nvar IA32_RTIT_CTL = 0x570;\n\n/** @const */\nvar MSR_SMI_COUNT = 0x34;\n\n/** @const */\nvar IA32_MCG_CAP = 0x179;\n\n/** @const */\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\n\n/** @const */\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\n\n\n/** @const */\nvar IA32_APIC_BASE_BSP = 1 << 8;\n/** @const */\nvar IA32_APIC_BASE_EXTD = 1 << 10;\n/** @const */\nvar IA32_APIC_BASE_EN = 1 << 11;\n\n\n/** @const */ var TSR_BACKLINK = 0x00;\n/** @const */ var TSR_CR3 = 0x1C;\n/** @const */ var TSR_EIP = 0x20;\n/** @const */ var TSR_EFLAGS = 0x24;\n\n/** @const */ var TSR_EAX = 0x28;\n/** @const */ var TSR_ECX = 0x2c;\n/** @const */ var TSR_EDX = 0x30;\n/** @const */ var TSR_EBX = 0x34;\n/** @const */ var TSR_ESP = 0x38;\n/** @const */ var TSR_EBP = 0x3c;\n/** @const */ var TSR_ESI = 0x40;\n/** @const */ var TSR_EDI = 0x44;\n\n/** @const */ var TSR_ES = 0x48;\n/** @const */ var TSR_CS = 0x4c;\n/** @const */ var TSR_SS = 0x50;\n/** @const */ var TSR_DS = 0x54;\n/** @const */ var TSR_FS = 0x58;\n/** @const */ var TSR_GS = 0x5c;\n/** @const */ var TSR_LDT = 0x60;\n\n\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\n\n\n/** @const */\nvar PREFIX_MASK_REP = 0b11000;\n/** @const */\nvar PREFIX_REPZ = 0b01000;\n/** @const */\nvar PREFIX_REPNZ = 0b10000;\n\n/** @const */\nvar PREFIX_MASK_SEGMENT = 0b111;\n\n/** @const */\nvar PREFIX_MASK_OPSIZE = 0b100000;\n/** @const */\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\n\n/** @const */\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\n/** @const */\nvar PREFIX_F3 = PREFIX_REPZ; // alias\n/** @const */\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\n\n/** @const */\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\n","\"use strict\";\n\n/** @constructor */\nfunction v86(bus)\n{\n    /** @type {boolean} */\n    this.running = false;\n\n    /** @type {boolean} */\n    this.stopped = false;\n\n    /** @type {CPU} */\n    this.cpu = new CPU(bus);\n\n    this.bus = bus;\n    bus.register(\"cpu-init\", this.init, this);\n    bus.register(\"cpu-run\", this.run, this);\n    bus.register(\"cpu-stop\", this.stop, this);\n    bus.register(\"cpu-restart\", this.restart, this);\n\n    this.register_tick();\n}\n\nv86.prototype.run = function()\n{\n    if(!this.running)\n    {\n        this.bus.send(\"emulator-started\");\n        this.fast_next_tick();\n    }\n};\n\nv86.prototype.do_tick = function()\n{\n    if(this.stopped)\n    {\n        this.stopped = this.running = false;\n        this.bus.send(\"emulator-stopped\");\n        return;\n    }\n\n    this.running = true;\n    var dt = this.cpu.main_run();\n\n    if(dt <= 0)\n    {\n        this.fast_next_tick();\n    }\n    else\n    {\n        this.next_tick(dt);\n    }\n};\n\nv86.prototype.stop = function()\n{\n    if(this.running)\n    {\n        this.stopped = true;\n    }\n};\n\nv86.prototype.restart = function()\n{\n    this.cpu.reset();\n    this.cpu.load_bios();\n};\n\nv86.prototype.init = function(settings)\n{\n    this.cpu.init(settings, this.bus);\n    this.bus.send(\"emulator-ready\");\n};\n\nif(typeof setImmediate !== \"undefined\")\n{\n    /** @this {v86} */\n    var fast_next_tick = function()\n    {\n        setImmediate(() => { this.do_tick(); });\n    };\n\n    /** @this {v86} */\n    var register_tick = function() {};\n}\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\n{\n    // setImmediate shim for the browser.\n    // TODO: Make this deactivatable, for other applications\n    //       using postMessage\n\n    /** @const */\n    let MAGIC_POST_MESSAGE = 0xAA55;\n\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\n    };\n\n    /** @this {v86} */\n    register_tick = function()\n    {\n        window.addEventListener(\"message\", (e) =>\n        {\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\n            {\n                this.do_tick();\n            }\n        }, false);\n    };\n}\nelse\n{\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        setTimeout(() => { this.do_tick(); }, 0);\n    };\n\n    /** @this {v86} */\n    register_tick = function() {};\n}\n\nv86.prototype.fast_next_tick = fast_next_tick;\nv86.prototype.register_tick = register_tick;\n\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\n{\n    /** @this {v86} */\n    var next_tick = function(t)\n    {\n        if(t < 4 || document.hidden)\n        {\n            // Avoid sleeping for 1 second (happens if page is not\n            // visible), it can break boot processes. Also don't try to\n            // sleep for less than 4ms, since the value is clamped up\n            this.fast_next_tick();\n        }\n        else\n        {\n            setTimeout(() => { this.do_tick(); }, t);\n        }\n    };\n}\nelse\n{\n    // In environments that aren't browsers, we might as well use setTimeout\n    /** @this {v86} */\n    next_tick = function(t)\n    {\n        setTimeout(() => { this.do_tick(); }, t);\n    };\n}\n\nv86.prototype.next_tick = next_tick;\n\nv86.prototype.save_state = function()\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.save_state();\n};\n\nv86.prototype.restore_state = function(state)\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.restore_state(state);\n};\n\n\nif(typeof performance === \"object\" && performance.now)\n{\n    v86.microtick = function()\n    {\n        return performance.now();\n    };\n}\n//else if(typeof process === \"object\" && process.hrtime)\n//{\n//    v86.microtick = function()\n//    {\n//        var t = process.hrtime();\n//        return t[0] * 1000 + t[1] / 1e6;\n//    };\n//}\nelse\n{\n    v86.microtick = Date.now;\n}\n","\"use strict\";\n\n/** @const */\nvar CPU_LOG_VERBOSE = true;\n\n\n// Resources:\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n// http://ref.x86asm.net/geek32.html\n\n\n/** @constructor */\nfunction CPU(bus)\n{\n    /** @type {number} */\n    this.memory_size = 0;\n\n    // Note: Currently unused (degrades performance and not required by any OS\n    //       that we support)\n    this.a20_enabled = true;\n\n    this.mem_page_infos = undefined;\n\n    this.mem8 = new Uint8Array(0);\n    this.mem16 = new Uint16Array(this.mem8.buffer);\n    this.mem32s = new Int32Array(this.mem8.buffer);\n\n    this.segment_is_null = new Uint8Array(8);\n    this.segment_limits = new Uint32Array(8);\n    //this.segment_infos = new Uint32Array(8);\n    this.segment_offsets = new Int32Array(8);\n\n    /**\n     * Translation Lookaside Buffer\n     * @const\n     */\n    this.tlb_data = new Int32Array(1 << 20);\n\n    /**\n     * Information about which pages are cached in the tlb.\n     * By bit:\n     *   0 system, read\n     *   1 system, write\n     *   2 user, read\n     *   3 user, write\n     * @const\n     */\n    this.tlb_info = new Uint8Array(1 << 20);\n\n    /**\n     * Same as tlb_info, except it only contains global pages\n     * @const\n     */\n    this.tlb_info_global = new Uint8Array(1 << 20);\n\n    /**\n     * Wheter or not in protected mode\n     * @type {boolean}\n     */\n    this.protected_mode = false;\n\n    /**\n     * interrupt descriptor table\n     * @type {number}\n     */\n    this.idtr_size = 0;\n    /** @type {number} */\n    this.idtr_offset = 0;\n\n    /**\n     * global descriptor table register\n     * @type {number}\n     */\n    this.gdtr_size = 0;\n    /** @type {number} */\n    this.gdtr_offset = 0;\n\n    this.tss_size_32 = false;\n\n    /*\n     * whether or not a page fault occured\n     */\n    this.page_fault = false;\n\n    this.cr = new Int32Array(8);\n\n    /** @type {number} */\n    this.cr[0] = 0;\n    /** @type {number} */\n    this.cr[2] = 0;\n    /** @type {number} */\n    this.cr[3] = 0;\n    /** @type {number} */\n    this.cr[4] = 0;\n\n    // current privilege level\n    /** @type {number} */\n    this.cpl = 0;\n\n    // if false, pages are 4 KiB, else 4 Mib\n    /** @type {number} */\n    this.page_size_extensions = 0;\n\n    // current operand/address size\n    /** @type {boolean} */\n    this.is_32 = false;\n\n    /** @type {boolean} */\n    this.stack_size_32 = false;\n\n    /**\n     * Was the last instruction a hlt?\n     * @type {boolean}\n     */\n    this.in_hlt = false;\n\n    /** @type {number} */\n    this.last_virt_eip = 0;\n\n    /** @type {number} */\n    this.eip_phys = 0;\n\n    /** @type {number} */\n    this.last_virt_esp = 0;\n\n    /** @type {number} */\n    this.esp_phys = 0;\n\n\n    /** @type {number} */\n    this.sysenter_cs = 0;\n\n    /** @type {number} */\n    this.sysenter_esp = 0;\n\n    /** @type {number} */\n    this.sysenter_eip = 0;\n\n    /** @type {number} */\n    this.prefixes = 0;\n\n    /** @type {number} */\n    this.flags = 0;\n\n    /**\n     * bitmap of flags which are not updated in the flags variable\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\n     * @type {number}\n     */\n    this.flags_changed = 0;\n\n    /**\n     * the last 2 operators and the result and size of the last arithmetic operation\n     * @type {number}\n     */\n    this.last_op1 = 0;\n    /** @type {number} */\n    this.last_op2 = 0;\n    /** @type {number} */\n    this.last_op_size = 0;\n\n    /** @type {number} */\n    this.last_add_result = 0;\n\n    /** @type {number} */\n    this.last_result = 0;\n\n    this.mul32_result = new Int32Array(2);\n    this.div32_result = new Float64Array(2);\n\n    this.tsc_offset = 0;\n\n    /** @type {number} */\n    this.modrm_byte = 0;\n\n    /** @type {number} */\n    this.phys_addr = 0;\n\n    /** @type {number} */\n    this.phys_addr_high = 0;\n\n    /** @type {!Object} */\n    this.devices = {};\n\n    this.table = [];\n\n    // paging enabled\n    /** @type {boolean} */\n    this.paging = false;\n\n    /** @type {number} */\n    this.instruction_pointer = 0;\n\n    /** @type {number} */\n    this.previous_ip = 0;\n\n    this.apic_enabled = true;\n\n    /**\n     * @type {number}\n     */\n    this.timestamp_counter = 0;\n\n    // registers\n    this.reg32s = new Int32Array(8);\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    // mm0-mm7 split up into 32 bit pairs\n    this.reg_mmxs = new Int32Array(16);\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n\n    this.reg_xmm32s = new Int32Array(8 * 4);\n    this.mxcsr = 0x1F80;\n\n    // segment registers, tr and ldtr\n    this.sreg = new Uint16Array(8);\n\n    // debug registers\n    this.dreg = new Int32Array(8);\n\n\n    // managed in io.js\n    /** @const */ this.memory_map_read8 = [];\n    /** @const */ this.memory_map_write8 = [];\n    /** @const */ this.memory_map_read32 = [];\n    /** @const */ this.memory_map_write32 = [];\n\n    /**\n     * @const\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\n     */\n    this.bios = {\n        main: null,\n        vga: null,\n    };\n\n    /** @type {number} */\n    this.fw_value = 0;\n\n    this.io = undefined;\n    this.fpu = undefined;\n\n    this.bus = bus;\n\n    dbg_assert(this.table16 && this.table32);\n    dbg_assert(this.table0F_16 && this.table0F_32);\n\n    this.update_operand_size();\n\n    this.tsc_offset = v86.microtick();\n\n    this.debug_init();\n\n    this.init2();\n\n    //Object.seal(this);\n}\n\nCPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.memory_size;\n    state[1] = this.segment_is_null;\n    state[2] = this.segment_offsets;\n    state[3] = this.segment_limits;\n    state[4] = this.protected_mode;\n    state[5] = this.idtr_offset;\n    state[6] = this.idtr_size;\n    state[7] = this.gdtr_offset;\n    state[8] = this.gdtr_size;\n    state[9] = this.page_fault;\n    state[10] = this.cr;\n    state[11] = this.cpl;\n    state[12] = this.page_size_extensions;\n    state[13] = this.is_32;\n\n    state[16] = this.stack_size_32;\n    state[17] = this.in_hlt;\n    state[18] = this.last_virt_eip;\n    state[19] = this.eip_phys;\n    state[20] = this.last_virt_esp;\n    state[21] = this.esp_phys;\n    state[22] = this.sysenter_cs;\n    state[23] = this.sysenter_eip;\n    state[24] = this.sysenter_esp;\n    state[25] = this.prefixes;\n    state[26] = this.flags;\n    state[27] = this.flags_changed;\n    state[28] = this.last_op1;\n    state[29] = this.last_op2;\n    state[30] = this.last_op_size;\n    state[31] = this.last_add_result;\n    state[32] = this.modrm_byte;\n\n    state[36] = this.paging;\n    state[37] = this.instruction_pointer;\n    state[38] = this.previous_ip;\n    state[39] = this.reg32s;\n    state[40] = this.sreg;\n    state[41] = this.dreg;\n    state[42] = this.mem8;\n    state[43] = this.fpu;\n\n    state[45] = this.devices.virtio;\n    state[46] = this.devices.apic;\n    state[47] = this.devices.rtc;\n    state[48] = this.devices.pci;\n    state[49] = this.devices.dma;\n    state[50] = this.devices.acpi;\n    state[51] = this.devices.hpet;\n    state[52] = this.devices.vga;\n    state[53] = this.devices.ps2;\n    state[54] = this.devices.uart;\n    state[55] = this.devices.fdc;\n    state[56] = this.devices.cdrom;\n    state[57] = this.devices.hda;\n    state[58] = this.devices.pit;\n    state[59] = this.devices.net;\n    state[60] = this.devices.pic;\n    state[61] = this.devices.sb16;\n\n    state[62] = this.a20_enabled;\n    state[63] = this.fw_value;\n\n    state[64] = this.devices.ioapic;\n\n    state[65] = this.tss_size_32;\n\n    state[66] = this.reg_mmxs;\n\n    return state;\n};\n\nCPU.prototype.set_state = function(state)\n{\n    this.memory_size = state[0];\n    this.segment_is_null = state[1];\n    this.segment_offsets = state[2];\n    this.segment_limits = state[3];\n    this.protected_mode = state[4];\n    this.idtr_offset = state[5];\n    this.idtr_size = state[6];\n    this.gdtr_offset = state[7];\n    this.gdtr_size = state[8];\n    this.page_fault = state[9];\n    this.cr = state[10];\n    this.cpl = state[11];\n    this.page_size_extensions = state[12];\n    this.is_32 = state[13];\n\n    this.stack_size_32 = state[16];\n\n    this.in_hlt = state[17];\n    this.last_virt_eip = state[18];\n    this.eip_phys = state[19];\n    this.last_virt_esp = state[20];\n    this.esp_phys = state[21];\n    this.sysenter_cs = state[22];\n    this.sysenter_eip = state[23];\n    this.sysenter_esp = state[24];\n    this.prefixes = state[25];\n\n    this.flags = state[26];\n    this.flags_changed = state[27];\n    this.last_op1 = state[28];\n    this.last_op2 = state[29];\n    this.last_op_size = state[30];\n    this.last_add_result = state[31];\n    this.modrm_byte = state[32];\n\n    this.paging = state[36];\n    this.instruction_pointer = state[37];\n    this.previous_ip = state[38];\n    this.reg32s = state[39];\n    this.sreg = state[40];\n    this.dreg = state[41];\n    this.mem8 = state[42];\n    this.fpu = state[43];\n\n    this.devices.virtio = state[45];\n    this.devices.apic = state[46];\n    this.devices.rtc = state[47];\n    this.devices.pci = state[48];\n    this.devices.dma = state[49];\n    this.devices.acpi = state[50];\n    this.devices.hpet = state[51];\n    this.devices.vga = state[52];\n    this.devices.ps2 = state[53];\n    this.devices.uart = state[54];\n    this.devices.fdc = state[55];\n    this.devices.cdrom = state[56];\n    this.devices.hda = state[57];\n    this.devices.pit = state[58];\n    this.devices.net = state[59];\n    this.devices.pic = state[60];\n    this.devices.sb16 = state[61];\n\n    this.a20_enabled = state[62];\n    this.fw_value = state[63];\n\n    this.devices.ioapic = state[64];\n\n    this.tss_size_32 = state[65];\n\n    this.reg_mmxs = state[66];\n\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\n\n\n    this.full_clear_tlb();\n    // tsc_offset?\n\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n    this.update_operand_size();\n};\n\n\n/**\n * @return {number} time in ms until this method should becalled again\n */\nCPU.prototype.main_run = function()\n{\n    if(this.in_hlt)\n    {\n        //if(false)\n        //{\n        //    var _t = this.hlt_loop();\n        //    var t = 0;\n        //}\n        //else\n        //{\n            var t = this.hlt_loop();\n        //}\n\n        if(this.in_hlt)\n        {\n            return t;\n        }\n    }\n\n    this.do_run();\n\n    return 0;\n};\n\nCPU.prototype.exception_cleanup = function(e)\n{\n    if(e === MAGIC_CPU_EXCEPTION)\n    {\n        // A legit CPU exception (for instance, a page fault happened)\n        // call_interrupt_vector has already been called at this point,\n        // so we just need to reset some state\n\n        this.page_fault = false;\n\n        // restore state from prefixes\n        this.clear_prefixes();\n    }\n    else\n    {\n        console.log(e);\n        console.log(e.stack);\n        //var e = new Error(e.message);\n        //Error.captureStackTrace && Error.captureStackTrace(e);\n        throw e;\n    }\n};\n\nCPU.prototype.reboot_internal = function()\n{\n    this.reset();\n    this.load_bios();\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.reset = function()\n{\n    this.a20_enabled = true;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.segment_is_null[i] = 0;\n        this.segment_limits[i] = 0;\n        //this.segment_infos = new Uint32Array(8);\n        this.segment_offsets[i] = 0;\n    }\n\n    this.full_clear_tlb();\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg32s[i] = 0;\n        this.sreg[i] = 0;\n        this.cr[i] = 0;\n        this.dreg[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_mmxs.length; i++)\n    {\n        this.reg_mmxs[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\n    {\n        this.reg_xmm32s[i] = 0;\n    }\n    this.mxcsr = 0x1F80;\n\n    this.protected_mode = false;\n\n    // http://www.sandpile.org/x86/initial.htm\n    this.idtr_size = 0;\n    this.idtr_offset = 0;\n\n    this.gdtr_size = 0;\n    this.gdtr_offset = 0;\n\n    this.page_fault = false;\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\n    this.cr[2] = 0;\n    this.cr[3] = 0;\n    this.cr[4] = 0;\n    this.dreg[6] = 0xFFFF0FF0|0;\n    this.dreg[7] = 0x400;\n    this.cpl = 0;\n    this.paging = false;\n    this.page_size_extensions = 0;\n    this.is_32 = false;\n    this.stack_size_32 = false;\n    this.prefixes = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.update_operand_size();\n\n    this.timestamp_counter = 0;\n    this.previous_ip = 0;\n    this.in_hlt = false;\n\n    this.sysenter_cs = 0;\n    this.sysenter_esp = 0;\n    this.sysenter_eip = 0;\n\n    this.flags = flags_default;\n    this.flags_changed = 0;\n\n    this.last_result = 0;\n    this.last_add_result = 0;\n    this.last_op1 = 0;\n    this.last_op2 = 0;\n    this.last_op_size = 0;\n\n    this.tsc_offset = v86.microtick();\n\n    this.instruction_pointer = 0xFFFF0;\n    this.switch_cs_real_mode(0xF000);\n\n    this.switch_seg(reg_ss, 0x30);\n    this.reg16[reg_sp] = 0x100;\n\n    if(this.devices.virtio)\n    {\n        this.devices.virtio.reset();\n    }\n\n    this.fw_value = 0;\n};\n\n/** @export */\nCPU.prototype.create_memory = function(size)\n{\n    if(size < 1024 * 1024)\n    {\n        size = 1024 * 1024;\n    }\n    else if((size | 0) < 0)\n    {\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\n    }\n\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\n    dbg_assert((size | 0) > 0);\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    this.memory_size = size;\n\n    var buffer = new ArrayBuffer(size);\n\n    this.mem8 = new Uint8Array(buffer);\n    this.mem16 = new Uint16Array(buffer);\n    this.mem32s = new Int32Array(buffer);\n};\n\nCPU.prototype.init = function(settings, device_bus)\n{\n    this.create_memory(typeof settings.memory_size === \"number\" ?\n        settings.memory_size : 1024 * 1024 * 64);\n\n    this.reset();\n\n    var io = new IO(this);\n    this.io = io;\n\n    this.bios.main = settings.bios;\n    this.bios.vga = settings.vga_bios;\n\n    this.load_bios();\n\n    var a20_byte = 0;\n\n    io.register_read(0xB3, this, function()\n    {\n        // seabios smm_relocate_and_restore\n        dbg_log(\"port 0xB3 read\");\n        return 0;\n    });\n\n    io.register_read(0x92, this, function()\n    {\n        return a20_byte;\n    });\n\n    io.register_write(0x92, this, function(out_byte)\n    {\n        a20_byte = out_byte;\n    });\n\n    io.register_read(0x511, this, function()\n    {\n        // bios config port (used by seabios and kvm-unit-test)\n        let result = this.fw_value & 0xFF;\n        this.fw_value >>>= 8;\n        return result;\n    });\n    io.register_write(0x510, this, undefined, function(value)\n    {\n        dbg_log(\"bios config port, index=\" + h(value));\n\n        if(value === FW_CFG_SIGNATURE)\n        {\n            // We could pretend to be QEMU here to control certain options in\n            // seabios, but for now this isn't needed\n            this.fw_value = 0xfab0fab0|0;\n        }\n        else if(value === FW_CFG_RAM_SIZE)\n        {\n            this.fw_value = this.memory_size;\n        }\n        else if(value === FW_CFG_NB_CPUS)\n        {\n            this.fw_value = 1;\n        }\n        else\n        {\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\n            this.fw_value = 0;\n        }\n    });\n\n    if(DEBUG)\n    {\n        // Use by linux for port-IO delay\n        // Avoid generating tons of debug messages\n        io.register_write(0x80, this, function(out_byte)\n        {\n        });\n    }\n\n    this.devices = {};\n\n    // TODO: Make this more configurable\n    if(settings.load_devices)\n    {\n        this.devices.pic = new PIC(this);\n        this.devices.pci = new PCI(this);\n\n        if(ENABLE_ACPI)\n        {\n            this.devices.ioapic = new IOAPIC(this);\n            this.devices.apic = new APIC(this);\n            this.devices.acpi = new ACPI(this);\n        }\n\n        this.devices.rtc = new RTC(this);\n        this.fill_cmos(this.devices.rtc, settings);\n\n        this.devices.dma = new DMA(this);\n\n        if(ENABLE_HPET)\n        {\n            this.devices.hpet = new HPET(this);\n        }\n\n        this.devices.vga = new VGAScreen(this, device_bus,\n                settings.vga_memory_size || 8 * 1024 * 1024);\n\n        this.fpu = new FPU(this);\n\n        this.devices.ps2 = new PS2(this, device_bus);\n\n        this.devices.uart = new UART(this, 0x3F8, device_bus);\n\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\n\n        var ide_device_count = 0;\n\n        if(settings.hda)\n        {\n            this.devices.hda = new IDEDevice(this, settings.hda, false, ide_device_count++, device_bus);\n        }\n\n        if(settings.cdrom)\n        {\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, true, ide_device_count++, device_bus);\n        }\n\n        if(settings.hdb)\n        {\n            this.devices.hdb = new IDEDevice(this, settings.hdb, false, ide_device_count++, device_bus);\n        }\n\n        this.devices.pit = new PIT(this, device_bus);\n\n        if(settings.enable_ne2k)\n        {\n            this.devices.net = new Ne2k(this, device_bus);\n        }\n\n        if(settings.fs9p)\n        {\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\n        }\n\n        if(true)\n        {\n            this.devices.sb16 = new SB16(this, device_bus);\n        }\n    }\n\n    if(settings.multiboot)\n    {\n        dbg_assert(settings.multiboot.buffer);\n        this.load_multiboot(settings.multiboot.buffer);\n    }\n\n    if(DEBUG)\n    {\n        this.debug.init();\n    }\n};\n\nCPU.prototype.load_multiboot = function(buffer)\n{\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\n\n    const MAGIC = 0x1BADB002;\n    const ELF_MAGIC = 0x464C457F;\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\n    const MULTIBOOT_SEARCH_BYTES = 8192;\n\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\n    {\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\n    }\n    else\n    {\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\n    }\n\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\n    {\n        if(buf32[offset >> 2] === MAGIC)\n        {\n            var flags = buf32[offset + 4 >> 2];\n            var checksum = buf32[offset + 8 >> 2];\n            var total = MAGIC + flags + checksum | 0;\n\n            if(total)\n            {\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\n                continue;\n            }\n        }\n        else\n        {\n            continue;\n        }\n\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\n\n        this.reg32s[reg_eax] = 0x2BADB002;\n\n        let multiboot_info_addr = 0x7C00;\n        this.reg32s[reg_ebx] = multiboot_info_addr;\n        this.write32(multiboot_info_addr, 0);\n\n        this.cr[0] = 1;\n        this.protected_mode = true;\n        this.flags = flags_default;\n        this.update_cs_size(true);\n        this.stack_size_32 = true;\n\n        for(var i = 0; i < 6; i++)\n        {\n            this.segment_is_null[i] = 0;\n            this.segment_offsets[i] = 0;\n            this.segment_limits[i] = 0xFFFFFFFF;\n\n            // Value doesn't matter, OS isn't allowed to reload without setting\n            // up a proper GDT\n            this.sreg[i] = 0xB002;\n        }\n\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\n        {\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\n\n            var header_addr = buf32[offset + 12 >> 2];\n            var load_addr = buf32[offset + 16 >> 2];\n            var load_end_addr = buf32[offset + 20 >> 2];\n            var bss_end_addr = buf32[offset + 24 >> 2];\n            var entry_addr = buf32[offset + 28 >> 2];\n\n            dbg_log(\"header=\" + h(header_addr, 8) +\n                    \" load=\" + h(load_addr, 8) +\n                    \" load_end=\" + h(load_end_addr, 8) +\n                    \" bss_end=\" + h(bss_end_addr, 8) +\n                    \" entry=\" + h(entry_addr, 8));\n\n            dbg_assert(load_addr <= header_addr);\n\n            var file_start = offset - (header_addr - load_addr);\n\n            if(load_end_addr === 0)\n            {\n                var length = undefined;\n            }\n            else\n            {\n                dbg_assert(load_end_addr >= load_addr);\n                var length = load_end_addr - load_addr;\n            }\n\n            let blob = new Uint8Array(buffer, file_start, length);\n            this.write_blob(blob, load_addr);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\n        }\n        else if(buf32[0] === ELF_MAGIC)\n        {\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\n\n            let elf = read_elf(buffer);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\n\n            for(let program of elf.program_headers)\n            {\n                if(program.type === 0)\n                {\n                    // null\n                }\n                else if(program.type === 1)\n                {\n                    // load\n\n                    // Since multiboot specifies that paging is disabled,\n                    // virtual and physical address must be equal\n                    dbg_assert(program.paddr === program.vaddr);\n                    dbg_assert(program.filesz <= program.memsz);\n\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\n                    this.write_blob(blob, program.paddr);\n                }\n                else if(program.type === 4 ||\n                        program.type === 0x6474e550 ||\n                        program.type === 0x6474e551)\n                {\n                    // ignore for now\n                }\n                else\n                {\n                    dbg_assert(false, \"unimplemented elf section type\");\n                }\n            }\n        }\n        else\n        {\n            dbg_assert(false, \"Not a bootable multiboot format\");\n        }\n\n        // only for kvm-unit-test\n        this.io.register_write_consecutive(0xF4, this,\n            function(value)\n            {\n                console.log(\"Test exited with code \" + h(value, 2));\n                throw \"HALT\";\n            },\n            function() {},\n            function() {},\n            function() {});\n\n        // only for kvm-unit-test\n        for(let i = 0xE; i <= 0xF; i++)\n        {\n            this.io.register_write(0x2000 + i, this,\n                function(value)\n                {\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\n                    if(value)\n                    {\n                        this.device_raise_irq(i);\n                    }\n                    else\n                    {\n                        this.device_lower_irq(i);\n                    }\n                });\n        }\n\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\n        this.debug.dump_state();\n        this.debug.dump_regs();\n\n        break;\n    }\n};\n\nCPU.prototype.fill_cmos = function(rtc, settings)\n{\n    var boot_order = settings.boot_order || 0x213;\n\n    // Used by seabios to determine the boot order\n    //   Nibble\n    //   1: FloppyPrio\n    //   2: HDPrio\n    //   3: CDPrio\n    //   4: BEVPrio\n    // bootflag 1, high nibble, lowest priority\n    // Low nibble: Disable floppy signature check (1)\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\n\n    // bootflag 2, both nibbles, high and middle priority\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\n\n    // 640k or less if less memory is used\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\n\n    var memory_above_1m = 0; // in k\n    if(this.memory_size >= 1024 * 1024)\n    {\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\n    }\n\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\n\n    var memory_above_16m = 0; // in 64k blocks\n    if(this.memory_size >= 16 * 1024 * 1024)\n    {\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\n    }\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\n\n    // memory above 4G (not supported by this emulator)\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\n\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\n\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\n\n    // Used by bochs BIOS to skip the boot menu delay.\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\n};\n\nCPU.prototype.load_bios = function()\n{\n    var bios = this.bios.main;\n    var vga_bios = this.bios.vga;\n\n    if(!bios)\n    {\n        dbg_log(\"Warning: No BIOS\");\n        return;\n    }\n\n    // load bios\n    var data = new Uint8Array(bios),\n        start = 0x100000 - bios.byteLength;\n\n    this.write_blob(data, start);\n\n    if(vga_bios)\n    {\n        // load vga bios\n        var vga_bios8 = new Uint8Array(vga_bios);\n\n        // older versions of seabios\n        this.write_blob(vga_bios8, 0xC0000);\n\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\n        this.io.mmap_register(0xFEB00000, 0x100000,\n            function(addr)\n            {\n                addr = (addr - 0xFEB00000) | 0;\n                if(addr < vga_bios8.length)\n                {\n                    return vga_bios8[addr];\n                }\n                else\n                {\n                    return 0;\n                }\n            },\n            function(addr, value)\n            {\n                dbg_assert(false, \"Unexpected write to VGA rom\");\n            });\n    }\n    else\n    {\n        dbg_log(\"Warning: No VGA BIOS\");\n    }\n\n    // seabios expects the bios to be mapped to 0xFFF00000 also\n    this.io.mmap_register(0xFFF00000, 0x100000,\n        function(addr)\n        {\n            addr &= 0xFFFFF;\n            return this.mem8[addr];\n        }.bind(this),\n        function(addr, value)\n        {\n            addr &= 0xFFFFF;\n            this.mem8[addr] = value;\n        }.bind(this));\n};\n\nCPU.prototype.do_run = function()\n{\n    /** @type {number} */\n    var start = v86.microtick();\n\n    /** @type {number} */\n    var now = start;\n\n    // outer loop:\n    // runs cycles + timers\n    for(; now - start < TIME_PER_FRAME;)\n    {\n        this.run_hardware_timers(now);\n        this.handle_irqs();\n\n        this.do_many_cycles();\n\n        if(this.in_hlt)\n        {\n            return;\n        }\n\n        now = v86.microtick();\n    }\n};\n\nCPU.prototype.do_many_cycles = function()\n{\n    try {\n        this.do_many_cycles_unsafe();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.do_many_cycles_unsafe = function()\n{\n    // inner loop:\n    // runs only cycles\n    for(var k = LOOP_COUNTER; k--;)\n    {\n        this.cycle_internal();\n    }\n};\n\n// Some functions must not be inlined, because then more code is in the\n// deoptimized try-catch block.\n// This trick is a bit ugly, but it works without further complication.\nif(typeof window !== \"undefined\")\n{\n    window[\"__no_inline_for_closure_compiler__\"] = [\n        CPU.prototype.exception_cleanup,\n        CPU.prototype.do_many_cycles_unsafe,\n        CPU.prototype.do_many_cycles,\n    ];\n}\n\n/** @const */\nvar PROFILING = false;\n\nif(PROFILING)\n{\n    var instruction_total = new Float64Array(256);\n    var instruction_count = new Float64Array(256);\n\n    window[\"print_profiling\"] = function print_profiling()\n    {\n        var prof_instructions = [];\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\n            n: h(i, 2),\n            total: instruction_total[i],\n            count: instruction_count[i],\n            per: (instruction_total[i] / instruction_count[i]) || 0,\n        };\n\n        console.log(\"count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\n\n        console.log(\"time:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\n\n        console.log(\"time/count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\n    };\n}\n\n/**\n * execute a single instruction cycle on the cpu\n * this includes reading all prefixes and the whole instruction\n */\nCPU.prototype.cycle_internal = function()\n{\n    this.previous_ip = this.instruction_pointer;\n\n    this.timestamp_counter++;\n\n    if(PROFILING)\n    {\n        var start = performance.now();\n    }\n\n    var opcode = this.read_imm8();\n    //this.translate_address_read(this.instruction_pointer + 15|0)\n\n    if(DEBUG)\n    {\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\n    }\n\n    // call the instruction\n    this.table[opcode](this);\n\n    if(PROFILING)\n    {\n        var end = performance.now();\n        instruction_total[opcode] += end - start;\n        instruction_count[opcode]++;\n    }\n\n    if(this.flags & flag_trap)\n    {\n        // TODO\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\n    }\n};\n\n/** @export */\nCPU.prototype.cycle = function()\n{\n    try\n    {\n        this.cycle_internal();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.segment_prefix_op = function(sreg)\n{\n    dbg_assert(sreg <= 5);\n    this.prefixes |= sreg + 1;\n    this.run_prefix_instruction();\n    this.prefixes = 0;\n};\n\nCPU.prototype.run_prefix_instruction = function()\n{\n    if(this.is_osize_32())\n    {\n        this.table32[this.read_imm8()](this);\n    }\n    else\n    {\n        this.table16[this.read_imm8()](this);\n    }\n};\n\nCPU.prototype.hlt_loop = function()\n{\n    dbg_assert(this.flags & flag_interrupt);\n    //dbg_log(\"In HLT loop\", LOG_CPU);\n\n    this.run_hardware_timers(v86.microtick());\n    this.handle_irqs();\n\n    return 0;\n};\n\nCPU.prototype.run_hardware_timers = function(now)\n{\n    if(ENABLE_HPET)\n    {\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\n        this.devices.hpet.timer(now);\n    }\n    else\n    {\n        var pit_time = this.devices.pit.timer(now, false);\n        var rtc_time = this.devices.rtc.timer(now, false);\n    }\n\n    if(ENABLE_ACPI)\n    {\n        this.devices.acpi.timer(now);\n        this.devices.apic.timer(now);\n    }\n};\n\nCPU.prototype.clear_prefixes = function()\n{\n    this.prefixes = 0;\n};\n\nCPU.prototype.set_cr0 = function(cr0)\n{\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\n\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\n    {\n        // cannot load PG without PE\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.cr[0] = cr0;\n\n    if(!this.fpu)\n    {\n        // if there's no FPU, keep emulation set\n        this.cr[0] |= CR0_EM;\n    }\n    this.cr[0] |= CR0_ET;\n\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\n\n    dbg_assert(typeof this.paging === \"boolean\");\n    if(new_paging !== this.paging)\n    {\n        this.paging = new_paging;\n        this.full_clear_tlb();\n    }\n\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\n};\n\nCPU.prototype.set_cr4 = function(cr4)\n{\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.cr[4] ^ cr4) & CR4_PGE)\n    {\n        if(cr4 & CR4_PGE)\n        {\n            // The PGE bit has been enabled. The global TLB is\n            // still empty, so we only have to copy it over\n            this.clear_tlb();\n        }\n        else\n        {\n            // Clear the global TLB\n            this.full_clear_tlb();\n        }\n    }\n\n    this.cr[4] = cr4;\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\n\n    if(cr4 & CR4_PAE)\n    {\n        throw this.debug.unimpl(\"PAE\");\n    }\n\n    if(cr4 & 0xFFFFF900)\n    {\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\n        this.trigger_ud();\n    }\n\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\n};\n\nCPU.prototype.cpl_changed = function()\n{\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.read_imm8 = function()\n{\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\n    {\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\n    }\n\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\n\n    return data8;\n};\n\nCPU.prototype.read_imm8s = function()\n{\n    return this.read_imm8() << 24 >> 24;\n};\n\nCPU.prototype.read_imm16 = function()\n{\n    // Two checks in one comparison:\n    //    1. Did the high 20 bits of eip change\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\n    {\n        return this.read_imm8() | this.read_imm8() << 8;\n    }\n\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\n\n    return data16;\n};\n\nCPU.prototype.read_imm32s = function()\n{\n    // Analogue to the above comment\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\n    {\n        return this.read_imm16() | this.read_imm16() << 16;\n    }\n\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\n\n    return data32;\n};\n\n/*\n * Create an internal data unit to represent 64 bits of data\n */\nCPU.prototype.create_atom64s = function(low, high)\n{\n    let data = new Int32Array(2);\n    data[0] = low;\n    data[1] = high;\n    return data;\n};\n\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\n{\n    let data = new Int32Array(4);\n    data[0] = d0;\n    data[1] = d1;\n    data[2] = d2;\n    data[3] = d3;\n    return data;\n}\n\nCPU.prototype.read_modrm_byte = function()\n{\n    this.modrm_byte = this.read_imm8();\n};\n\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\n\nCPU.prototype.init2 = function () {};\nCPU.prototype.branch_taken = function () {};\nCPU.prototype.branch_not_taken = function () {};\nCPU.prototype.diverged = function () {};\n\nCPU.prototype.modrm_resolve = function(modrm_byte)\n{\n    dbg_assert(modrm_byte < 0xC0);\n\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\n};\n\nCPU.prototype.sib_resolve = function(mod)\n{\n    return this.sib_table[this.read_sib()](this, mod);\n};\n\nCPU.prototype.clear_instruction_cache = function() {};\n\n// read word from a page boundary, given 2 physical addresses\nCPU.prototype.virt_boundary_read16 = function(low, high)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    return this.read8(low) | this.read8(high) << 8;\n};\n\n// read doubleword from a page boundary, given 2 addresses\nCPU.prototype.virt_boundary_read32s = function(low, high)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    var mid;\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            mid = this.read_aligned16(high - 2 >> 1);\n        }\n        else\n        {\n            // 0xFFD\n            mid = this.read_aligned16(low + 1 >> 1);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\n    }\n\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\n};\n\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    this.write8(low, value);\n    this.write8(high, value >> 8);\n};\n\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    this.write8(low, value);\n    this.write8(high, value >> 24);\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            this.write8(high - 2, value >> 8);\n            this.write8(high - 1, value >> 16);\n        }\n        else\n        {\n            // 0xFFD\n            this.write8(low + 1 | 0, value >> 8);\n            this.write8(low + 2 | 0, value >> 16);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        this.write8(low + 1 | 0, value >> 8);\n        this.write8(high - 1, value >> 16);\n    }\n};\n\n// safe_read, safe_write\n// read or write byte, word or dword to the given *virtual* address,\n// and be safe on page boundaries\n\nCPU.prototype.safe_read8 = function(addr)\n{\n    dbg_assert(addr < 0x80000000);\n    return this.read8(this.translate_address_read(addr));\n};\n\nCPU.prototype.safe_read16 = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\n    {\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\n    }\n    else\n    {\n        return this.read16(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read32s = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\n    {\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\n    }\n    else\n    {\n        return this.read32s(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read64s = function(addr)\n{\n    let data = this.create_atom64s(0, 0);\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\n    {\n        data[0] = this.safe_read32s(addr);\n        data[1] = this.safe_read32s(addr + 4 | 0);\n    }\n    else\n    {\n        data[0] = this.read32s(this.translate_address_read(addr));\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\n    }\n    return data;\n};\n\nCPU.prototype.safe_read128s_aligned = function(addr)\n{\n    dbg_assert((addr & 0xF) === 0);\n    let phys = this.translate_address_read(addr);\n    return this.create_atom128s(\n        this.read32s(phys),\n        this.read32s(phys + 4 | 0),\n        this.read32s(phys + 8 | 0),\n        this.read32s(phys + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_read128s_unaligned = function(addr)\n{\n    return this.create_atom128s(\n        this.safe_read32s(addr),\n        this.safe_read32s(addr + 4 | 0),\n        this.safe_read32s(addr + 8 | 0),\n        this.safe_read32s(addr + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_write8 = function(addr, value)\n{\n    dbg_assert(addr < 0x80000000);\n    this.write8(this.translate_address_write(addr), value);\n};\n\nCPU.prototype.safe_write16 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) === 0xFFF)\n    {\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\n    }\n    else\n    {\n        this.write16(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write32 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) >= 0xFFD)\n    {\n        // XXX\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\n    }\n    else\n    {\n        this.write32(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write64 = function(addr, low, high)\n{\n    this.writable_or_pagefault(addr, 8);\n    this.safe_write32(addr, low);\n    this.safe_write32(addr + 4 | 0, high);\n};\n\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\n{\n    this.writable_or_pagefault(addr, 16);\n    this.safe_write32(addr, d0);\n    this.safe_write32(addr + 4 | 0, d1);\n    this.safe_write32(addr + 8 | 0, d2);\n    this.safe_write32(addr + 12 | 0, d3);\n};\n\n\n// read 2 or 4 byte from ip, depending on address size attribute\nCPU.prototype.read_moffs = function()\n{\n    if(this.is_asize_32())\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\n    }\n    else\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\n    }\n};\n\nCPU.prototype.getiopl = function()\n{\n    return this.flags >> 12 & 3;\n};\n\nCPU.prototype.vm86_mode = function()\n{\n    return !!(this.flags & flag_vm);\n};\n\nCPU.prototype.get_eflags = function()\n{\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\n};\n\n/**\n * Update the flags register depending on iopl and cpl\n */\nCPU.prototype.update_eflags = function(new_flags)\n{\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\n        clear = ~flag_vip & ~flag_vif & flags_mask;\n\n    if(this.flags & flag_vm)\n    {\n        // other case needs to be handled in popf or iret\n        dbg_assert(this.getiopl() === 3);\n\n        dont_update |= flag_iopl;\n\n        // don't clear vip or vif\n        clear |= flag_vip | flag_vif;\n    }\n    else\n    {\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\n\n        if(this.cpl)\n        {\n            // cpl > 0\n            // cannot update iopl\n            dont_update |= flag_iopl;\n\n            if(this.cpl > this.getiopl())\n            {\n                // cpl > iopl\n                // cannot update interrupt flag\n                dont_update |= flag_interrupt;\n            }\n        }\n    }\n\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\n\n    this.flags_changed = 0;\n};\n\nCPU.prototype.get_stack_reg = function()\n{\n    if(this.stack_size_32)\n    {\n        return this.reg32s[reg_esp];\n    }\n    else\n    {\n        return this.reg16[reg_sp];\n    }\n};\n\nCPU.prototype.set_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] = value;\n    }\n    else\n    {\n        this.reg16[reg_sp] = value;\n    }\n};\n\nCPU.prototype.adjust_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] += value;\n    }\n    else\n    {\n        this.reg16[reg_sp] += value;\n    }\n};\n\nCPU.prototype.get_stack_pointer = function(mod)\n{\n    if(this.stack_size_32)\n    {\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\n    }\n    else\n    {\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\n    }\n};\n\n/*\n * returns the \"real\" instruction pointer,\n * without segment offset\n */\nCPU.prototype.get_real_eip = function()\n{\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\n};\n\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\n{\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\n\n    this.debug.debug_interrupt(interrupt_nr);\n\n    dbg_assert(error_code === false || typeof error_code === \"number\");\n\n    // we have to leave hlt_loop at some point, this is a\n    // good place to do it\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\n    this.in_hlt = false;\n\n    if(this.protected_mode)\n    {\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\n        {\n            throw this.debug.unimpl(\"VME\");\n        }\n\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\n        {\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\n        {\n            dbg_log(interrupt_nr, LOG_CPU);\n            dbg_trace(LOG_CPU);\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\n        dbg_assert((addr & 0xFFF) < 0xFF8);\n\n        if(this.paging)\n        {\n            addr = this.translate_address_system_read(addr);\n        }\n\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\n        var selector = this.read16(addr + 2 | 0);\n        var access = this.read8(addr + 5 | 0);\n        var dpl = access >> 5 & 3;\n        var type = access & 31;\n\n        if((access & 0x80) === 0)\n        {\n            // present bit not set\n            throw this.debug.unimpl(\"#NP handler\");\n        }\n\n        if(is_software_int && dpl < this.cpl)\n        {\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(interrupt_nr << 3 | 2);\n        }\n\n        if(type === 5)\n        {\n            // task gate\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\n            dbg_trace(LOG_CPU);\n\n            this.do_task_switch(selector, error_code);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n            return;\n        }\n\n        if((type & ~1 & ~8) !== 6)\n        {\n            // invalid type\n            dbg_trace(LOG_CPU);\n            dbg_log(\"invalid type: \" + h(type));\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var is_trap = (type & 1) === 1;\n        var is_16 = (type & 8) === 0;\n\n        var info = this.lookup_segment_selector(selector);\n\n        dbg_assert((base >>> 0) <= info.effective_limit);\n        dbg_assert(info.is_valid);\n\n        if(info.is_null)\n        {\n            dbg_log(\"is null\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_executable || info.dpl > this.cpl)\n        {\n            dbg_log(\"not exec\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_present)\n        {\n            // kvm-unit-test\n            dbg_log(\"not present\");\n            this.trigger_np(interrupt_nr << 3 | 2);\n        }\n\n        var old_flags = this.get_eflags();\n\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\n\n        if(!info.dc_bit && info.dpl < this.cpl)\n        {\n            // inter privilege level interrupt\n            // interrupt from vm86 mode\n\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\n            //this.debug.dump_regs();\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\n\n            if(this.tss_size_32)\n            {\n                var new_esp = this.read32s(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\n            }\n            else\n            {\n                var new_esp = this.read16(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\n            }\n            var ss_info = this.lookup_segment_selector(new_ss);\n\n            // Disabled: Incorrect handling of direction bit\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n            //    debugger;\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n            if(ss_info.is_null)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(!ss_info.is_present)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n\n            var old_esp = this.reg32s[reg_esp];\n            var old_ss = this.sreg[reg_ss];\n\n            if(old_flags & flag_vm)\n            {\n                //dbg_log(\"return from vm86 mode\");\n                //this.debug.dump_regs();\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\n\n            // XXX: with new cpl or with cpl 0?\n            this.translate_address_system_write(new_stack_pointer);\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\n\n            // no exceptions below\n\n            this.cpl = info.dpl;\n            this.cpl_changed();\n\n            this.update_cs_size(info.size);\n\n            this.flags &= ~flag_vm & ~flag_rf;\n\n            this.switch_seg(reg_ss, new_ss);\n            this.set_stack_reg(new_esp);\n\n            if(old_flags & flag_vm)\n            {\n                if(is_16)\n                {\n                    dbg_assert(false);\n                }\n                else\n                {\n                    this.push32(this.sreg[reg_gs]);\n                    this.push32(this.sreg[reg_fs]);\n                    this.push32(this.sreg[reg_ds]);\n                    this.push32(this.sreg[reg_es]);\n                }\n            }\n\n            if(is_16)\n            {\n                this.push16(old_ss);\n                this.push16(old_esp);\n            }\n            else\n            {\n                this.push32(old_ss);\n                this.push32(old_esp);\n            }\n        }\n        else if(info.dc_bit || info.dpl === this.cpl)\n        {\n            // intra privilege level interrupt\n\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\n            //this.debug.dump_regs();\n\n            if(this.flags & flag_vm)\n            {\n                dbg_assert(false, \"check error code\");\n                this.trigger_gp(selector & ~3);\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\n\n            // XXX: with current cpl or with cpl 0?\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\n\n            // no exceptions below\n        }\n        else\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        if(is_16)\n        {\n            this.push16(old_flags);\n            this.push16(this.sreg[reg_cs]);\n            this.push16(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push16(error_code);\n            }\n\n            base &= 0xFFFF;\n        }\n        else\n        {\n            this.push32(old_flags);\n            this.push32(this.sreg[reg_cs]);\n            this.push32(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push32(error_code);\n            }\n        }\n\n        if(old_flags & flag_vm)\n        {\n            this.switch_seg(reg_gs, 0);\n            this.switch_seg(reg_fs, 0);\n            this.switch_seg(reg_ds, 0);\n            this.switch_seg(reg_es, 0);\n        }\n\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n        this.update_cs_size(info.size);\n\n        this.segment_limits[reg_cs] = info.effective_limit;\n        this.segment_offsets[reg_cs] = info.base;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\n\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\n\n        if(!is_trap)\n        {\n            // clear int flag for interrupt gates\n            this.flags &= ~flag_interrupt;\n        }\n        else\n        {\n            if(!this.page_fault) // XXX\n            {\n                this.handle_irqs();\n            }\n        }\n    }\n    else\n    {\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\n\n        var index = interrupt_nr << 2;\n        var new_ip = this.read16(index);\n        var new_cs = this.read16(index + 2 | 0);\n\n        // push flags, cs:ip\n        this.push16(this.get_eflags());\n        this.push16(this.sreg[reg_cs]);\n        this.push16(this.get_real_eip());\n\n        this.flags &= ~flag_interrupt;\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\n    }\n\n    //dbg_log(\"int to:\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n};\n\nCPU.prototype.iret16 = function()\n{\n    this.iret(true);\n};\n\nCPU.prototype.iret32 = function()\n{\n    this.iret(false);\n};\n\nCPU.prototype.iret = function(is_16)\n{\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\n    //this.debug.dump_regs();\n\n    if(this.vm86_mode() && this.getiopl() < 3)\n    {\n        // vm86 mode, iopl != 3\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(is_16)\n    {\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\n    }\n    else\n    {\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\n    }\n\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\n    {\n        if(new_eip & 0xFFFF0000)\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n            this.adjust_stack_reg(3 * 2);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n            this.adjust_stack_reg(3 * 4);\n        }\n\n        //dbg_log(\"iret32 to:\", LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n\n        this.handle_irqs();\n        return;\n    }\n\n    dbg_assert(!this.vm86_mode());\n\n    if(this.flags & flag_nt)\n    {\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\n        this.trigger_gp(0);\n    }\n\n    if(new_flags & flag_vm)\n    {\n        if(this.cpl === 0)\n        {\n            // return to virtual 8086 mode\n\n            // vm86 cannot be set in 16 bit flag\n            dbg_assert(!is_16);\n\n            dbg_assert((new_eip & ~0xFFFF) === 0);\n\n            //dbg_log(\"in vm86 mode now \" +\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\n\n\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\n\n            // no exceptions below\n\n            this.update_eflags(new_flags);\n            this.flags |= flag_vm;\n\n            this.switch_cs_real_mode(new_cs);\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\n\n            this.switch_seg(reg_es, new_es);\n            this.switch_seg(reg_ds, new_ds);\n            this.switch_seg(reg_fs, new_fs);\n            this.switch_seg(reg_gs, new_gs);\n\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\n\n            this.reg32s[reg_esp] = temp_esp;\n            this.switch_seg(reg_ss, temp_ss);\n\n            this.cpl = 3;\n            this.cpl_changed();\n\n            this.update_cs_size(false);\n\n            //dbg_log(\"iret32 to:\", LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n            //this.debug.dump_regs();\n\n            return;\n        }\n        else\n        {\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\n            new_flags &= ~flag_vm;\n        }\n    }\n\n    // protected mode return\n\n    var info = this.lookup_segment_selector(new_cs);\n\n    dbg_assert(info.is_valid);\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\n\n    if(info.is_null)\n    {\n        throw this.debug.unimpl(\"is null\");\n    }\n    if(!info.is_present)\n    {\n        throw this.debug.unimpl(\"not present\");\n    }\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"not exec\");\n    }\n    if(info.rpl < this.cpl)\n    {\n        throw this.debug.unimpl(\"rpl < cpl\");\n    }\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\n    }\n\n    if(!info.dc_bit && info.rpl !== info.dpl)\n    {\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\n        this.trigger_gp(new_cs & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        // outer privilege return\n        if(is_16)\n        {\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\n        }\n        else\n        {\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n        }\n\n        var ss_info = this.lookup_segment_selector(temp_ss);\n        var new_cpl = info.rpl;\n\n        if(ss_info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!ss_info.is_valid ||\n           ss_info.is_system ||\n           ss_info.rpl !== new_cpl ||\n           !ss_info.is_writable ||\n           ss_info.dpl !== new_cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(temp_ss & ~3);\n        }\n\n        if(!ss_info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(temp_ss & ~3);\n        }\n\n        // no exceptions below\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\n\n        this.switch_seg(reg_ss, temp_ss);\n\n        this.set_stack_reg(temp_esp);\n\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n\n\n        // XXX: Set segment to 0 if it's not usable in the new cpl\n        // XXX: Use cached segment information\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\n        // ...\n    }\n    else if(info.rpl === this.cpl)\n    {\n        // same privilege return\n        // no exceptions below\n        if(is_16)\n        {\n            this.adjust_stack_reg(3 * 2);\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.adjust_stack_reg(3 * 4);\n            this.update_eflags(new_flags);\n        }\n\n        // update vip and vif, which are not changed by update_eflags\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n\n    this.sreg[reg_cs] = new_cs;\n    dbg_assert((new_cs & 3) === this.cpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\n\n    this.handle_irqs();\n};\n\nCPU.prototype.switch_cs_real_mode = function(selector)\n{\n    dbg_assert(!this.protected_mode || this.vm86_mode());\n\n    this.sreg[reg_cs] = selector;\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_offsets[reg_cs] = selector << 4;\n};\n\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\n\n    if(!this.protected_mode)\n    {\n        dbg_assert(!this.is_32);\n        //dbg_assert(!this.stack_size_32);\n    }\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(false, \"is system in far return\");\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_executable)\n    {\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.rpl < this.cpl)\n    {\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        dbg_trace(LOG_CPU);\n        this.trigger_np(selector & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\n\n        if(this.is_osize_32())\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\n        }\n        else\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        // XXX: Can raise, conditions should be checked before side effects\n        this.switch_seg(reg_ss, temp_ss);\n        this.set_stack_reg(temp_esp + stack_adjust);\n\n        //if(this.is_osize_32())\n        //{\n        //    this.adjust_stack_reg(2 * 4);\n        //}\n        //else\n        //{\n        //    this.adjust_stack_reg(2 * 2);\n        //}\n\n        //throw this.debug.unimpl(\"privilege change\");\n\n        //this.adjust_stack_reg(stack_adjust);\n    }\n    else\n    {\n        if(this.is_osize_32())\n        {\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\n        }\n        else\n        {\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\n        }\n    }\n\n    //dbg_assert(this.cpl === info.dpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    //this.segment_infos[reg_cs] = 0; // TODO\n\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = selector;\n\n    dbg_assert((selector & 3) === this.cpl);\n\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n\n    //dbg_log(\"far return to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\n};\n\nCPU.prototype.far_jump = function(eip, selector, is_call)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"#gp null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(is_call, \"TODO: Jump\");\n\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\n\n        if(info.type === 0xC || info.type === 4)\n        {\n            // call gate\n            var is_16 = info.type === 4;\n\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\n            {\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n\n            if(!info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\n                this.trigger_np(selector & ~3);\n            }\n\n            var cs_selector = info.raw0 >>> 16;\n            var cs_info = this.lookup_segment_selector(cs_selector);\n\n            if(cs_info.is_null)\n            {\n                dbg_log(\"#gp null cs\", LOG_CPU);\n                this.trigger_gp(0);\n            }\n\n            if(!cs_info.is_valid)\n            {\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_executable)\n            {\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(cs_info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\n                this.trigger_np(cs_selector & ~3);\n            }\n\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\n            {\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\n\n                if(this.tss_size_32)\n                {\n                    var new_esp = this.read32s(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\n                }\n                else\n                {\n                    var new_esp = this.read16(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\n                }\n                var ss_info = this.lookup_segment_selector(new_ss);\n\n                // Disabled: Incorrect handling of direction bit\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n                //    debugger;\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n                if(ss_info.is_null)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(!ss_info.is_present)\n                {\n                    throw this.debug.unimpl(\"#SS handler\");\n                }\n\n                var parameter_count = info.raw1 & 0x1F;\n                var stack_space = is_16 ? 4 : 8;\n                if(is_call)\n                {\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\n                }\n                if(ss_info.size)\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n                else\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n\n                var old_esp = this.reg32s[reg_esp];\n                var old_ss = this.sreg[reg_ss];\n                var old_stack_pointer = this.get_stack_pointer(0);\n\n                //dbg_log(\"old_esp=\" + h(old_esp));\n\n                this.cpl = cs_info.dpl;\n                this.cpl_changed();\n\n                this.update_cs_size(cs_info.size);\n\n                this.switch_seg(reg_ss, new_ss);\n                this.set_stack_reg(new_esp);\n\n                //dbg_log(\"parameter_count=\" + parameter_count);\n                //dbg_assert(parameter_count === 0, \"TODO\");\n\n                if(is_16)\n                {\n                    this.push16(old_ss);\n                    this.push16(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n                else\n                {\n                    this.push32(old_ss);\n                    this.push32(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\n                            this.push16(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\n                            this.push32(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n            else\n            {\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\n                // ok\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n\n            // Note: eip from call is ignored\n            var new_eip = info.raw0 & 0xFFFF;\n            if(!is_16)\n            {\n                new_eip |= info.raw1 & 0xFFFF0000;\n            }\n\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\n\n            this.update_cs_size(cs_info.size);\n\n            this.segment_is_null[reg_cs] = 0;\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\n            //this.segment_infos[reg_cs] = 0; // TODO\n            this.segment_offsets[reg_cs] = cs_info.base;\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n        }\n        else\n        {\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\n        }\n    }\n    else\n    {\n        if(!info.is_executable)\n        {\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(info.dc_bit)\n        {\n            // conforming code segment\n            if(info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n        else\n        {\n            // non-conforming code segment\n\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\n            {\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n\n        this.update_cs_size(info.size);\n\n        this.segment_is_null[reg_cs] = 0;\n        this.segment_limits[reg_cs] = info.effective_limit;\n        //this.segment_infos[reg_cs] = 0; // TODO\n\n        this.segment_offsets[reg_cs] = info.base;\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n    }\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\n};\n\nCPU.prototype.get_tss_stack_addr = function(dpl)\n{\n    if(this.tss_size_32)\n    {\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\n    }\n    else\n    {\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\n    }\n\n    if(this.paging)\n    {\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\n    }\n\n    return tss_stack_addr;\n};\n\nCPU.prototype.do_task_switch = function(selector, error_code)\n{\n    dbg_assert(this.tss_size_32, \"TODO\");\n\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\n    var descriptor = this.lookup_segment_selector(selector);\n\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\n    var tss_is_16 = descriptor.type <= 3;\n    var tss_is_busy = (descriptor.type & 2) === 2;\n\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\n    {\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if((descriptor.access & 31) === 0xB)\n    {\n        // is busy\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!descriptor.is_present)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    if(descriptor.effective_limit < 103)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    var tsr_size = this.segment_limits[reg_tr];\n    var tsr_offset = this.segment_offsets[reg_tr];\n\n    var old_eflags = this.get_eflags();\n\n    if(tss_is_busy)\n    {\n        old_eflags &= ~flag_nt;\n    }\n\n    this.writable_or_pagefault(tsr_offset, 0x66);\n\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\n\n    // TODO: Write 16 bit values if old tss is 16 bit\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\n\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\n\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\n\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\n\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\n\n    if(true /* is jump or call or int */)\n    {\n        // mark as busy\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\n    }\n\n    //var new_tsr_size = descriptor.effective_limit;\n    var new_tsr_offset = descriptor.base;\n\n    dbg_assert(!tss_is_16, \"unimplemented\");\n\n    if(true /* is call or int */)\n    {\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\n    }\n\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\n\n    this.flags &= ~flag_vm;\n\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\n    var info = this.lookup_segment_selector(new_cs);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.is_system)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = new_cs;\n\n    this.cpl = info.dpl;\n    this.cpl_changed();\n\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n    this.update_cs_size(info.size);\n\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\n\n    if(true /* is call or int */)\n    {\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\n        new_eflags |= flag_nt;\n    }\n\n    if(new_eflags & flag_vm)\n    {\n        throw this.debug.unimpl(\"task switch to VM mode\");\n    }\n\n    this.update_eflags(new_eflags);\n\n    if(true /* call or int */)\n    {\n        this.flags |= flag_nt;\n    }\n\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\n    this.load_ldt(new_ldt);\n\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\n\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\n\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\n\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n\n    this.segment_offsets[reg_tr] = descriptor.base;\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    this.cr[3] = new_cr3;\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\n    this.clear_tlb();\n\n    this.cr[0] |= CR0_TS;\n\n    if(error_code !== false)\n    {\n        if(tss_is_16)\n        {\n            this.push16(error_code & 0xFFFF);\n        }\n        else\n        {\n            this.push32(error_code);\n        }\n    }\n};\n\nCPU.prototype.hlt_op = function()\n{\n    if(this.cpl)\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.flags & flag_interrupt) === 0)\n    {\n        this.debug.show(\"cpu halted\");\n        this.bus.send(\"cpu-event-halt\");\n        if(DEBUG) this.debug.dump_regs();\n        throw \"HALT\";\n    }\n    else\n    {\n        // get out of here and into hlt_loop\n        this.in_hlt = true;\n\n        //if(false) // possibly unsafe, test in safari\n        //{\n        //    this.hlt_loop();\n        //    this.diverged();\n        //    if(this.in_hlt)\n        //    {\n        //        throw MAGIC_CPU_EXCEPTION;\n        //    }\n        //}\n        //else\n        {\n            throw MAGIC_CPU_EXCEPTION;\n        }\n    }\n};\n\n// assumes ip to point to the byte before the next instruction\nCPU.prototype.raise_exception = function(interrupt_nr)\n{\n    //if(DEBUG && interrupt_nr !== 7)\n    //{\n    //    // show interesting exceptions\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //    this.debug.dump_state();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, false);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\n{\n    dbg_assert(typeof error_code === \"number\");\n\n    //if(DEBUG)\n    //{\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.trigger_de = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(0);\n};\n\nCPU.prototype.trigger_ud = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(6);\n};\n\nCPU.prototype.trigger_nm = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(7);\n};\n\nCPU.prototype.trigger_ts = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(10, code);\n};\n\nCPU.prototype.trigger_gp = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(13, code);\n};\n\nCPU.prototype.trigger_np = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(11, code);\n};\n\nCPU.prototype.trigger_ss = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(12, code);\n};\n\n// used before fpu instructions\nCPU.prototype.task_switch_test = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        this.trigger_nm();\n    }\n};\n\n// used before mmx instructions\nCPU.prototype.task_switch_test_mmx = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        if(this.cr[0] & CR0_TS)\n        {\n            this.trigger_nm();\n        }\n        else\n        {\n            this.trigger_ud();\n        }\n    }\n\n};\n\nCPU.prototype.todo = function()\n{\n    if(DEBUG)\n    {\n        dbg_trace();\n        throw \"TODO\";\n    }\n\n    this.trigger_ud();\n};\n\nCPU.prototype.undefined_instruction = function()\n{\n    dbg_assert(false, \"Possible fault: undefined instruction\");\n    this.trigger_ud();\n};\n\nCPU.prototype.unimplemented_sse = function()\n{\n    dbg_log(\"No SSE\", LOG_CPU);\n    dbg_assert(false);\n    this.trigger_ud();\n};\n\nCPU.prototype.get_seg_prefix_ds = function()\n{\n    return this.get_seg_prefix(reg_ds);\n};\n\nCPU.prototype.get_seg_prefix_ss = function()\n{\n    return this.get_seg_prefix(reg_ss);\n};\n\nCPU.prototype.get_seg_prefix_cs = function()\n{\n    return this.get_seg_prefix(reg_cs);\n};\n\n/**\n * Get segment base by prefix or default\n * @param {number} default_segment\n */\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\n{\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\n\n    if(prefix)\n    {\n        if(prefix === SEG_PREFIX_ZERO)\n        {\n            return 0;\n        }\n        else\n        {\n            return this.get_seg(prefix - 1 /*, offset*/);\n        }\n    }\n    else\n    {\n        return this.get_seg(default_segment /*, offset*/);\n    }\n};\n\n/**\n * Get segment base\n * @param {number} segment\n */\nCPU.prototype.get_seg = function(segment /*, offset*/)\n{\n    dbg_assert(segment >= 0 && segment < 8);\n\n    if(this.protected_mode)\n    {\n        if(this.segment_is_null[segment])\n        {\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\n            dbg_trace();\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\n\n            this.trigger_gp(0);\n        }\n\n        // TODO:\n        // - validate segment limits\n        // - validate if segment is writable\n    }\n\n    return this.segment_offsets[segment];\n};\n\nCPU.prototype.read_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.read_e8s = function()\n{\n    return this.read_e8() << 24 >> 24;\n};\n\nCPU.prototype.read_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.read_e16s = function()\n{\n    return this.read_e16() << 16 >> 16;\n};\n\nCPU.prototype.read_e32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.read_e32 = function()\n{\n    return this.read_e32s() >>> 0;\n};\n\nCPU.prototype.read_mmx_mem32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        // Returning lower dword of qword\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\n    }\n};\n\nCPU.prototype.read_mmx_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.create_atom64s(\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom64s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s_unaligned = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.set_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write8(addr, value);\n    } else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.set_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write16(addr, value);\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.set_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write32(addr, value);\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.set_mmx_mem64s = function(low, high)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write64(addr, low, high);\n    } else {\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\n    }\n};\n\nCPU.prototype.read_write_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        return this.read8(this.phys_addr);\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.write_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        this.write8(this.phys_addr, value);\n    }\n    else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.read_write_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read16(this.phys_addr);\n        }\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.write_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write16(this.phys_addr, value);\n        }\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.read_write_e32 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read32s(this.phys_addr);\n        }\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.write_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write32(this.phys_addr, value);\n        }\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.read_reg_e16 = function()\n{\n    return this.reg16[this.modrm_byte << 1 & 14];\n};\n\nCPU.prototype.write_reg_e16 = function(value)\n{\n    this.reg16[this.modrm_byte << 1 & 14] = value;\n};\n\nCPU.prototype.read_reg_e32s = function()\n{\n    return this.reg32s[this.modrm_byte & 7];\n};\n\nCPU.prototype.write_reg_e32 = function(value)\n{\n    this.reg32s[this.modrm_byte & 7] = value;\n};\n\nCPU.prototype.read_g8 = function()\n{\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\n};\n\nCPU.prototype.write_g8 = function(value)\n{\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\n};\n\nCPU.prototype.read_g16 = function()\n{\n    return this.reg16[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.read_g16s = function()\n{\n    return this.reg16s[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.write_g16 = function(value)\n{\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\n};\n\nCPU.prototype.read_g32s = function()\n{\n    return this.reg32s[this.modrm_byte >> 3 & 7];\n};\n\nCPU.prototype.write_g32 = function(value)\n{\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\n};\n\nCPU.prototype.read_xmm64s = function()\n{\n    return this.create_atom64s(\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\n    );\n};\n\nCPU.prototype.read_xmm128s = function()\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    return this.create_atom128s(\n        this.reg_xmm32s[i | 0],\n        this.reg_xmm32s[i | 1],\n        this.reg_xmm32s[i | 2],\n        this.reg_xmm32s[i | 3]\n    );\n};\n\nCPU.prototype.read_mmx64s = function()\n{\n    return this.create_atom64s(\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\n    );\n};\n\nCPU.prototype.write_mmx64s = function(low, high)\n{\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\n};\n\nCPU.prototype.write_xmm64 = function(low, high)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = low;\n    this.reg_xmm32s[i + 1] = high;\n};\n\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = d0;\n    this.reg_xmm32s[i + 1] = d1;\n    this.reg_xmm32s[i + 2] = d2;\n    this.reg_xmm32s[i + 3] = d3;\n};\n\nCPU.prototype.pic_call_irq = function(int)\n{\n    try\n    {\n        this.previous_ip = this.instruction_pointer;\n        this.call_interrupt_vector(int, false, false);\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.handle_irqs = function()\n{\n    dbg_assert(!this.page_fault);\n\n    this.diverged();\n\n    if((this.flags & flag_interrupt) && !this.page_fault)\n    {\n        if(this.devices.pic)\n        {\n            this.devices.pic.acknowledge_irq();\n        }\n\n        if(this.devices.apic)\n        {\n            this.devices.apic.acknowledge_irq();\n        }\n    }\n};\n\nCPU.prototype.device_raise_irq = function(i)\n{\n    dbg_assert(arguments.length === 1);\n    if(this.devices.pic)\n    {\n        this.devices.pic.set_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.set_irq(i);\n    }\n};\n\nCPU.prototype.device_lower_irq = function(i)\n{\n    if(this.devices.pic)\n    {\n        this.devices.pic.clear_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.clear_irq(i);\n    }\n};\n\nCPU.prototype.test_privileges_for_io = function(port, size)\n{\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\n    {\n        if(!this.tss_size_32)\n        {\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state();\n            this.trigger_gp(0);\n        }\n\n        var tsr_size = this.segment_limits[reg_tr];\n        var tsr_offset = this.segment_offsets[reg_tr];\n\n        if(tsr_size >= 0x67)\n        {\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\n\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\n                high_port = port + size - 1 | 0;\n\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\n            {\n                var mask = ((1 << size) - 1) << (port & 7),\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\n                    port_info = (mask & 0xFF00) ?\n                        this.read16(addr) : this.read8(addr);\n\n                dbg_assert((addr & 0xFFF) < 0xFFF);\n\n                if(!(port_info & mask))\n                {\n                    return;\n                }\n            }\n        }\n\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state();\n        this.trigger_gp(0);\n    }\n};\n\nCPU.prototype.cpuid = function()\n{\n    // cpuid\n    // TODO: Fill in with less bogus values\n\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\n    // http://www.sandpile.org/x86/cpuid.htm\n\n    var eax = 0;\n    var ecx = 0;\n    var edx = 0;\n    var ebx = 0;\n\n    var winnt_fix = false;\n\n    switch(this.reg32s[reg_eax])\n    {\n        case 0:\n            // maximum supported level\n            if(winnt_fix)\n            {\n                eax = 2;\n            }\n            else\n            {\n                eax = 5;\n            }\n\n            ebx = 0x756E6547|0; // Genu\n            edx = 0x49656E69|0; // ineI\n            ecx = 0x6C65746E|0; // ntel\n            break;\n\n        case 1:\n            // pentium\n            eax = 3 | 6 << 4 | 15 << 8;\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\n            var vme = 0 << 1;\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\n            edx = (this.fpu ? 1 : 0) |                // fpu\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\n                    0;// 1 << 23 | 1 << 24 | 1 << 25 | 1 << 26;   // mmx, fxsr, sse1, sse2\n\n            if(ENABLE_ACPI && this.apic_enabled)\n            {\n                edx |= 1 << 9; // apic\n            }\n            break;\n\n        case 2:\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\n            eax = 0x665B5001|0;\n            ebx = 0;\n            ecx = 0;\n            edx = 0x007A7000;\n            break;\n\n        case 4:\n            // from my local machine\n            switch(this.reg32s[reg_ecx])\n            {\n                case 0:\n                    eax = 0x00000121;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 1:\n                    eax = 0x00000122;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 2:\n                    eax = 0x00000143;\n                    ebx = 0x05c0003f;\n                    ecx = 0x00000fff;\n                    edx = 0x00000001;\n                    break;\n            }\n            break;\n\n        case 5:\n            // from my local machine\n            eax = 0x40;\n            ebx = 0x40;\n            ecx = 3;\n            edx = 0x00142120;\n            break;\n\n        case 0x80000000|0:\n            // maximum supported extended level\n            eax = 5;\n            // other registers are reserved\n            break;\n\n        case 0x40000000|0: // hypervisor\n            if(VMWARE_HYPERVISOR_PORT)\n            {\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\n                ebx = 0x61774D56|0; // VMwa\n                ecx = 0x4D566572|0; // reVM\n                edx = 0x65726177|0; // ware\n            }\n            break;\n\n        default:\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\n    }\n\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\n\n    this.reg32s[reg_eax] = eax;\n    this.reg32s[reg_ecx] = ecx;\n    this.reg32s[reg_edx] = edx;\n    this.reg32s[reg_ebx] = ebx;\n};\n\nCPU.prototype.update_cs_size = function(new_size)\n{\n    dbg_assert(typeof new_size === \"boolean\");\n\n    if(this.is_32 !== new_size)\n    {\n        this.clear_instruction_cache();\n        this.is_32 = new_size;\n        this.update_operand_size();\n    }\n};\n\nCPU.prototype.update_operand_size = function()\n{\n    if(this.is_32)\n    {\n        this.table = this.table32;\n    }\n    else\n    {\n        this.table = this.table16;\n    }\n};\n\n/**\n * @param {number} selector\n */\nCPU.prototype.lookup_segment_selector = function(selector)\n{\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\n\n    var is_gdt = (selector & 4) === 0,\n        selector_offset = selector & ~7,\n        info,\n        table_offset,\n        table_limit;\n\n    info = {\n        rpl: selector & 3,\n        from_gdt: is_gdt,\n        is_null: false,\n        is_valid: true,\n\n        base: 0,\n        access: 0,\n        flags: 0,\n        type: 0,\n        dpl: 0,\n        is_system: false,\n        is_present: false,\n        is_executable: false,\n        rw_bit: false,\n        dc_bit: false,\n        size: false,\n\n        is_conforming_executable: false,\n\n        // limit after applying granularity\n        effective_limit: 0,\n\n        is_writable: false,\n        is_readable: false,\n        table_offset: 0,\n\n        raw0: 0,\n        raw1: 0,\n    };\n\n    if(is_gdt)\n    {\n        table_offset = this.gdtr_offset;\n        table_limit = this.gdtr_size;\n    }\n    else\n    {\n        table_offset = this.segment_offsets[reg_ldtr];\n        table_limit = this.segment_limits[reg_ldtr];\n    }\n\n    if(is_gdt && selector_offset === 0)\n    {\n        info.is_null = true;\n        return info;\n    }\n\n    // limit is the number of entries in the table minus one\n    if((selector | 7) > table_limit)\n    {\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\n        info.is_valid = false;\n        return info;\n    }\n\n    table_offset = table_offset + selector_offset | 0;\n\n    if(this.paging)\n    {\n        table_offset = this.translate_address_system_read(table_offset);\n    }\n    info.table_offset = table_offset;\n\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\n                this.read8(table_offset + 7 | 0) << 24;\n    info.access = this.read8(table_offset + 5 | 0);\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\n\n    info.raw0 = this.read32s(table_offset     | 0);\n    info.raw1 = this.read32s(table_offset + 4 | 0);\n\n    //this.write8(table_offset + 5 | 0, info.access | 1);\n\n    // used if system\n    info.type = info.access & 0xF;\n\n    info.dpl = info.access >> 5 & 3;\n\n    info.is_system = (info.access & 0x10) === 0;\n    info.is_present = (info.access & 0x80) === 0x80;\n    info.is_executable = (info.access & 8) === 8;\n\n    info.rw_bit = (info.access & 2) === 2;\n    info.dc_bit = (info.access & 4) === 4;\n\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\n\n    info.size = (info.flags & 4) === 4;\n\n    var limit = this.read16(table_offset) |\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\n\n    if(info.flags & 8)\n    {\n        // granularity set\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\n    }\n    else\n    {\n        info.effective_limit = limit;\n    }\n\n    info.is_writable = info.rw_bit && !info.is_executable;\n    info.is_readable = info.rw_bit || !info.is_executable;\n\n    return info;\n};\n\n/**\n * @param {number} reg\n * @param {number} selector\n */\nCPU.prototype.switch_seg = function(reg, selector)\n{\n    dbg_assert(reg >= 0 && reg <= 5);\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.sreg[reg] = selector;\n        this.segment_is_null[reg] = 0;\n        this.segment_offsets[reg] = selector << 4;\n\n        if(reg === reg_ss)\n        {\n            this.stack_size_32 = false;\n        }\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(reg === reg_ss)\n    {\n        if(info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           info.rpl !== this.cpl ||\n           !info.is_writable ||\n           info.dpl !== this.cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(selector & ~3);\n        }\n\n        this.stack_size_32 = info.size;\n    }\n    else if(reg === reg_cs)\n    {\n        // handled by switch_cs_real_mode, far_return or far_jump\n        dbg_assert(false);\n    }\n    else\n    {\n        // es, ds, fs, gs\n        if(info.is_null)\n        {\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            //dbg_trace(LOG_CPU);\n            this.sreg[reg] = selector;\n            this.segment_is_null[reg] = 1;\n            return;\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           !info.is_readable ||\n           (!info.is_conforming_executable &&\n            (info.rpl > info.dpl || this.cpl > info.dpl))\n        ) {\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            this.debug.dump_state();\n            this.debug.dump_regs();\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n    }\n\n    this.segment_is_null[reg] = 0;\n    this.segment_limits[reg] = info.effective_limit;\n    //this.segment_infos[reg] = 0; // TODO\n\n    this.segment_offsets[reg] = info.base;\n    this.sreg[reg] = selector;\n};\n\nCPU.prototype.load_tr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    dbg_assert(info.is_valid);\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\n    }\n\n    if(info.is_null)\n    {\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"#GP | ltr: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\n    }\n\n    if(info.type !== 9 && info.type !== 1)\n    {\n        // 0xB: busy 386 TSS (GP)\n        // 0x9: 386 TSS\n        // 0x3: busy 286 TSS (GP)\n        // 0x1: 286 TSS (??)\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NT | present bit not set (ltr)\");\n        throw this.debug.unimpl(\"#NT handler\");\n    }\n\n    this.tss_size_32 = info.type === 9;\n    this.segment_offsets[reg_tr] = info.base;\n    this.segment_limits[reg_tr] = info.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    // Mark task as busy\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\n\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\n};\n\nCPU.prototype.load_ldt = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        // invalid\n        this.segment_offsets[reg_ldtr] = 0;\n        this.segment_limits[reg_ldtr] = 0;\n        return;\n    }\n\n    dbg_assert(info.is_valid);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"lldt: present bit not set\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"lldt: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(info.type !== 2)\n    {\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.segment_offsets[reg_ldtr] = info.base;\n    this.segment_limits[reg_ldtr] = info.effective_limit;\n    this.sreg[reg_ldtr] = selector;\n\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\n};\n\nCPU.prototype.arpl = function(seg, r16)\n{\n    this.flags_changed &= ~flag_zero;\n\n    if((seg & 3) < (this.reg16[r16] & 3))\n    {\n        this.flags |= flag_zero;\n        return seg & ~3 | this.reg16[r16] & 3;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return seg;\n    }\n};\n\nCPU.prototype.lar = function(selector, original)\n{\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.raw1 & 0x00FFFF00;\n    }\n};\n\nCPU.prototype.lsl = function(selector, original)\n{\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.effective_limit | 0;\n    }\n\n};\n\nCPU.prototype.verr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\n    {\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.verw = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\n       info.dpl < this.cpl || info.dpl < info.rpl)\n    {\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verw valid\", LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.clear_tlb = function()\n{\n    // clear tlb excluding global pages\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.tlb_info.set(this.tlb_info_global);\n\n    //dbg_log(\"page table loaded\", LOG_CPU);\n};\n\nCPU.prototype.full_clear_tlb = function()\n{\n    //dbg_log(\"TLB full clear\", LOG_CPU);\n\n    // clear tlb including global pages\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\n    for(var i = 0; i < (1 << 18); )\n    {\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\n    }\n\n    this.clear_tlb();\n};\n\nCPU.prototype.invlpg = function(addr)\n{\n    var page = addr >>> 12;\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\n\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.translate_address_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_read(addr);\n    }\n    else\n    {\n        return this.translate_address_system_read(addr);\n    }\n};\n\nCPU.prototype.translate_address_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_write(addr);\n    }\n    else\n    {\n        return this.translate_address_system_write(addr);\n    }\n};\n\nCPU.prototype.translate_address_user_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_user_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\n    }\n};\n\n/**\n * @return {number}\n */\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\n{\n    var page = addr >>> 12,\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\n        page_dir_entry = this.mem32s[page_dir_addr],\n        high,\n        can_write = true,\n        global,\n        cachable = true,\n        allow_user = true;\n\n    dbg_assert(addr < 0x80000000);\n\n    if(!(page_dir_entry & 1))\n    {\n        // to do at this place:\n        //\n        // - set cr2 = addr (which caused the page fault)\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\n        // - prevent execution of the function that triggered this call\n        //dbg_log(\"#PF not present\", LOG_CPU);\n\n        this.cr[2] = addr;\n        this.trigger_pagefault(for_writing, user, 0);\n\n        // never reached as this.trigger_pagefault throws up\n        dbg_assert(false);\n    }\n\n    if((page_dir_entry & 2) === 0)\n    {\n        can_write = false;\n\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\n        {\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if((page_dir_entry & 4) === 0)\n    {\n        allow_user = false;\n\n        if(user)\n        {\n            // \"Page Fault: page table accessed by non-supervisor\";\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if(page_dir_entry & this.page_size_extensions)\n    {\n        // size bit is set\n\n        // set the accessed and dirty bits\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\n\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\n        global = page_dir_entry & 0x100;\n    }\n    else\n    {\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\n            page_table_entry = this.mem32s[page_table_addr];\n\n        if((page_table_entry & 1) === 0)\n        {\n            //dbg_log(\"#PF not present table\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 0);\n            dbg_assert(false);\n        }\n\n        if((page_table_entry & 2) === 0)\n        {\n            can_write = false;\n\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\n            {\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        if((page_table_entry & 4) === 0)\n        {\n            allow_user = false;\n\n            if(user)\n            {\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        // set the accessed and dirty bits\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\n\n        high = page_table_entry & 0xFFFFF000;\n        global = page_table_entry & 0x100;\n    }\n\n    this.tlb_data[page] = high ^ page << 12;\n\n    var allowed_flag;\n\n    if(allow_user)\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\n        }\n        else\n        {\n            // TODO: Consider if cr0.wp is not set\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\n        }\n    }\n    else\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\n        }\n        else\n        {\n            allowed_flag = TLB_SYSTEM_READ;\n        }\n    }\n\n    this.tlb_info[page] = allowed_flag;\n\n    if(global && (this.cr[4] & CR4_PGE))\n    {\n        this.tlb_info_global[page] = allowed_flag;\n    }\n\n    return high;\n};\n\nCPU.prototype.writable_or_pagefault = function(addr, size)\n{\n    dbg_assert(size < 0x1000, \"not supported yet\");\n    dbg_assert(size > 0);\n\n    if(!this.paging)\n    {\n        return;\n    }\n\n    var user = this.cpl === 3 ? 1 : 0,\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\n        page = addr >>> 12;\n\n    if((this.tlb_info[page] & mask) === 0)\n    {\n        this.do_page_translation(addr, 1, user);\n    }\n\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\n    {\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\n        {\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\n        }\n    }\n};\n\nCPU.prototype.trigger_pagefault = function(write, user, present)\n{\n    if(LOG_PAGE_FAULTS)\n    {\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\n        dbg_trace(LOG_CPU);\n    }\n\n    if(this.page_fault)\n    {\n        dbg_trace(LOG_CPU);\n        throw this.debug.unimpl(\"Double fault\");\n    }\n\n    // invalidate tlb entry\n    var page = this.cr[2] >>> 12;\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.instruction_pointer = this.previous_ip;\n    this.page_fault = true;\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.is_osize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\n};\n\nCPU.prototype.is_asize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\n};\n\nCPU.prototype.get_reg_asize = function(reg)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    var r = this.reg32s[reg];\n\n    if(this.is_asize_32())\n    {\n        return r;\n    }\n    else\n    {\n        return r & 0xFFFF;\n    }\n};\n\nCPU.prototype.set_ecx_asize = function(value)\n{\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg_ecx] = value;\n    }\n    else\n    {\n        this.reg16[reg_cx] = value;\n    }\n};\n\nCPU.prototype.add_reg_asize = function(reg, value)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg] += value;\n    }\n    else\n    {\n        this.reg16[reg << 1] += value;\n    }\n};\n\nCPU.prototype.decr_ecx_asize = function()\n{\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\n};\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"CPU\"] = CPU;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"CPU\"] = CPU;\n}\nelse if(typeof importScripts === \"function\")\n{\n    self[\"CPU\"] = CPU;\n}\n","\"use strict\";\n/*\n * Compile time configuration, some only relevant for debug mode\n */\n\n/**\n * @define {boolean}\n * Overridden for production by closure compiler\n */\nvar DEBUG = true;\n\n/** @const */\nvar LOG_TO_FILE = false;\n\n/**\n * @const\n * Enables logging all IO port reads and writes. Very verbose\n */\nvar LOG_ALL_IO = false;\n\n/**\n * @const\n * Enables logging of page faults, quite verbose\n */\nvar LOG_PAGE_FAULTS = false;\n\n\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\n\n/**\n * @const\n * Draws entire buffer and visualizes the layers that would be drawn\n */\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\n\n\n/** @const */\nvar ENABLE_HPET = DEBUG && false;\n\n/**\n * @define {boolean}\n * Overridden by closure compiler\n */\nvar ENABLE_ACPI = false;\n\n\n/**\n * @const\n * How many cycles the CPU does at a time before running hardware timers\n */\nvar LOOP_COUNTER = 11001;\n\n/**\n * @const\n * How often, in milliseconds, to yield to the browser for rendering and\n * running events\n */\nvar TIME_PER_FRAME = 1;\n\n/**\n * @const\n * How many ticks the TSC does per millisecond\n */\nvar TSC_RATE = 8 * 1024;\n\n\n/** @const */\nvar APIC_TIMER_FREQ = TSC_RATE;\n\n\n/** @const */\nvar VMWARE_HYPERVISOR_PORT = true;\n","\"use strict\";\n\nvar v86util = v86util || {};\n\n// pad string with spaces on the right\nv86util.pads = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = str + \" \";\n    }\n\n    return str;\n};\n\n// pad string with zeros on the left\nv86util.pad0 = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = \"0\" + str;\n    }\n\n    return str;\n};\n\n/**\n * number to hex\n * @param {number} n\n * @param {number=} len\n * @return {string}\n */\nfunction h(n, len)\n{\n    if(!n)\n    {\n        var str = \"\";\n    }\n    else\n    {\n        var str = n.toString(16);\n    }\n\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\n}\n\n\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\n{\n    let rand_data = new Int32Array(1);\n\n    v86util.has_rand_int = function()\n    {\n        return true;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        window.crypto.getRandomValues(rand_data);\n        return rand_data[0];\n    };\n}\nelse\n{\n    v86util.has_rand_int = function()\n    {\n        return false;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        console.assert(false);\n    };\n}\n\n\n/**\n * Synchronous access to ArrayBuffer\n * @constructor\n */\nfunction SyncBuffer(buffer)\n{\n    this.buffer = buffer;\n    this.byteLength = buffer.byteLength;\n    this.onload = undefined;\n    this.onprogress = undefined;\n}\n\nSyncBuffer.prototype.load = function()\n{\n    this.onload && this.onload({ buffer: this.buffer });\n};\n\n/**\n * @param {number} start\n * @param {number} len\n * @param {function(!Uint8Array)} fn\n */\nSyncBuffer.prototype.get = function(start, len, fn)\n{\n    dbg_assert(start + len <= this.byteLength);\n    fn(new Uint8Array(this.buffer, start, len));\n};\n\n/**\n * @param {number} start\n * @param {!Uint8Array} slice\n * @param {function()} fn\n */\nSyncBuffer.prototype.set = function(start, slice, fn)\n{\n    dbg_assert(start + slice.byteLength <= this.byteLength);\n\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\n    fn();\n};\n\n/**\n * @param {function(!ArrayBuffer)} fn\n */\nSyncBuffer.prototype.get_buffer = function(fn)\n{\n    fn(this.buffer);\n};\n\n\n\n(function()\n{\n    var int_log2_table = new Int8Array(256);\n\n    for(var i = 0, b = -2; i < 256; i++)\n    {\n        if(!(i & i - 1))\n            b++;\n\n        int_log2_table[i] = b;\n    }\n\n    /**\n     * calculate the integer logarithm base 2 of a byte\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2_byte = function(x)\n    {\n        dbg_assert(x > 0);\n        dbg_assert(x < 0x100);\n\n        return int_log2_table[x];\n    };\n\n    /**\n     * calculate the integer logarithm base 2\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2 = function(x)\n    {\n        dbg_assert(x > 0);\n\n        // http://jsperf.com/integer-log2/6\n        var tt = x >>> 16;\n\n        if(tt)\n        {\n            var t = tt >>> 8;\n            if(t)\n            {\n                return 24 + int_log2_table[t];\n            }\n            else\n            {\n                return 16 + int_log2_table[tt];\n            }\n        }\n        else\n        {\n            var t = x >>> 8;\n            if(t)\n            {\n                return 8 + int_log2_table[t];\n            }\n            else\n            {\n                return int_log2_table[x];\n            }\n        }\n    };\n})();\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Uint8Array\n * Used by devices such as the PS2 controller\n */\nfunction ByteQueue(size)\n{\n    var data = new Uint8Array(size),\n        start,\n        end;\n\n    dbg_assert((size & size - 1) === 0);\n\n    this.length = 0;\n\n    this.push = function(item)\n    {\n        if(this.length === size)\n        {\n            // intentional overwrite\n        }\n        else\n        {\n            this.length++;\n        }\n\n        data[end] = item;\n        end = end + 1 & size - 1;\n    };\n\n    this.shift = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            var item = data[start];\n\n            start = start + 1 & size - 1;\n            this.length--;\n\n            return item;\n        }\n    };\n\n    this.peek = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            return data[start];\n        }\n    };\n\n    this.clear = function()\n    {\n        start = 0;\n        end = 0;\n        this.length = 0;\n    };\n\n    this.clear();\n}\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Float32Array\n * Used by devices such as the sound blaster sound card\n */\nfunction FloatQueue(size)\n{\n    this.size = size;\n    this.data = new Float32Array(size);\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n\n    dbg_assert((size & size - 1) === 0);\n}\n\nFloatQueue.prototype.push = function(item)\n{\n    if(this.length === this.size)\n    {\n        // intentional overwrite\n        this.start = this.start + 1 & this.size - 1;\n    }\n    else\n    {\n        this.length++;\n    }\n\n    this.data[this.end] = item;\n    this.end = this.end + 1 & this.size - 1;\n};\n\nFloatQueue.prototype.shift = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        var item = this.data[this.start];\n\n        this.start = this.start + 1 & this.size - 1;\n        this.length--;\n\n        return item;\n    }\n};\n\nFloatQueue.prototype.shift_block = function(count)\n{\n    var slice = new Float32Array(count);\n\n    if(count > this.length)\n    {\n        count = this.length;\n    }\n    var slice_end = this.start + count;\n\n    var partial = this.data.subarray(this.start, slice_end);\n\n    slice.set(partial);\n    if(slice_end >= this.size)\n    {\n        slice_end -= this.size;\n        slice.set(this.data.subarray(0, slice_end), partial.length);\n    }\n    this.start = slice_end;\n\n    this.length -= count;\n\n    return slice;\n};\n\nFloatQueue.prototype.peek = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.data[this.start];\n    }\n};\n\nFloatQueue.prototype.clear = function()\n{\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n};\n\n\n/**\n * Simple circular queue for logs\n *\n * @param {number} size\n * @constructor\n */\nfunction CircularQueue(size)\n{\n    this.data = [];\n    this.index = 0;\n    this.size = size;\n}\n\nCircularQueue.prototype.add = function(item)\n{\n    this.data[this.index] = item;\n    this.index = (this.index + 1) % this.size;\n};\n\nCircularQueue.prototype.toArray = function()\n{\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\n};\n\nCircularQueue.prototype.clear = function()\n{\n    this.data = [];\n    this.index = 0;\n};\n\n/**\n * @param {Array} new_data\n */\nCircularQueue.prototype.set = function(new_data)\n{\n    this.data = new_data;\n    this.index = 0;\n};\n","\"use strict\";\n\n// Useful documentation, articles, and source codes for reference:\n// ===============================================================\n//\n// Official Hardware Programming Guide\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n//\n// Official Yamaha YMF262 Manual\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\n//\n// OPL3 Programming Guide\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\n//\n// DOSBox\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\n//\n// QEMU\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\n//\n// VirtualBox\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\n\nvar\n\n    // Used for drivers to identify device (DSP command 0xE3).\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\n\n    // Value of the current DSP command that indicates that the\n    // next command/data write in port 2xC should be interpreted\n    // as a command number.\n/** @const */ DSP_NO_COMMAND = 0,\n\n    // Size (bytes) of the DSP write/read buffers\n/** @const */ DSP_BUFSIZE = 64,\n\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\n/** @const */ DSP_DACSIZE = 65536,\n\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\n    // stored before being processed.\n/** @const */ SB_DMA_BUFSIZE = 65536,\n\n    // Number of samples to attempt to retrieve per transfer.\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\n\n    // Usable DMA channels.\n/** @const */ SB_DMA0 = 0,\n/** @const */ SB_DMA1 = 1,\n/** @const */ SB_DMA3 = 3,\n/** @const */ SB_DMA5 = 5,\n/** @const */ SB_DMA6 = 6,\n/** @const */ SB_DMA7 = 7,\n\n    // Default DMA channels.\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\n\n    // Usable IRQ channels.\n/** @const */ SB_IRQ2 = 2,\n/** @const */ SB_IRQ5 = 5,\n/** @const */ SB_IRQ7 = 7,\n/** @const */ SB_IRQ10 = 10,\n\n    // Default IRQ channel.\n/** @const */ SB_IRQ = SB_IRQ5,\n\n    // Indices to the irq_triggered register.\n/** @const */ SB_IRQ_8BIT = 0x1,\n/** @const */ SB_IRQ_16BIT = 0x2,\n/** @const */ SB_IRQ_MIDI = 0x1,\n/** @const */ SB_IRQ_MPU = 0x4;\n\n\n// Probably less efficient, but it's more maintainable, instead\n// of having a single large unorganised and decoupled table.\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\nvar DSP_COMMAND_HANDLERS = [];\nvar MIXER_READ_HANDLERS = [];\nvar MIXER_WRITE_HANDLERS = [];\nvar FM_HANDLERS = [];\n\n\n/**\n * Sound Blaster 16 Emulator, or so it seems.\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction SB16(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cpu_paused = false;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    // I/O Buffers.\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer_lastvalue = 0;\n\n    // Current DSP command info.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    // Mixer.\n    this.mixer_current_address = 0;\n    this.mixer_unhandled_registers = new Uint8Array(256);\n\n    // Dummy status and test registers.\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    // DSP state.\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    // DAC buffer.\n    // The final destination for audio data before being sent off\n    // to Web Audio APIs.\n    // Format:\n    // Floating precision linear PCM, nominal between -1 and 1.\n    this.dac_buffers = [\n      new FloatQueue(DSP_DACSIZE),\n      new FloatQueue(DSP_DACSIZE),\n    ];\n\n    // Number of repeated samples needed to approximate the\n    // emulated sample rate. TODO: This can be improved by\n    // doing some sort of sample rate conversion, or detuning,\n    // as it currently changes the pitch of every audio (slightly sharper).\n    this.dac_rate_ratio = 2;\n\n    // Number of samples requested on each audio-process.\n    this.dac_process_samples = SB_DMA_BLOCK_SAMPLES;\n\n    // Direct Memory Access transfer info.\n    this.dma = cpu.devices.dma;\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\n    this.dma_autoinit = false;\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    // DMA identification data.\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    // ASP data: not understood by me.\n    this.asp_registers = new Uint8Array(256);\n\n    // MPU.\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.mpu_read_buffer_lastvalue = 0;\n\n    // FM Synthesizer.\n    this.fm_current_address0 = 0;\n    this.fm_current_address1 = 0;\n    this.fm_waveform_select_enable = false;\n\n    // Interrupts.\n    this.irq = SB_IRQ;\n    this.irq_triggered = new Uint8Array(0x10);\n\n    // Sample rate of the receiving end, i.e. the Web Audio Context.\n    this.audio_samplerate = 48000;\n\n    // IO Ports.\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n\n    cpu.io.register_read(0x220, this, this.port2x0_read);\n    cpu.io.register_read(0x221, this, this.port2x1_read);\n    cpu.io.register_read(0x222, this, this.port2x2_read);\n    cpu.io.register_read(0x223, this, this.port2x3_read);\n    cpu.io.register_read(0x224, this, this.port2x4_read);\n    cpu.io.register_read(0x225, this, this.port2x5_read);\n    cpu.io.register_read(0x226, this, this.port2x6_read);\n    cpu.io.register_read(0x227, this, this.port2x7_read);\n    cpu.io.register_read(0x228, this, this.port2x8_read);\n    cpu.io.register_read(0x229, this, this.port2x9_read);\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\n    cpu.io.register_read(0x22E, this, this.port2xE_read);\n    cpu.io.register_read(0x22F, this, this.port2xF_read);\n\n    cpu.io.register_write(0x220, this, this.port2x0_write);\n    cpu.io.register_write(0x221, this, this.port2x1_write);\n    cpu.io.register_write(0x222, this, this.port2x2_write);\n    cpu.io.register_write(0x223, this, this.port2x3_write);\n    cpu.io.register_write(0x224, this, this.port2x4_write);\n    cpu.io.register_write(0x225, this, this.port2x5_write);\n    cpu.io.register_write(0x226, this, this.port2x6_write);\n    cpu.io.register_write(0x227, this, this.port2x7_write);\n    cpu.io.register_write(0x228, this, this.port2x8_write);\n    cpu.io.register_write(0x229, this, this.port2x9_write);\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\n\n    cpu.io.register_read(0x330, this, this.port3x0_read);\n    cpu.io.register_read(0x331, this, this.port3x1_read);\n    cpu.io.register_write(0x330, this, this.port3x0_write);\n    cpu.io.register_write(0x331, this, this.port3x1_write);\n\n    this.dma.on_unmask(this.dma_on_unmask, this);\n\n    bus.register(\"speaker-tell-samplerate\", function(rate)\n    {\n        this.audio_samplerate = rate;\n    }, this);\n\n    bus.send(\"speaker-request-samplerate\");\n\n    bus.register(\"speaker-request-data\", function(size)\n    {\n        this.audio_send(size);\n    }, this);\n\n    bus.register(\"cpu-stop\", function()\n    {\n        this.cpu_paused = true;\n        bus.send(\"speaker-update-enable\", false);\n    }, this);\n\n    bus.register(\"cpu-run\", function()\n    {\n        this.cpu_paused = false;\n        bus.send(\"speaker-update-enable\", !this.dma_paused);\n    }, this);\n\n    this.reset_dsp();\n}\n\n//\n// General\n//\n\nSB16.prototype.reset_dsp = function()\n{\n    this.write_buffer.clear();\n    this.read_buffer.clear();\n\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    this.dac_buffers[0].clear();\n    this.dac_buffers[1].clear();\n    this.dac_rate_ratio = 2;\n\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_autoinit = false;\n    this.dma_buffer_uint8.fill(0);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    this.lower_irq(SB_IRQ_8BIT);\n    this.irq_triggered.fill(0);\n\n    this.asp_registers.fill(0);\n    this.asp_registers[5] = 0x01;\n    this.asp_registers[9] = 0xF8;\n};\n\nSB16.prototype.get_state = function()\n{\n    var state = [];\n\n    // state[0] = this.write_buffer;\n    // state[1] = this.read_buffer;\n    state[2] = this.read_buffer_lastvalue;\n\n    state[3] = this.command;\n    state[4] = this.command_size;\n\n    state[5] = this.mixer_current_address;\n    state[6] = this.mixer_unhandled_registers;\n\n    state[7] = this.dummy_speaker_enabled;\n    state[8] = this.test_register;\n\n    state[9] = this.dsp_highspeed;\n    state[10] = this.dsp_stereo;\n    state[11] = this.dsp_16bit;\n    state[12] = this.dsp_signed;\n\n    // state[13] = this.dac_buffers;\n    state[14] = this.dac_rate_ratio;\n\n    state[15] = this.dma_sample_count;\n    state[16] = this.dma_bytes_count;\n    state[17] = this.dma_bytes_left;\n    state[18] = this.dma_bytes_block;\n    state[19] = this.dma_irq;\n    state[20] = this.dma_channel;\n    state[21] = this.dma_channel_8bit;\n    state[22] = this.dma_channel_16bit;\n    state[23] = this.dma_autoinit;\n    state[24] = this.dma_buffer_uint8;\n    state[25] = this.dma_waiting_transfer;\n    state[26] = this.dma_paused;\n    state[27] = this.sampling_rate;\n    state[28] = this.bytes_per_sample;\n\n    state[29] = this.e2_value;\n    state[30] = this.e2_count;\n\n    state[31] = this.asp_registers;\n\n    // state[32] = this.mpu_read_buffer;\n    state[33] = this.mpu_read_buffer_last_value;\n\n    state[34] = this.irq;\n    state[35] = this.irq_triggered;\n    state[36] = this.audio_samplerate;\n\n    return state;\n};\n\nSB16.prototype.set_state = function(state)\n{\n    // this.write_buffer = state[0];\n    // this.read_buffer = state[1];\n    this.read_buffer_lastvalue = state[2];\n\n    this.command = state[3];\n    this.command_size = state[4];\n\n    this.mixer_current_address = state[5];\n    this.mixer_unhandled_registers = state[6];\n\n    this.dummy_speaker_enabled = state[7];\n    this.test_register = state[8];\n\n    this.dsp_highspeed = state[9];\n    this.dsp_stereo = state[10];\n    this.dsp_16bit = state[11];\n    this.dsp_signed = state[12];\n\n    // this.dac_buffers = state[13];\n    this.dac_rate_ratio = state[14];\n\n    this.dma_sample_count = state[15];\n    this.dma_bytes_count = state[16];\n    this.dma_bytes_left = state[17];\n    this.dma_bytes_block = state[18];\n    this.dma_irq = state[19];\n    this.dma_channel = state[20];\n    this.dma_channel_8bit = state[21];\n    this.dma_channel_16bit = state[22];\n    this.dma_autoinit = state[23];\n    this.dma_buffer_uint8 = state[24];\n    this.dma_waiting_transfer = state[25];\n    this.dma_paused = state[26];\n    this.sampling_rate = state[27];\n    this.bytes_per_sample = state[28];\n\n    this.e2_value = state[29];\n    this.e2_count = state[30];\n\n    this.asp_registers = state[31];\n\n    // this.mpu_read_buffer = state[32];\n    this.mpu_read_buffer_last_value = state[33];\n\n    this.irq = state[34];\n    this.irq_triggered = state[35];\n    this.audio_samplerate = state[36];\n\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n\n    this.bus.send(\"speaker-update-enable\", !this.dma_paused);\n};\n\n//\n// I/O handlers\n//\n\nSB16.prototype.port2x0_read = function()\n{\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x1_read = function()\n{\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x2_read = function()\n{\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x3_read = function()\n{\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_read = function()\n{\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\n    return this.mixer_current_address;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_read = function()\n{\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\n    var handler = MIXER_READ_HANDLERS[this.mixer_current_address];\n    if(!handler)\n    {\n        handler = this.mixer_default_read;\n    }\n    return handler.call(this);\n};\n\nSB16.prototype.port2x6_read = function()\n{\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x7_read = function()\n{\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x8_read = function()\n{\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x9_read = function()\n{\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read Data.\n// Used to acces in-bound DSP data.\nSB16.prototype.port2xA_read = function()\n{\n    dbg_log(\"22A read: read data\", LOG_SB16);\n    if(this.read_buffer.length)\n    {\n        this.read_buffer_lastvalue = this.read_buffer.shift();\n    }\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\n    return this.read_buffer_lastvalue;\n};\n\nSB16.prototype.port2xB_read = function()\n{\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Write-Buffer Status.\n// Indicates whether the DSP is ready to accept commands or data.\nSB16.prototype.port2xC_read = function()\n{\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\n    // Always return ready (bit-7 set to low)\n    return 0x7F;\n};\n\nSB16.prototype.port2xD_read = function()\n{\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read-Buffer Status.\n// Indicates whether there is any in-bound data available for reading.\n// Also used to acknowledge DSP 8-bit interrupt.\nSB16.prototype.port2xE_read = function()\n{\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\n    if(this.irq_triggered[SB_IRQ_8BIT])\n    {\n        this.lower_irq(SB_IRQ_8BIT);\n    }\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\n    return (ready << 7) | 0x7F;\n};\n\n// DSP 16-bit interrupt acknowledgement.\nSB16.prototype.port2xF_read = function()\n{\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\n    this.lower_irq(SB_IRQ_16BIT);\n    return 0;\n};\n\n\n// FM Address Port - primary register.\nSB16.prototype.port2x0_write = function(value)\n{\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\n    this.fm_current_address0 = 0;\n};\n\n// FM Data Port - primary register.\nSB16.prototype.port2x1_write = function(value)\n{\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address0];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 0, this.fm_current_address0);\n};\n\n// FM Address Port - secondary register.\nSB16.prototype.port2x2_write = function(value)\n{\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\n    this.fm_current_address1 = 0;\n};\n\n// FM Data Port - secondary register.\nSB16.prototype.port2x3_write = function(value)\n{\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address1];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 1, this.fm_current_address1);\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_write = function(value)\n{\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\n    this.mixer_current_address = value;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_write = function(value)\n{\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\n    var handler = MIXER_WRITE_HANDLERS[this.mixer_current_address];\n    if(!handler)\n    {\n        handler = this.mixer_default_write;\n    }\n    handler.call(this, value);\n};\n\n// Reset.\n// Used to reset the DSP to its default state and to exit highspeed mode.\nSB16.prototype.port2x6_write = function(yesplease)\n{\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\n\n    if(this.dsp_highspeed)\n    {\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\n        this.dsp_highspeed = false;\n    }\n    else if(yesplease)\n    {\n        dbg_log(\" -> reset\", LOG_SB16);\n        this.reset_dsp();\n    }\n\n    // Signal completion.\n    this.read_buffer.clear();\n    this.read_buffer.push(0xAA);\n};\n\nSB16.prototype.port2x7_write = function(value)\n{\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2x8_write = function(value)\n{\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2x9_write = function(value)\n{\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2xA_write = function(value)\n{\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xB_write = function(value)\n{\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\n};\n\n// Write Command/Data.\n// Used to send commands or data to the DSP.\nSB16.prototype.port2xC_write = function(value)\n{\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\n\n    if(this.command === DSP_NO_COMMAND)\n    {\n        // New command.\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\n        this.command = value;\n        this.write_buffer.clear();\n        this.command_size = DSP_COMMAND_SIZES[value];\n    }\n    else\n    {\n        // More data for current command.\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\n        this.write_buffer.push(value);\n    }\n\n    // Perform command when we have all the needed data.\n    if(this.write_buffer.length >= this.command_size)\n    {\n        this.command_do();\n    }\n};\n\nSB16.prototype.port2xD_write = function(value)\n{\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2xE_write = function(value)\n{\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xF_write = function(value)\n{\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\n};\n\n\n// MPU UART Mode - Data Port\nSB16.prototype.port3x0_read = function()\n{\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\n\n    if(this.mpu_read_buffer.length)\n    {\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\n    }\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\n\n    return this.mpu_read_buffer_lastvalue;\n};\nSB16.prototype.port3x0_write = function(value)\n{\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\n};\n\n// MPU UART Mode - Status Port\nSB16.prototype.port3x1_read = function()\n{\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\n\n    var status = 0;\n    status |= 0x40 * 0; // Output Ready\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\n\n    return status;\n};\n\n// MPU UART Mode - Command Port\nSB16.prototype.port3x1_write = function(value)\n{\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\n    if(value == 0xFF)\n    {\n        // Command acknowledge.\n        this.mpu_read_buffer.clear();\n        this.mpu_read_buffer.push(0xFE);\n    }\n};\n\n//\n// DSP command handlers\n//\n\nSB16.prototype.command_do = function()\n{\n    var handler = DSP_COMMAND_HANDLERS[this.command];\n    if(!handler)\n    {\n        handler = this.dsp_default_handler;\n    }\n    handler.call(this);\n\n    // Reset Inputs.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n    this.write_buffer.clear();\n};\n\nSB16.prototype.dsp_default_handler = function()\n{\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\n};\n\n/**\n * @param {Array} commands\n * @param {number} size\n * @param {function()=} handler\n */\nfunction register_dsp_command(commands, size, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.dsp_default_handler;\n    }\n    for(var i = 0; i < commands.length; i++)\n    {\n        DSP_COMMAND_SIZES[commands[i]] = size;\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\n    }\n}\n\nfunction any_first_digit(base)\n{\n    var commands = [];\n    for(var i = 0; i < 16; i++)\n    {\n        commands.push(base + i);\n    }\n    return commands;\n}\n\n// ASP set register\nregister_dsp_command([0x0E], 2, function()\n{\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\n});\n\n// ASP get register\nregister_dsp_command([0x0F], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\n});\n\n// 8-bit direct mode single byte digitized sound output.\nregister_dsp_command([0x10], 1, function()\n{\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\n\n    this.dac_buffers[0].push(value);\n    this.dac_buffers[1].push(value);\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// 8-bit single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x14, 0x15], 2, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = false;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output.\nregister_dsp_command([0x16], 2);\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\n// with reference byte.\nregister_dsp_command([0x17], 2);\n\n// 8-bit auto-init DMA mode digitized sound output.\nregister_dsp_command([0x1C], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x1F], 0);\n\n// 8-bit direct mode single byte digitized sound input.\nregister_dsp_command([0x20], 0, function()\n{\n    // Fake silent input.\n    this.read_buffer.clear();\n    this.read_buffer.push(0x7f);\n});\n\n// 8-bit single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x24], 2);\n\n// 8-bit auto-init DMA mode digitized sound input.\nregister_dsp_command([0x2C], 0);\n\n// Polling mode MIDI input.\nregister_dsp_command([0x30], 0);\n\n// Interrupt mode MIDI input.\nregister_dsp_command([0x31], 0);\n\n// UART polling mode MIDI I/O.\nregister_dsp_command([0x34], 0);\n\n// UART interrupt mode MIDI I/O.\nregister_dsp_command([0x35], 0);\n\n// UART polling mode MIDI I/O with time stamping.\nregister_dsp_command([0x36], 0);\n\n// UART interrupt mode MIDI I/O with time stamping.\nregister_dsp_command([0x37], 0);\n\n// MIDI output.\nregister_dsp_command([0x38], 0);\n\n// Set digitized sound transfer Time Constant.\nregister_dsp_command([0x40], 1, function()\n{\n    this.sampling_rate_change(\n        1000000\n        / (256 - this.write_buffer.shift())\n        / this.get_channel_count()\n    );\n});\n\n// Set digitized sound output sampling rate.\n// Set digitized sound input sampling rate.\nregister_dsp_command([0x41, 0x42], 2, function()\n{\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\n});\n\n// Set DSP block transfer size.\nregister_dsp_command([0x48], 2, function()\n{\n    // TODO: should be in bytes, but if this is only used\n    // for 8 bit transfers, then this number is the same\n    // as number of samples?\n    // Wrong: e.g. stereo requires two bytes per sample.\n    this.dma_transfer_size_set();\n});\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x74], 2);\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x75], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x76], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x77], 2);\n\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7D], 0);\n\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7F], 0);\n\n// Pause DAC for a duration.\nregister_dsp_command([0x80], 2);\n\n// 8-bit high-speed auto-init DMA mode digitized sound output.\nregister_dsp_command([0x90], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_highspeed = true;\n    this.dsp_16bit = false;\n    this.dma_transfer_start();\n});\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x91], 0);\n\n// 8-bit high-speed auto-init DMA mode digitized sound input.\nregister_dsp_command([0x98], 0);\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x99], 0);\n\n// Set input mode to mono.\nregister_dsp_command([0xA0], 0);\n\n// Set input mode to stereo.\nregister_dsp_command([0xA8], 0);\n\n// Program 16-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xB0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_16BIT;\n    this.dma_channel = this.dma_channel_16bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = true;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Program 8-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xC0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Pause 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD0], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"speaker-update-enable\", false);\n});\n\n// Turn on speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD1], 0, function()\n{\n    this.dummy_speaker_enabled = true;\n});\n\n// Turn off speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD3], 0, function()\n{\n    this.dummy_speaker_enabled = false;\n});\n\n// Continue 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD4], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// Pause 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD5], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"speaker-update-enable\", false);\n});\n\n// Continue 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD6], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n});\n\n// Get speaker status.\nregister_dsp_command([0xD8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\n});\n\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\n// Exit 8-bit auto-init mode digitized sound I/O.\nregister_dsp_command([0xD9, 0xDA], 0, function()\n{\n    this.dma_autoinit = false;\n});\n\n// DSP identification\nregister_dsp_command([0xE0], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(~this.write_buffer.shift());\n});\n\n// Get DSP version number.\nregister_dsp_command([0xE1], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(4);\n    this.read_buffer.push(5);\n});\n\n// DMA identification.\nregister_dsp_command([0xE2], 1);\n\n// Get DSP copyright.\nregister_dsp_command([0xE3], 0, function()\n{\n    this.read_buffer.clear();\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\n    {\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\n    }\n    // Null terminator.\n    this.read_buffer.push(0);\n});\n\n// Write test register.\nregister_dsp_command([0xE4], 1, function()\n{\n    this.test_register = this.write_buffer.shift();\n});\n\n// Read test register.\nregister_dsp_command([0xE8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.test_register);\n});\n\n// Trigger IRQ\nregister_dsp_command([0xF2, 0xF3], 0, function()\n{\n    this.raise_irq();\n});\n\n// ASP - unknown function\nvar SB_F9 = new Uint8Array(256);\nSB_F9[0x0E] = 0xFF;\nSB_F9[0x0F] = 0x07;\nSB_F9[0x37] = 0x38;\nregister_dsp_command([0xF9], 1, function()\n{\n    var input = this.write_buffer.shift();\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\n\n    this.read_buffer.clear();\n    this.read_buffer.push(SB_F9[input]);\n});\n\n//\n// Mixer Handlers\n//\n\nSB16.prototype.mixer_default_read = function()\n{\n    dbg_log(\"unhandled mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\n    return this.mixer_unhandled_registers[this.mixer_current_address];\n};\n\nSB16.prototype.mixer_default_write = function(data)\n{\n    dbg_log(\"unhandled mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\n    this.mixer_unhandled_registers[this.mixer_current_address] = data;\n};\n\n/**\n * @param{number} address\n * @param{function():number=} handler\n */\nfunction register_mixer_read(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_read;\n    }\n    MIXER_READ_HANDLERS[address] = handler;\n}\n\n/**\n * @param{number} address\n * @param{function(number)=} handler\n */\nfunction register_mixer_write(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_write;\n    }\n    MIXER_WRITE_HANDLERS[address] = handler;\n}\n\n// Reset.\nregister_mixer_read(0x00, function()\n{\n    return 0;\n});\nregister_mixer_write(0x00);\n\n// Output Stereo Select.\nregister_mixer_write(0x0E, function(bits)\n{\n    this.dsp_stereo = bits & 0x2;\n    this.bus.send(\"speaker-stereo\", this.dsp_stereo);\n    this.bus.send(\"speaker-filter\", bits & 0x20);\n});\n\n// IRQ Select.\nregister_mixer_read(0x80, function()\n{\n    switch(this.irq)\n    {\n        case SB_IRQ2: return 0x1;\n        case SB_IRQ5: return 0x2;\n        case SB_IRQ7: return 0x4;\n        case SB_IRQ10: return 0x8;\n        default: return 0x0;\n    }\n});\nregister_mixer_write(0x80, function(bits)\n{\n    if(bits & 0x1) this.irq = SB_IRQ2;\n    if(bits & 0x2) this.irq = SB_IRQ5;\n    if(bits & 0x4) this.irq = SB_IRQ7;\n    if(bits & 0x8) this.irq = SB_IRQ10;\n});\n\n// DMA Select.\nregister_mixer_read(0x81, function()\n{\n    var ret = 0;\n    switch(this.dma_channel_8bit)\n    {\n        case SB_DMA0: ret |= 0x1; break;\n        case SB_DMA1: ret |= 0x2; break;\n        // Channel 2 is hardwired to floppy disk.\n        case SB_DMA3: ret |= 0x8; break;\n    }\n    switch(this.dma_channel_16bit)\n    {\n        // Channel 4 cannot be used.\n        case SB_DMA5: ret |= 0x20; break;\n        case SB_DMA6: ret |= 0x40; break;\n        case SB_DMA7: ret |= 0x80; break;\n    }\n    return ret;\n});\nregister_mixer_write(0x81, function(bits)\n{\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\n});\n\n// IRQ Status.\nregister_mixer_read(0x82, function()\n{\n    var ret = 0x20;\n    for(var i = 0; i < 16; i++)\n    {\n        ret |= i * this.irq_triggered[i];\n    }\n    return ret;\n});\n\n//\n// FM Handlers\n//\n\nSB16.prototype.fm_default_write = function(data, register, address)\n{\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    // No need to save into a dummy register as the registers are write-only.\n};\n\n/**\n * @param{Array} addresses\n * @param{function(number, number, number)=} handler\n */\nfunction register_fm_write(addresses, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.fm_default_write;\n    }\n    for(var i = 0; i < addresses.length; i++)\n    {\n        FM_HANDLERS[addresses[i]] = handler;\n    }\n}\n\nfunction between(start, end)\n{\n    var a = [];\n    for(var i = start; i <= end; i++)\n    {\n        a.push(i);\n    }\n    return a;\n}\n\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\n\nfunction get_fm_operator(register, offset)\n{\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\n}\n\nregister_fm_write([0x01], function(bits, register, address)\n{\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\n    this.fm_update_waveforms();\n});\n\n// Timer 1 Count.\nregister_fm_write([0x02]);\n\n// Timer 2 Count.\nregister_fm_write([0x03]);\n\nregister_fm_write([0x04], function(bits, register, address)\n{\n    switch(register)\n    {\n        case 0:\n            // if(bits & 0x80)\n            // {\n            //     // IQR Reset\n            // }\n            // else\n            // {\n            //     // Timer masks and on/off\n            // }\n            break;\n        case 1:\n            // Four-operator enable\n            break;\n    }\n});\n\nregister_fm_write([0x05], function(bits, register, address)\n{\n    if(register === 0)\n    {\n        // No registers documented here.\n        this.fm_default_write(bits, register, address);\n        return;\n    }\n    // OPL3 Mode Enable\n});\n\nregister_fm_write([0x08], function(bits, register, address)\n{\n    // Composite sine wave on/off\n    // Note select (keyboard split selection method)\n});\n\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x20);\n    // Tremolo\n    // Vibrato\n    // Sustain\n    // KSR Envelope Scaling\n    // Frequency Multiplication Factor\n});\n\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x40);\n    // Key Scale Level\n    // Output Level\n});\n\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x60);\n    // Attack Rate\n    // Decay Rate\n});\n\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x80);\n    // Sustain Level\n    // Release Rate\n});\n\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\n{\n    var channel = address - 0xA0;\n    // Frequency Number (Lower 8 bits)\n});\n\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\n{\n    // Key-On\n    // Block Number\n    // Frequency Number (Higher 2 bits)\n});\n\nregister_fm_write([0xBD], function(bits, register, address)\n{\n    // Tremelo Depth\n    // Vibrato Depth\n    // Percussion Mode\n    // Bass Drum Key-On\n    // Snare Drum Key-On\n    // Tom-Tom Key-On\n    // Cymbal Key-On\n    // Hi-Hat Key-On\n});\n\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\n{\n    // Right Speaker Enable\n    // Left Speaker Enable\n    // Feedback Modulation Factor\n    // Synthesis Type\n});\n\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0xE0);\n    // Waveform Select\n});\n\n//\n// FM behaviours\n//\n\nSB16.prototype.fm_update_waveforms = function()\n{\n    // To be implemented.\n}\n\n//\n// General behaviours\n//\n\nSB16.prototype.sampling_rate_change = function(rate)\n{\n    this.sampling_rate = rate;\n};\n\nSB16.prototype.get_channel_count = function()\n{\n    return this.dsp_stereo ? 2 : 1;\n};\n\nSB16.prototype.dma_transfer_size_set = function()\n{\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\n};\n\nSB16.prototype.dma_transfer_start = function()\n{\n    dbg_log(\"begin dma transfer\", LOG_SB16);\n\n    // (1) Setup appropriate settings.\n\n    this.bytes_per_sample = 1;\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\n\n    // Don't count stereo interleaved bits apparently.\n    // Disabling this line is needed for sounds to work correctly,\n    // especially double buffering autoinit mode.\n    // Learnt the hard way.\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\n\n    this.dac_rate_ratio = Math.round(this.audio_samplerate / this.sampling_rate);\n\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\n\n    // (2) Wait for unmask event.\n    this.dma_waiting_transfer = true;\n};\n\nSB16.prototype.dma_on_unmask = function(channel)\n{\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\n    {\n        return;\n    }\n\n    // (3) Configure amount of bytes left to transfer and begin first\n    // block of transfer when the DMA channel has been unmasked.\n    this.dma_waiting_transfer = false;\n    this.dma_bytes_left = this.dma_bytes_count;\n    this.dma_paused = false;\n    this.bus.send(\"speaker-update-enable\", true);\n    this.dma_transfer_next();\n};\n\nSB16.prototype.dma_transfer_next = function()\n{\n    // No more data to transfer.\n    if(!this.dma_bytes_left) return;\n\n    // DAC has enough samples buffered for now.\n    // Don't transfer too much too early, or else the DMA counters will not\n    // accurately reflect the amount of audio that has already been\n    // played back by the Web Audio API.\n    if(this.dac_buffers[0].length > this.dac_process_samples * 2) return;\n\n    // Do not transfer if paused.\n    if(this.cpu_paused || this.dma_paused) return;\n\n    dbg_log(\"dma transfering next block\", LOG_SB16);\n\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\n    var samples = Math.floor(size / this.bytes_per_sample);\n\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\n    {\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\n        if(error) return;\n\n        this.dma_to_dac(samples);\n        this.dma_bytes_left -= size;\n\n        if(!this.dma_bytes_left)\n        {\n            // Completed requested transfer of given size.\n            this.raise_irq(this.dma_irq);\n\n            if(this.dma_autoinit)\n            {\n                // Restart the transfer.\n                this.dma_bytes_left = this.dma_bytes_count;\n            }\n        }\n\n        // Keep transfering until dac_buffer contains enough data.\n        setTimeout(() => { this.dma_transfer_next(); }, 0);\n    });\n};\n\nSB16.prototype.dma_to_dac = function(sample_count)\n{\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\n    var offset = this.dsp_signed ? 0 : -1;\n    var repeats = (this.dsp_stereo ? 1 : 2) * this.dac_rate_ratio;\n\n    var buffer;\n    if(this.dsp_16bit)\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\n    }\n    else\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\n    }\n\n    var channel = 0;\n    for(var i = 0; i < sample_count; i++)\n    {\n        var sample = audio_normalize(buffer[i], amplitude, offset);\n        for(var j = 0; j < repeats; j++)\n        {\n            this.dac_buffers[channel].push(sample);\n            channel ^= 1;\n        }\n    }\n};\n\nSB16.prototype.audio_send = function(size)\n{\n    this.dac_process_samples = size;\n\n    if(this.dac_buffers[0].length && this.dac_buffers[0].length < this.dac_process_samples * 2)\n    {\n        dbg_log(\"dac_buffer contains only \" +\n            (this.dac_buffers[0].length / 2) +\n            \" samples out of \" + this.dac_process_samples + \" needed\", LOG_SB16);\n    }\n\n    var out0 = this.dac_buffers[0].shift_block(size);\n    var out1 = this.dac_buffers[1].shift_block(size);\n    this.bus.send(\"speaker-update-data\", [out0, out1], [out0.buffer, out1.buffer]);\n\n    setTimeout(() => { this.dma_transfer_next(); }, 0);\n};\n\nSB16.prototype.raise_irq = function(type)\n{\n    dbg_log(\"raise irq\", LOG_SB16);\n    this.irq_triggered[type] = 1;\n    this.cpu.device_raise_irq(this.irq);\n};\n\nSB16.prototype.lower_irq = function(type)\n{\n    dbg_log(\"lower irq\", LOG_SB16);\n    this.irq_triggered[type] = 0;\n    this.cpu.device_lower_irq(this.irq);\n};\n\n//\n// Helpers\n//\n\nfunction audio_normalize(value, amplitude, offset)\n{\n    return audio_clip(value / amplitude + offset, -1, 1);\n}\n\nfunction audio_clip(value, low, high)\n{\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\n}\n","\"use strict\";\n\n/** @const */\nvar FPU_LOG_OP = false;\n\nvar\n    /** @const */\n    FPU_C0 = 0x100,\n    /** @const */\n    FPU_C1 = 0x200,\n    /** @const */\n    FPU_C2 = 0x400,\n    /** @const */\n    FPU_C3 = 0x4000,\n    /** @const */\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\n    /** @const */\n    FPU_STACK_TOP = 0x3800;\n\nvar\n    // precision, round & infinity control\n    /** @const */\n    FPU_PC = 3 << 8,\n    /** @const */\n    FPU_RC = 3 << 10,\n    /** @const */\n    FPU_IF = 1 << 12;\n\n// exception bits in the status word\nvar\n    /** @const */\n    FPU_EX_SF = 1 << 6,\n    /** @const */\n    FPU_EX_P = 1 << 5,\n    /** @const */\n    FPU_EX_U = 1 << 4,\n    /** @const */\n    FPU_EX_O = 1 << 3,\n    /** @const */\n    FPU_EX_Z = 1 << 2,\n    /** @const */\n    FPU_EX_D = 1 << 1,\n    /** @const */\n    FPU_EX_I = 1 << 0;\n\nvar\n    /** @const */\n    TWO_POW_63 =  0x8000000000000000;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction FPU(cpu)\n{\n    // TODO:\n    // - Precision Control\n    // - QNaN, unordered comparison\n    // - Exceptions\n\n    this.cpu = cpu;\n\n    // Why no Float80Array :-(\n    this.st = new Float64Array(8);\n\n    // used for conversion\n    /** @const */ this.float32 = new Float32Array(1);\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\n    /** @const */ this.float64 = new Float64Array(1);\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\n\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\n\n\n    // bitmap of which stack registers are empty\n    this.stack_empty = 0xff;\n    this.stack_ptr = 0;\n\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_ip_selector = 0;\n    this.fpu_opcode = 0;\n    this.fpu_dp = 0;\n    this.fpu_dp_selector = 0;\n\n    /** @const */\n    this.indefinite_nan = NaN;\n\n    /** @const */\n    this.constants = new Float64Array([\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\n        Math.log(2) / Math.LN10, Math.LN2, 0\n    ]);\n\n}\n\nFPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.st;\n    state[1] = this.stack_empty;\n    state[2] = this.stack_ptr;\n    state[3] = this.control_word;\n    state[4] = this.fpu_dp_selector;\n    state[5] = this.fpu_ip;\n    state[6] = this.fpu_ip_selector;\n    state[7] = this.fpu_dp;\n    state[8] = this.fpu_dp_selector;\n    state[9] = this.fpu_opcode;\n\n    return state;\n};\n\nFPU.prototype.set_state = function(state)\n{\n    this.st.set(state[0]);\n    this.stack_empty = state[1];\n    this.stack_ptr = state[2];\n    this.control_word = state[3];\n    this.fpu_dp_selector = state[4];\n    this.fpu_ip = state[5];\n    this.fpu_ip_selector = state[6];\n    this.fpu_dp = state[7];\n    this.fpu_dp_selector = state[8];\n    this.fpu_opcode = state[9];\n};\n\nFPU.prototype.fpu_unimpl = function()\n{\n    dbg_trace();\n    if(DEBUG) throw \"fpu: unimplemented\";\n    else this.cpu.trigger_ud();\n}\n\nFPU.prototype.stack_fault = function()\n{\n    // TODO: Interrupt\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\n}\n\nFPU.prototype.invalid_arithmatic = function()\n{\n    this.status_word |= FPU_EX_I;\n}\n\nFPU.prototype.fcom = function(y)\n{\n    var x = this.get_st0();\n\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === y)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else\n    {\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\n    }\n}\n\nFPU.prototype.fucom = function(y)\n{\n    // TODO\n    this.fcom(y);\n}\n\n\nFPU.prototype.fcomi = function(y)\n{\n    var x = this.st[this.stack_ptr];\n\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        this.cpu.flags |= flag_zero;\n    }\n    else\n    {\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\n    }\n}\n\nFPU.prototype.fucomi = function(y)\n{\n    // TODO\n    this.fcomi(y);\n}\n\nFPU.prototype.ftst = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(isNaN(x))\n    {\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x < 0)\n    {\n        this.status_word |= FPU_C0;\n    }\n\n    // TODO: unordered (x is nan, etc)\n}\n\nFPU.prototype.fxam = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n    this.status_word |= this.sign(0) << 9;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word |= FPU_C3 | FPU_C0;\n    }\n    else if(isNaN(x))\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x === Infinity || x === -Infinity)\n    {\n        this.status_word |= FPU_C2 | FPU_C0;\n    }\n    else\n    {\n        this.status_word |= FPU_C2;\n    }\n    // TODO:\n    // Unsupported, Denormal\n}\n\nFPU.prototype.finit = function()\n{\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_dp = 0;\n    this.fpu_opcode = 0;\n\n    this.stack_empty = 0xFF;\n    this.stack_ptr = 0;\n}\n\nFPU.prototype.load_status_word = function()\n{\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\n}\n\nFPU.prototype.set_status_word = function(sw)\n{\n    this.status_word = sw & ~(7 << 11);\n    this.stack_ptr = sw >> 11 & 7;\n}\n\nFPU.prototype.load_tag_word = function()\n{\n    var tag_word = 0,\n        value;\n\n    for(var i = 0; i < 8; i++)\n    {\n        value = this.st[i];\n\n        if(this.stack_empty >> i & 1)\n        {\n            tag_word |= 3 << (i << 1);\n        }\n        else if(value === 0)\n        {\n            tag_word |= 1 << (i << 1);\n        }\n        else if(!isFinite(value))\n        {\n            tag_word |= 2 << (i << 1);\n        }\n    }\n\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\n\n    return tag_word;\n}\n\nFPU.prototype.set_tag_word = function(tag_word)\n{\n    this.stack_empty = 0;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\n    }\n\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\n}\n\nFPU.prototype.fstenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.cpu.writable_or_pagefault(addr, 26);\n\n        this.cpu.safe_write16(addr, this.control_word);\n\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\n\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fldenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.control_word = this.cpu.safe_read16(addr);\n\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\n\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fsave = function(addr)\n{\n    this.cpu.writable_or_pagefault(addr, 108);\n\n    this.fstenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\n        addr += 10;\n    }\n\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n\n    this.finit();\n}\n\nFPU.prototype.frstor = function(addr)\n{\n    this.fldenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\n        addr += 10;\n    }\n\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n}\n\nFPU.prototype.fxtract = function()\n{\n    this.float64[0] = this.get_st0();\n\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\n\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\n    this.float64_byte[6] |= 0xF0;\n\n    this.st[this.stack_ptr] = exponent;\n    this.push(this.float64[0]);\n};\n\nFPU.prototype.integer_round = function(f)\n{\n    var rc = this.control_word >> 10 & 3;\n\n    if(rc === 0)\n    {\n        // Round to nearest, or even if equidistant\n        var rounded = Math.round(f);\n\n        if(rounded - f === 0.5 && (rounded % 2))\n        {\n            // Special case: Math.round rounds to positive infinity\n            // if equidistant\n            rounded--;\n        }\n\n        return rounded;\n    }\n        // rc=3 is truncate -> floor for positive numbers\n    else if(rc === 1 || (rc === 3 && f > 0))\n    {\n        return Math.floor(f);\n    }\n    else\n    {\n        return Math.ceil(f);\n    }\n}\n\nFPU.prototype.truncate = function(x)\n{\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nFPU.prototype.push = function(x)\n{\n    this.stack_ptr = this.stack_ptr - 1 & 7;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_empty &= ~(1 << this.stack_ptr);\n        this.st[this.stack_ptr] = x;\n    }\n    else\n    {\n        this.status_word |= FPU_C1;\n        this.stack_fault();\n        this.st[this.stack_ptr] = this.indefinite_nan;\n    }\n}\n\nFPU.prototype.pop = function()\n{\n    this.stack_empty |= 1 << this.stack_ptr;\n    this.stack_ptr = this.stack_ptr + 1 & 7;\n}\n\nFPU.prototype.get_sti = function(i)\n{\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\n\n    i = i + this.stack_ptr & 7;\n\n    if(this.stack_empty >> i & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[i];\n    }\n}\n\nFPU.prototype.get_st0 = function()\n{\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[this.stack_ptr];\n    }\n}\n\nFPU.prototype.load_m80 = function(addr)\n{\n    var exponent = this.cpu.safe_read16(addr + 8),\n        sign,\n        low = this.cpu.safe_read32s(addr) >>> 0,\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\n\n    sign = exponent >> 15;\n    exponent &= ~0x8000;\n\n    if(exponent === 0)\n    {\n        // TODO: denormal numbers\n        return 0;\n    }\n\n    if(exponent < 0x7FFF)\n    {\n        exponent -= 0x3FFF;\n    }\n    else\n    {\n        // TODO: NaN, Infinity\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\n        this.float64_byte[7] = 0x7F | sign << 7;\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\n\n        this.float64_byte[5] = 0;\n        this.float64_byte[4] = 0;\n\n        this.float64_int[0] = 0;\n\n        return this.float64[0];\n    }\n\n    // Note: some bits might be lost at this point\n    var mantissa = low + 0x100000000 * high;\n\n    if(sign)\n    {\n        mantissa = -mantissa;\n    }\n\n    //console.log(\"m: \" + mantissa);\n    //console.log(\"e: \" + exponent);\n    //console.log(\"s: \" + this.sign);\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\n\n    // Simply compute the 64 bit floating point number.\n    // An alternative write the mantissa, sign and exponent in the\n    // float64_byte and return float64[0]\n\n    return mantissa * Math.pow(2, exponent - 63);\n}\n\nFPU.prototype.store_m80 = function(addr, n)\n{\n    this.float64[0] = n;\n\n    var sign = this.float64_byte[7] & 0x80,\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\n        low,\n        high;\n\n    if(exponent === 0x7FF)\n    {\n        // all bits set (NaN and infinity)\n        exponent = 0x7FFF;\n        low = 0;\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\n    }\n    else if(exponent === 0)\n    {\n        // zero and denormal numbers\n        // Just assume zero for now\n        low = 0;\n        high = 0;\n    }\n    else\n    {\n        exponent += 0x3FFF - 0x3FF;\n\n        // does the mantissa need to be adjusted?\n        low = this.float64_int[0] << 11;\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\n    }\n\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\n\n    this.cpu.safe_write32(addr, low);\n    this.cpu.safe_write32(addr + 4, high);\n\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\n}\n\nFPU.prototype.load_m64 = function(addr)\n{\n    var low = this.cpu.safe_read32s(addr),\n        high = this.cpu.safe_read32s(addr + 4);\n\n    this.float64_int[0] = low;\n    this.float64_int[1] = high;\n\n    return this.float64[0];\n};\n\nFPU.prototype.store_m64 = function(addr, i)\n{\n    this.cpu.writable_or_pagefault(addr, 8);\n\n    this.float64[0] = this.get_sti(i);\n\n    this.cpu.safe_write32(addr, this.float64_int[0]);\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\n};\n\nFPU.prototype.load_m32 = function(addr)\n{\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\n\n    return this.float32[0];\n};\n\nFPU.prototype.store_m32 = function(addr, x)\n{\n    this.float32[0] = x;\n\n    this.cpu.safe_write32(addr, this.float32_int[0]);\n};\n\n// sign of a number on the stack\nFPU.prototype.sign = function(i)\n{\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\n};\n\n\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\n{\n    if(!FPU_LOG_OP)\n    {\n        return;\n    }\n\n    if(imm8 >= 0xC0)\n    {\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n    else\n    {\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n}\n\n\nFPU.prototype.fwait = function()\n{\n    // NOP unless FPU instructions run in parallel with CPU instructions\n};\n\n\nFPU.prototype.op_D8_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + sti;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * sti;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D8_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.load_m32(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var sti = this.get_sti(low);\n            this.push(sti);\n            break;\n        case 1:\n            // fxch\n            var sti = this.get_sti(low);\n\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            this.st[this.stack_ptr] = sti;\n            break;\n        case 2:\n            switch(low)\n            {\n                case 0:\n                    // fnop\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 3:\n            // fstp1\n            this.fpu_unimpl();\n            break;\n        case 4:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fchs\n                    this.st[this.stack_ptr] = -st0;\n                    break;\n                case 1:\n                    // fabs\n                    this.st[this.stack_ptr] = Math.abs(st0);\n                    break;\n                case 4:\n                    this.ftst(st0);\n                    break;\n                case 5:\n                    this.fxam(st0);\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.push(this.constants[low]);\n            break;\n        case 6:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // f2xm1\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\n                    break;\n                case 1:\n                    // fyl2x\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    // fptan\n                    this.st[this.stack_ptr] = Math.tan(st0);\n                    this.push(1); // no bug: push constant 1\n                    break;\n                case 3:\n                    // fpatan\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\n                    this.pop();\n                    break;\n                case 4:\n                    this.fxtract();\n                    break;\n                case 5:\n                    // fprem1\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\n                    break;\n                case 6:\n                    // fdecstp\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                case 7:\n                    // fincstp\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        case 7:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fprem\n                    var st1 = this.get_sti(1);\n                    var fprem_quotient = Math.trunc(st0 / st1);\n                    this.st[this.stack_ptr] = st0 % st1;\n\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\n                    if (fprem_quotient & 1) {\n                        this.status_word |= FPU_C1;\n                    }\n                    if (fprem_quotient & (1 << 1)) {\n                        this.status_word |= FPU_C3;\n                    }\n                    if (fprem_quotient & (1 << 2)) {\n                        this.status_word |= FPU_C0;\n                    }\n\n                    this.status_word &= ~FPU_C2;\n                    break;\n                case 1:\n                    // fyl2xp1: y * log2(x+1) and pop\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\n                    break;\n                case 3:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    this.push(Math.cos(st0));\n                    break;\n                case 4:\n                    // frndint\n                    this.st[this.stack_ptr] = this.integer_round(st0);\n                    break;\n                case 5:\n                    // fscale\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\n                    break;\n                case 6:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    break;\n                case 7:\n                    this.st[this.stack_ptr] = Math.cos(st0);\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m32(addr);\n            this.push(data);\n            break;\n        case 1:\n            // not defined\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m32(addr, this.get_st0());\n            break;\n        case 3:\n            // fstp\n            this.store_m32(addr, this.get_st0());\n            this.pop();\n            break;\n        case 4:\n            this.fldenv(addr);\n            break;\n        case 5:\n            // fldcw\n            var word = this.cpu.safe_read16(addr);\n            this.control_word = word;\n            break;\n        case 6:\n            this.fstenv(addr);\n            break;\n        case 7:\n            // fstcw\n            this.cpu.safe_write16(addr, this.control_word);\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DA_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovb\n            if(this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmove\n            if(this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovbe\n            if(this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovu\n            if(this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 5:\n            if(low === 1)\n            {\n                // fucompp\n                this.fucom(this.get_sti(1));\n                this.pop();\n                this.pop();\n            }\n            else\n            {\n                dbg_log(mod); this.fpu_unimpl();\n            }\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DA_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.cpu.safe_read32s(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DB_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovnb\n            if(!this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmovne\n            if(!this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovnbe\n            if(!this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovnu\n            if(!this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 4:\n            if(imm8 === 0xE3)\n            {\n                this.finit();\n            }\n            else if(imm8 === 0xE4)\n            {\n                // fsetpm\n                // treat as nop\n            }\n            else if(imm8 === 0xE1)\n            {\n                // fdisi\n                // also treat as nop\n            }\n            else if(imm8 === 0xE2)\n            {\n                // fclex\n                this.status_word = 0;\n            }\n            else\n            {\n                dbg_log(h(imm8));\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.fucomi(this.get_sti(low));\n            break;\n        case 6:\n            this.fcomi(this.get_sti(low));\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DB_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fild\n            var int32 = this.cpu.safe_read32s(addr);\n            this.push(int32);\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                // TODO: Invalid operation\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            this.pop();\n            break;\n        case 5:\n            // fld\n            this.push(this.load_m80(addr));\n            break;\n        case 7:\n            // fstp\n            this.cpu.writable_or_pagefault(addr, 10);\n            this.store_m80(addr, this.get_st0());\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DC_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmul\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsubr\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsub\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivr\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdiv\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DC_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var\n        mod = imm8 >> 3 & 7,\n        m64 = this.load_m64(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m64;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m64;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m64);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m64);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m64;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m64 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m64;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m64 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DD_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // ffree\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\n            break;\n        case 2:\n            // fst\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            break;\n        case 3:\n            // fstp\n            if(low === 0)\n            {\n                this.pop();\n            }\n            else\n            {\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\n                this.pop();\n            }\n            break;\n        case 4:\n            this.fucom(this.get_sti(low));\n            break;\n        case 5:\n            // fucomp\n            this.fucom(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DD_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m64(addr);\n            this.push(data);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m64(addr, 0);\n            break;\n        case 3:\n            // fstp\n            this.store_m64(addr, 0);\n            this.pop();\n            break;\n        case 4:\n            this.frstor(addr);\n            break;\n        case 5:\n            // nothing\n            this.fpu_unimpl();\n            break;\n        case 6:\n            // fsave\n            this.fsave(addr);\n            break;\n        case 7:\n            // fnstsw / store status word\n            this.cpu.safe_write16(addr, this.load_status_word());\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\n\nFPU.prototype.op_DE_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // faddp\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmulp\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcomp\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcompp\n            if(low === 1)\n            {\n                this.fcom(this.st[low_ptr]);\n                this.pop();\n            }\n            else\n            {\n                // not a valid encoding\n                dbg_log(mod);\n                this.fpu_unimpl();\n            }\n            break;\n        case 4:\n            // fsubrp\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubp\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivrp\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivp\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n\n    this.pop();\n};\n\nFPU.prototype.op_DE_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m16;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m16;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m16);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m16);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m16;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m16 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m16;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m16 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DF_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 4:\n            if(imm8 === 0xE0)\n            {\n                // fnstsw\n                this.cpu.reg16[reg_ax] = this.load_status_word();\n            }\n            else\n            {\n                dbg_log(imm8);\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            // fucomip\n            this.fucomi(this.get_sti(low));\n            this.pop();\n            break;\n        case 6:\n            // fcomip\n            this.fcomi(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DF_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n            this.push(m16);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            this.pop();\n            break;\n        case 4:\n            // fbld\n            this.fpu_unimpl();\n            break;\n        case 5:\n            // fild\n            var low = this.cpu.safe_read32s(addr) >>> 0,\n                high = this.cpu.safe_read32s(addr + 4);\n\n            var m64 = low + 0x100000000 * high;\n\n            this.push(m64);\n            break;\n        case 6:\n            // fbstp\n            this.fpu_unimpl();\n            break;\n        case 7:\n            this.cpu.writable_or_pagefault(addr, 8);\n\n            // fistp\n            var st0 = this.integer_round(this.get_st0()),\n                st0_low,\n                st0_high;\n\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\n            {\n                st0_low = st0 | 0;\n                st0_high = st0 / 0x100000000 | 0;\n\n                if(st0_high === 0 && st0 < 0)\n                    st0_high = -1;\n            }\n            else\n            {\n                // write 0x8000000000000000\n                st0_low  = 0;\n                st0_high = 0x80000000 | 0;\n                this.invalid_arithmatic();\n            }\n\n            this.cpu.safe_write32(addr, st0_low);\n            this.cpu.safe_write32(addr + 4, st0_high);\n\n            this.pop();\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n","\"use strict\";\n\n/** @param {number=} length */\nfunction hex_dump(buffer, length)\n{\n    var result = [];\n    length = length || buffer.byteLength;\n    var addr = 0;\n    var line, byt;\n\n    for(var i = 0; i < length >> 4; i++)\n    {\n        line = h(addr + (i << 4), 5) + \"   \";\n\n        for(var j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += h(byt, 2) + \" \";\n        }\n\n        line += \"  \";\n\n        for(j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n        }\n\n        result.push(line);\n    }\n\n    return \"\\n\" + result.join(\"\\n\");\n}\n\n/** @const */\nvar CDROM_SECTOR_SIZE = 2048;\n/** @const */\nvar HD_SECTOR_SIZE = 512;\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {boolean} is_cd\n * @param {number} nr\n * @param {BusConnector} bus\n * */\nfunction IDEDevice(cpu, buffer, is_cd, nr, bus)\n{\n    this.master = new IDEInterface(this, cpu, buffer, is_cd, nr, 0, bus);\n    this.slave = new IDEInterface(this, cpu, undefined, false, nr, 1, bus);\n\n    this.current_interface = this.master;\n\n    this.cpu = cpu;\n\n    // gets set via PCI in seabios, likely doesn't matter\n    if(nr === 0)\n    {\n        this.ata_port = 0x1F0;\n        this.irq = 14;\n\n        this.pci_id = 0x1E << 3;\n    }\n    else if(nr === 1)\n    {\n        this.ata_port = 0x170;\n        this.irq = 15;\n\n        this.pci_id = 0x1F << 3;\n    }\n    else\n    {\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\n    }\n\n    // alternate status, starting at 3f4/374\n    /** @type {number} */\n    this.ata_port_high = this.ata_port | 0x204;\n\n    /** @type {number} */\n    this.master_port = 0xB400;\n\n    this.pci_space = [\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // second device\n        0x00, 0x00, 0x00, 0x00, // second device\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x43, 0x10, 0xD4, 0x82,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\n\n        // 0x40\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        // 0x80\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    this.pci_bars = [\n        {\n            size: 8,\n        },\n        {\n            size: 4,\n        },\n        undefined,\n        undefined,\n        {\n            size: 0x10,\n        },\n    ];\n    this.name = \"ide\" + nr;\n\n    /** @type {number} */\n    this.device_control = 2;\n\n    // status\n    cpu.io.register_read(this.ata_port | 7, this, function() {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        return this.read_status();\n    });\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\n\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\n    cpu.io.register_read(this.ata_port | 0, this, function()\n    {\n        return this.current_interface.read_data(1);\n    }, function()\n    {\n        return this.current_interface.read_data(2);\n    }, function()\n    {\n        return this.current_interface.read_data(4);\n    });\n\n    cpu.io.register_read(this.ata_port | 1, this, function()\n    {\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\n        return this.current_interface.error;\n    });\n    cpu.io.register_read(this.ata_port | 2, this, function()\n    {\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\n        return this.current_interface.bytecount & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 3, this, function()\n    {\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\n        return this.current_interface.sector & 0xFF;\n    });\n\n    cpu.io.register_read(this.ata_port | 4, this, function()\n    {\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_low & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 5, this, function()\n    {\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_high & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 6, this, function()\n    {\n        dbg_log(\"Read 1F6\", LOG_DISK);\n        return this.current_interface.drive_head;\n    });\n\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\n    {\n        this.current_interface.write_data_port8(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port16(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port32(data);\n    });\n\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\n    {\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\n    {\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\n    {\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\n    });\n\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\n    {\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\n    {\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\n    {\n        var slave = data & 0x10;\n        var mode = data & 0xE0;\n\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\n\n        if(slave)\n        {\n            dbg_log(\"Slave\", LOG_DISK);\n            this.current_interface = this.slave;\n        }\n        else\n        {\n            this.current_interface = this.master;\n        }\n\n        this.master.drive_head = data;\n        this.slave.drive_head = data;\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\n        this.master.head = this.slave.head = data & 0xF;\n    });\n\n    /** @type {number} */\n    this.prdt_addr = 0;\n\n    /** @type {number} */\n    this.dma_status = 0;\n\n    /** @type {number} */\n    this.dma_command = 0;\n\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\n    {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        this.current_interface.ata_command(data);\n    });\n\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\n\n    cpu.io.register_read(this.master_port, this,\n                         this.dma_read_command8, undefined, this.dma_read_command);\n    cpu.io.register_write(this.master_port, this,\n                          this.dma_write_command8, undefined, this.dma_write_command);\n\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\n\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\n    });\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\n    });\n\n    cpu.devices.pci.register_device(this);\n\n    DEBUG && Object.seal(this);\n}\n\nIDEDevice.prototype.read_status = function()\n{\n    if(this.current_interface.buffer)\n    {\n        var ret = this.current_interface.status;\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\n        return ret;\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nIDEDevice.prototype.write_control = function(data)\n{\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\n\n    if(data & 4)\n    {\n        dbg_log(\"Reset via control port\", LOG_DISK);\n\n        this.cpu.device_lower_irq(this.irq);\n\n        this.master.device_reset();\n        this.slave.device_reset();\n    }\n\n    this.device_control = data;\n};\n\nIDEDevice.prototype.dma_read_addr = function()\n{\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\n    return this.prdt_addr;\n};\n\nIDEDevice.prototype.dma_set_addr = function(data)\n{\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\n    this.prdt_addr = data;\n};\n\nIDEDevice.prototype.dma_read_status = function()\n{\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\n    return this.dma_status;\n};\n\nIDEDevice.prototype.dma_write_status = function(value)\n{\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\n    this.dma_status &= ~(value & 6);\n};\n\nIDEDevice.prototype.dma_read_command = function()\n{\n    return this.dma_read_command8() | this.dma_read_status() << 16;\n};\n\nIDEDevice.prototype.dma_read_command8 = function()\n{\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\n    return this.dma_command;\n};\n\nIDEDevice.prototype.dma_write_command = function(value)\n{\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\n\n    this.dma_write_command8(value & 0xFF);\n    this.dma_write_status(value >> 16 & 0xFF);\n};\n\nIDEDevice.prototype.dma_write_command8 = function(value)\n{\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\n\n    let old_command = this.dma_command;\n    this.dma_command = value & 0x9;\n\n    if((old_command & 1) === (value & 1))\n    {\n        return;\n    }\n\n    if((value & 1) === 0)\n    {\n        this.dma_status &= ~1;\n        return;\n    }\n\n    this.dma_status |= 1;\n\n    switch(this.current_interface.current_command)\n    {\n        case 0x25:\n        case 0xC8:\n            this.current_interface.do_ata_read_sectors_dma();\n            break;\n\n        case 0xCA:\n        case 0x35:\n            this.current_interface.do_ata_write_sectors_dma();\n            break;\n\n        case 0xA0:\n            this.current_interface.do_atapi_dma();\n            break;\n\n        default:\n            dbg_log(\"Spurious dma command write, current command: \" +\n                    h(this.current_interface.current_command), LOG_DISK);\n            dbg_assert(false);\n    }\n};\n\nIDEDevice.prototype.push_irq = function()\n{\n    if((this.device_control & 2) === 0)\n    {\n        dbg_log(\"push irq\", LOG_DISK);\n        this.dma_status |= 4;\n        this.cpu.device_raise_irq(this.irq);\n    }\n};\n\nIDEDevice.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.master;\n    state[1] = this.slave;\n    state[2] = this.ata_port;\n    state[3] = this.irq;\n    state[4] = this.pci_id;\n    state[5] = this.ata_port_high;\n    state[6] = this.master_port;\n    state[7] = this.name;\n    state[8] = this.device_control;\n    state[9] = this.prdt_addr;\n    state[10] = this.dma_status;\n    state[11] = this.current_interface === this.master;\n    state[12] = this.dma_command;\n    return state;\n};\n\nIDEDevice.prototype.set_state = function(state)\n{\n    this.master = state[0];\n    this.slave = state[1];\n    this.ata_port = state[2];\n    this.irq = state[3];\n    this.pci_id = state[4];\n    this.ata_port_high = state[5];\n    this.master_port = state[6];\n    this.name = state[7];\n    this.device_control = state[8];\n    this.prdt_addr = state[9];\n    this.dma_status = state[10];\n    this.current_interface = state[11] ? this.master : this.slave;\n    this.dma_command = state[12];\n};\n\n\n/**\n * @constructor\n */\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\n{\n    this.device = device;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.nr = device_nr;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\n\n    /** @type {boolean} */\n    this.is_atapi = is_cd;\n\n    /** @type {number} */\n    this.sector_count = 0;\n\n    /** @type {number} */\n    this.head_count = 0;\n\n    /** @type {number} */\n    this.sectors_per_track = 0;\n\n    /** @type {number} */\n    this.cylinder_count = 0;\n\n    if(this.buffer)\n    {\n        this.sector_count = this.buffer.byteLength / this.sector_size;\n\n        if(this.sector_count !== (this.sector_count | 0))\n        {\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\n            this.sector_count = Math.ceil(this.sector_count);\n        }\n\n        if(is_cd)\n        {\n            this.head_count = 1;\n            this.sectors_per_track = 0;\n        }\n        else\n        {\n            // \"default\" values: 16/63\n            // common: 255, 63\n            this.head_count = 16;\n            this.sectors_per_track = 63;\n        }\n\n\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\n\n        if(this.cylinder_count !== (this.cylinder_count | 0))\n        {\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\n            this.cylinder_count = Math.floor(this.cylinder_count);\n            //this.sector_count = this.cylinder_count * this.head_count *\n            //                        this.sectors_per_track * this.sector_size;\n        }\n\n        //if(this.cylinder_count > 16383)\n        //{\n        //    this.cylinder_count = 16383;\n        //}\n\n        // disk translation: lba\n        var rtc = cpu.devices.rtc;\n\n        // master\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\n\n        var reg = CMOS_DISK_DRIVE1_CYL;\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\n        rtc.cmos_write(reg + 3, 0xFF);\n        rtc.cmos_write(reg + 4, 0xFF);\n        rtc.cmos_write(reg + 5, 0xC8);\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\n\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\n    }\n\n    /** @const */\n    this.stats = {\n        sectors_read: 0,\n        sectors_written: 0,\n        bytes_read: 0,\n        bytes_written: 0,\n        loading: false,\n    };\n\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.is_lba = 0;\n\n    /** @type {number} */\n    this.bytecount = 0;\n\n    /** @type {number} */\n    this.sector = 0;\n\n    /** @type {number} */\n    this.lba_count = 0;\n\n    /** @type {number} */\n    this.cylinder_low = 0;\n\n    /** @type {number} */\n    this.cylinder_high = 0;\n\n    /** @type {number} */\n    this.head = 0;\n\n    /** @type {number} */\n    this.drive_head = 0;\n\n    /** @type {number} */\n    this.status = 0x50;\n\n    /** @type {number} */\n    this.sectors_per_drq = 0x80;\n\n    /** @type {number} */\n    this.error = 0;\n\n    /** @type {number} */\n    this.data_pointer = 0;\n\n    this.data = new Uint8Array(64 * 1024);\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n\n    /** @type {number} */\n    this.data_length = 0;\n\n    /** @type {number} */\n    this.data_end = 0;\n\n    /** @type {number} */\n    this.current_command = -1;\n\n    /** @type {number} */\n    this.current_atapi_command = -1;\n\n    /** @type {number} */\n    this.write_dest = 0;\n\n    Object.seal(this);\n}\n\nIDEInterface.prototype.device_reset = function()\n{\n    if(this.is_atapi)\n    {\n        this.status = 0;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n        this.cylinder_low = 0x14; // lba_mid\n        this.cylinder_high = 0xEB; // lba_high\n    }\n    else\n    {\n        this.status = 0x50 | 1;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n\n        // 0, 0 needed by bochs bios\n        this.cylinder_low = 0; // lba_mid\n        this.cylinder_high = 0; // lba_high\n    }\n};\n\nIDEInterface.prototype.push_irq = function()\n{\n    this.device.push_irq();\n};\n\nIDEInterface.prototype.ata_command = function(cmd)\n{\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    if(!this.buffer)\n    {\n        dbg_log(\"abort: No buffer\", LOG_DISK);\n        this.error = 4;\n        this.status = 0x41;\n        this.push_irq();\n        return;\n    }\n\n    this.current_command = cmd;\n    this.error = 0;\n\n    switch(cmd)\n    {\n        case 0x08:\n            dbg_log(\"ATA device reset\", LOG_DISK);\n            this.data_pointer = 0;\n            this.data_end = 0;\n            this.data_length = 0;\n            this.device_reset();\n            this.push_irq();\n            break;\n\n        case 0x10:\n            // calibrate drive\n            this.status = 0x50;\n            this.cylinder_low = 0;\n            this.push_irq();\n            break;\n\n        case 0xF8:\n            // read native max address\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\n            this.push_irq();\n            break;\n\n        case 0x27:\n            // read native max address ext\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\n            this.push_irq();\n            break;\n\n        case 0x20:\n        case 0x24:\n        case 0x29:\n        case 0xC4:\n            // 0x20 read sectors\n            // 0x24 read sectors ext\n            // 0xC4 read multiple\n            // 0x29 read multiple ext\n            this.ata_read_sectors(cmd);\n            break;\n\n        case 0x30:\n        case 0x34:\n        case 0x39:\n        case 0xC5:\n            // 0x30 write sectors\n            // 0x34 write sectors ext\n            // 0xC5 write multiple\n            // 0x39 write multiple ext\n            this.ata_write_sectors(cmd);\n            break;\n\n        case 0x90:\n            // execute device diagnostic\n            this.push_irq();\n            this.error = 0x101;\n            this.status = 0x50;\n            break;\n\n        case 0x91:\n            // initialize device parameters\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xA0:\n            // ATA packet\n            if(this.is_atapi)\n            {\n                this.status = 0x58;\n                this.data_allocate(12);\n                this.data_end = 12;\n                this.bytecount = 1;\n                this.push_irq();\n            }\n            break;\n\n        case 0xA1:\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.create_identify_packet();\n                this.status = 0x58;\n\n                this.cylinder_low = 0x14;\n                this.cylinder_high = 0xEB;\n\n                this.push_irq();\n            }\n            else\n            {\n                this.status = 0x41;\n                this.push_irq();\n            }\n            break;\n\n        case 0xC6:\n            // set multiple mode\n            // Logical sectors per DRQ Block in word 1\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.sectors_per_drq = this.bytecount & 0xFF;\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0x25: // read dma ext\n        case 0xC8: // read dma\n            this.ata_read_sectors_dma(cmd);\n            break;\n\n        case 0x35: // write dma ext\n        case 0xCA: // write dma\n            this.ata_write_sectors_dma(cmd);\n            break;\n\n        case 0x40:\n            dbg_log(\"read verify sectors\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xDA:\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            this.push_irq();\n            break;\n\n        case 0xE0:\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE1:\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE7:\n            dbg_log(\"ATA flush cache\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEC:\n            dbg_log(\"ATA identify device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.status = 0x41;\n                this.error = 4;\n                this.push_irq();\n                return;\n            }\n\n            this.create_identify_packet();\n            this.status = 0x58;\n\n            this.push_irq();\n            break;\n\n        case 0xEA:\n            dbg_log(\"flush cache ext\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEF:\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF5:\n            dbg_log(\"security freeze lock\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF9:\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            break;\n\n        default:\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\n\n            this.status = 0x41;\n            // abort bit set\n            this.error = 4;\n    }\n};\n\nIDEInterface.prototype.atapi_handle = function()\n{\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    this.data_pointer = 0;\n    this.current_atapi_command = this.data[0];\n\n    switch(this.current_atapi_command)\n    {\n        case 0x00:\n            dbg_log(\"test unit ready\", LOG_DISK);\n            // test unit ready\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x03:\n            // request sense\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n\n            this.data[0] = 0x80 | 0x70;\n            this.data[2] = 5; // illegal request\n            this.data[7] = 8;\n            break;\n\n        case 0x12:\n            // inquiry\n            var length = this.data[4];\n            this.status = 0x58;\n\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\n\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\n            //this.data_allocate(36);\n            this.data.set([\n                0x05, 0x80, 0x01, 0x31,\n                // additional length\n                31,\n                0, 0, 0,\n\n                // 8\n                0x53, 0x4F, 0x4E, 0x59,\n                0x20, 0x20, 0x20, 0x20,\n\n                // 16\n                0x43, 0x44, 0x2D, 0x52,\n                0x4F, 0x4D, 0x20, 0x43,\n                0x44, 0x55, 0x2D, 0x31,\n                0x30, 0x30, 0x30, 0x20,\n\n                // 32\n                0x31, 0x2E, 0x31, 0x61,\n            ]);\n            this.data_end = this.data_length = Math.min(36, length);\n            break;\n\n        case 0x1A:\n            // mode sense (6)\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x1E:\n            // prevent/allow medium removal\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x25:\n            // read capacity\n            var count = this.sector_count - 1;\n            this.data_set(new Uint8Array([\n                count >> 24 & 0xFF,\n                count >> 16 & 0xFF,\n                count >> 8 & 0xFF,\n                count & 0xFF,\n                0,\n                0,\n                this.sector_size >> 8 & 0xFF,\n                this.sector_size & 0xFF,\n            ]));\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x28:\n            // read\n            if(this.lba_count & 1)\n            {\n                this.atapi_read_dma(this.data);\n            }\n            else\n            {\n                this.atapi_read(this.data);\n            }\n            break;\n\n        case 0x42:\n            var length = this.data[8];\n            this.data_allocate(Math.min(8, length));\n            this.data_end = this.data_length;\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\n            this.status = 0x58;\n            break;\n\n        case 0x43:\n            // read toc\n            var length = this.data[8] | this.data[7] << 8;\n            var format = this.data[9] >> 6;\n\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            dbg_log(\"read toc: \" + h(format, 2) +\n                    \" length=\" + length +\n                    \" \" + (this.data[1] & 2) +\n                    \" \" + h(this.data[6]), LOG_DISK);\n\n            if(format === 0)\n            {\n                var sector_count = this.sector_count;\n                this.data.set(new Uint8Array([\n                    0, 18, // length\n                    1, 1, // first and last session\n\n                    0,\n                    0x14,\n                    1, // track number\n                    0,\n                    0, 0, 0, 0,\n\n                    0,\n                    0x16,\n                    0xAA, // track number\n                    0,\n                    sector_count >> 24,\n                    sector_count >> 16 & 0xFF,\n                    sector_count >> 8 & 0xFF,\n                    sector_count & 0xFF,\n                ]));\n            }\n            else if(format === 1)\n            {\n                this.data.set(new Uint8Array([\n                    0, 10, // length\n                    1, 1, // first and last session\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                ]));\n            }\n            else\n            {\n                dbg_assert(false, \"Unimplemented format: \" + format);\n            }\n\n            this.status = 0x58;\n            break;\n\n        case 0x46:\n            // get configuration\n            var length = this.data[8] | this.data[7] << 8;\n            length = Math.min(length, 32);\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            this.data[0] = length - 4 >> 24 & 0xFF;\n            this.data[1] = length - 4 >> 16 & 0xFF;\n            this.data[2] = length - 4 >> 8 & 0xFF;\n            this.data[3] = length - 4 & 0xFF;\n            this.data[6] = 0x08;\n            this.data[10] = 3;\n            this.status = 0x58;\n            break;\n\n        case 0x51:\n            // read disk information\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x52:\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            break;\n\n        case 0x5A:\n            // mode sense\n            var length = this.data[8] | this.data[7] << 8;\n            var page_code = this.data[2];\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\n            if(page_code === 0x2A)\n            {\n                this.data_allocate(Math.min(30, length));\n            }\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0xBD:\n            // mechanism status\n            this.data_allocate(this.data[9] | this.data[8] << 8);\n            this.data_end = this.data_length;\n            this.data[5] = 1;\n            this.status = 0x58;\n            break;\n\n        case 0x4A:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            break;\n\n        default:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            dbg_assert(false);\n    }\n\n    this.bytecount = this.bytecount & ~7 | 2;\n\n    if((this.status & 0x80) === 0)\n    {\n        this.push_irq();\n    }\n\n    if((this.status & 0x80) === 0 && this.data_length === 0)\n    {\n        this.bytecount |= 1;\n        this.status &= ~8;\n    }\n};\n\nIDEInterface.prototype.do_write = function()\n{\n    this.status = 0x50;\n\n    dbg_assert(this.data_length <= this.data.length);\n    var data = this.data.subarray(0, this.data_length);\n\n    //dbg_log(hex_dump(data), LOG_DISK);\n    dbg_assert(this.data_length % 512 === 0);\n    this.ata_advance(this.current_command, this.data_length / 512);\n    this.push_irq();\n\n    this.buffer.set(this.write_dest, data, function()\n    {\n    });\n\n    this.report_write(this.data_length);\n};\n\nIDEInterface.prototype.atapi_read = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    this.data_length = 0;\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\n\n    if(req_length === 0xFFFF)\n        req_length--;\n\n    if(req_length > byte_count)\n    {\n        req_length = byte_count;\n    }\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else if(byte_count === 0)\n    {\n        this.status = 0x50;\n\n        this.data_pointer = 0;\n        //this.push_irq();\n    }\n    else\n    {\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\n            this.data_set(data);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n\n            this.push_irq();\n\n            req_length &= ~3;\n\n            this.data_end = req_length;\n            if(this.data_end > this.data_length)\n            {\n                this.data_end = this.data_length;\n            }\n            this.cylinder_low = this.data_end & 0xFF;\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\n\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.atapi_read_dma = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            dbg_log(\"atapi_read_dma: Data arrived\");\n            this.report_read_end(byte_count);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.data_set(data);\n\n            this.do_atapi_dma();\n        });\n    }\n};\n\nIDEInterface.prototype.do_atapi_dma = function()\n{\n    if((this.device.dma_status & 1) === 0)\n    {\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\n        return;\n    }\n\n    if((this.status & 0x8) === 0)\n    {\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\n        return;\n    }\n\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\n\n    var prdt_start = this.device.prdt_addr;\n    var offset = 0;\n\n    var data = this.data;\n\n    do {\n        var addr = this.cpu.read32s(prdt_start);\n        var count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!count)\n        {\n            count = 0x10000;\n        }\n\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\n        this.cpu.write_blob(data.subarray(offset,\n            Math.min(offset + count, this.data_length)), addr);\n\n        offset += count;\n        prdt_start += 8;\n\n        if(offset >= this.data_length && !end)\n        {\n            dbg_log(\"leave early end=\" + (+end) +\n                    \" offset=\" + h(offset) +\n                    \" data_length=\" + h(this.data_length) +\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\n            break;\n        }\n    }\n    while(!end);\n\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\n\n    this.status = 0x50;\n    this.device.dma_status &= ~1;\n    this.bytecount = this.bytecount & ~7 | 3;\n    this.push_irq();\n};\n\nIDEInterface.prototype.read_data = function(length)\n{\n    if(this.data_pointer < this.data_end)\n    {\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\n\n        if(length === 1)\n        {\n            var result = this.data[this.data_pointer];\n        }\n        else if(length === 2)\n        {\n            var result = this.data16[this.data_pointer >>> 1];\n        }\n        else\n        {\n            var result = this.data32[this.data_pointer >>> 2];\n        }\n\n        this.data_pointer += length;\n\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer & align) === 0)\n        {\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\n                        \" cur=\" + h(this.data_pointer) +\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\n        }\n\n        if(this.data_pointer >= this.data_end)\n        {\n            this.read_end();\n        }\n\n        return result;\n    }\n    else\n    {\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\n\n        this.data_pointer += length;\n        return 0;\n    }\n};\n\nIDEInterface.prototype.read_end = function()\n{\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\n\n    if(this.current_command === 0xA0)\n    {\n        if(this.data_end === this.data_length)\n        {\n            this.status = 0x50;\n            this.bytecount = this.bytecount & ~7 | 3;\n            this.push_irq();\n        }\n        else\n        {\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.push_irq();\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n\n            if(this.data_end + byte_count > this.data_length)\n            {\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\n                this.data_end = this.data_length;\n            }\n            else\n            {\n                this.data_end += byte_count;\n            }\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\n        }\n    }\n    else\n    {\n        this.error = 0;\n        if(this.data_pointer >= this.data_length)\n        {\n            this.status = 0x50;\n            this.push_irq();\n        }\n        else\n        {\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\n            {\n                var sector_count = Math.min(this.sectors_per_drq,\n                    (this.data_length - this.data_end) / 512);\n                dbg_assert(sector_count % 1 === 0);\n            }\n            else\n            {\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\n                var sector_count = 1;\n            }\n            this.ata_advance(this.current_command, sector_count);\n            this.data_end += 512 * sector_count;\n            this.status = 0x58;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port = function(data, length)\n{\n    dbg_assert(this.data_pointer % length === 0);\n\n    if(this.data_pointer >= this.data_end)\n    {\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\n    }\n    else\n    {\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\n        {\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\n        }\n\n        if(length === 1)\n        {\n            this.data[this.data_pointer++] = data;\n        }\n        else if(length === 2)\n        {\n            this.data16[this.data_pointer >>> 1] = data;\n            this.data_pointer += 2;\n        }\n        else\n        {\n            this.data32[this.data_pointer >>> 2] = data;\n            this.data_pointer += 4;\n        }\n\n        dbg_assert(this.data_pointer <= this.data_end);\n        if(this.data_pointer === this.data_end)\n        {\n            this.write_end();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port8 = function(data)\n{\n    this.write_data_port(data, 1);\n};\n\nIDEInterface.prototype.write_data_port16 = function(data)\n{\n    this.write_data_port(data, 2);\n};\n\nIDEInterface.prototype.write_data_port32 = function(data)\n{\n    this.write_data_port(data, 4);\n};\n\nIDEInterface.prototype.write_end = function()\n{\n    if(this.current_command === 0xA0)\n    {\n        this.atapi_handle();\n    }\n    else\n    {\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\n                \" data_length=\" + h(this.data_length), LOG_DISK);\n\n        if(this.data_pointer >= this.data_length)\n        {\n            this.do_write();\n        }\n        else\n        {\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\n            // XXX: Should advance here, but do_write does all the advancing\n            //this.ata_advance(this.current_command, 1);\n            this.status = 0x58;\n            this.data_end += 512;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\n{\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\n    this.bytecount -= sectors;\n\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\n       cmd === 0x25 || cmd === 0x35)\n    {\n        var new_sector = sectors + this.get_lba48();\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n    }\n    else if(this.is_lba)\n    {\n        var new_sector = sectors + this.get_lba28();\n        this.sector = new_sector & 0xFF;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n        this.head = this.head & ~0xF | new_sector & 0xF;\n    }\n    else // chs\n    {\n        var new_sector = sectors + this.get_chs();\n\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\n        this.cylinder_low = c & 0xFF;\n        this.cylinder_high = c >> 8 & 0xFF;\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\n\n        dbg_assert(new_sector === this.get_chs());\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x20 || cmd === 0x24;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x80 | 0x40;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\n\n            this.data_set(data);\n            this.status = 0x58;\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\n\n            this.push_irq();\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_assert(lba < this.buffer.byteLength);\n\n    this.report_read_start();\n\n    var orig_prdt_start = this.device.prdt_addr;\n\n    this.buffer.get(start, byte_count, (data) =>\n    {\n        //setTimeout(function() {\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\n        var prdt_start = this.device.prdt_addr;\n        var offset = 0;\n\n        dbg_assert(orig_prdt_start === prdt_start);\n\n        do {\n            var prd_addr = this.cpu.read32s(prdt_start);\n            var prd_count = this.cpu.read16(prdt_start + 4);\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n            if(!prd_count)\n            {\n                prd_count = 0x10000;\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\n            }\n\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\n\n            offset += prd_count;\n            prdt_start += 8;\n        }\n        while(!end);\n\n        dbg_assert(offset === byte_count);\n\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n\n        this.push_irq();\n\n        this.report_read_end(byte_count);\n        //}.bind(this), 10);\n    });\n};\n\nIDEInterface.prototype.ata_write_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x30 || cmd === 0x34;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA write lba=\" + h(lba) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x58;\n        this.data_allocate_noclear(byte_count);\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n        this.write_dest = start;\n    }\n};\n\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    var prdt_start = this.device.prdt_addr;\n    var prdt_count = 0;\n    var prdt_write_count = 0;\n    var offset = 0;\n\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\n\n    do {\n        var prd_addr = this.cpu.read32s(prdt_start);\n        var prd_count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!prd_count)\n        {\n            prd_count = 0x10000;\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\n        }\n\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\n\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\n        dbg_assert(slice.length === prd_count);\n\n        //if(DEBUG)\n        //{\n        //    dbg_log(hex_dump(slice), LOG_DISK);\n        //}\n\n        this.buffer.set(start + offset, slice, function()\n        {\n            prdt_write_count++;\n        });\n\n        offset += prd_count;\n        prdt_start += 8;\n        prdt_count++;\n    }\n    while(!end);\n\n    if(prdt_write_count === prdt_count)\n    {\n        //setTimeout(function() {\n        dbg_log(\"dma write completed\", LOG_DISK);\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.push_irq();\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n        //}, 10);\n    }\n    else\n    {\n        // fails when writes don't happen synchronously, which isn't currently\n        // the case, but might be in the future\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\n    }\n\n    this.report_write(byte_count);\n};\n\nIDEInterface.prototype.get_chs = function()\n{\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\n    var h = this.head;\n    var s = this.sector & 0xFF;\n\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\n\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\n};\n\nIDEInterface.prototype.get_lba28 = function()\n{\n    return this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.head & 0xF) << 24;\n};\n\nIDEInterface.prototype.get_lba48 = function()\n{\n    // Note: Bits over 32 missing\n    return (this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\n};\n\nIDEInterface.prototype.get_lba = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        return this.get_lba48();\n    }\n    else if(this.is_lba)\n    {\n        return this.get_lba28();\n    }\n    else\n    {\n        return this.get_chs();\n    }\n};\n\nIDEInterface.prototype.get_count = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        var count = this.bytecount;\n        if(count === 0) count = 0x10000;\n        return count;\n    }\n    else\n    {\n        var count = this.bytecount & 0xFF;\n        if(count === 0) count = 0x100;\n        return count;\n    }\n};\n\nIDEInterface.prototype.create_identify_packet = function()\n{\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\n\n    if(this.drive_head & 0x10)\n    {\n        // slave\n        this.data_allocate(0);\n        return;\n    }\n\n    for(var i = 0; i < 512; i++)\n    {\n        this.data[i] = 0;\n    }\n\n    var cylinder_count = Math.min(16383, this.cylinder_count);\n\n    this.data_set([\n        0x40, this.is_atapi ? 0x85 : 0,\n        // 1 cylinders\n        cylinder_count, cylinder_count >> 8,\n        0, 0,\n\n        // 3 heads\n        this.head_count, this.head_count >> 8,\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\n        // 5\n        0, 512 >> 8,\n        // sectors per track\n        this.sectors_per_track, this.sectors_per_track >> 8,\n        0, 0, 0, 0, 0, 0,\n        // 10-19 serial number\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 15\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 20\n        3, 0,\n        0, 2,\n        4, 0,\n        // 23-26 firmware revision\n        0, 0, 0, 0, 0, 0, 0, 0,\n\n        // 27 model number\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n\n        // 47 max value for set multiple mode\n        0x80, 0,\n        1, 0,\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        // 50\n        0, 0,\n        0, 2,\n        0, 2,\n        7, 0,\n\n        // 54 cylinders\n        cylinder_count, cylinder_count >> 8,\n        // 55 heads\n        this.head_count, this.head_count >> 8,\n        // 56 sectors per track\n        this.sectors_per_track, 0,\n        // capacity in sectors\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 60\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 63, dma supported mode, dma selected mode\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\n        //0, 0, // no DMA\n\n        0, 0,\n        // 65\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\n        // 70\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 75\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 80\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\n        // 85\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\n        // 90\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\n        // 95\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 100\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n    ]);\n\n    this.data_length = 512;\n    this.data_end = 512;\n};\n\nIDEInterface.prototype.data_allocate = function(len)\n{\n    this.data_allocate_noclear(len);\n\n    for(var i = 0; i < (len + 3 >> 2); i++)\n    {\n        this.data32[i] = 0;\n    }\n};\n\nIDEInterface.prototype.data_allocate_noclear = function(len)\n{\n    if(this.data.length < len)\n    {\n        this.data = new Uint8Array(len + 3 & ~3);\n        this.data16 = new Uint16Array(this.data.buffer);\n        this.data32 = new Int32Array(this.data.buffer);\n    }\n\n    this.data_length = len;\n    this.data_pointer = 0;\n};\n\nIDEInterface.prototype.data_set = function(data)\n{\n    this.data_allocate_noclear(data.length);\n    this.data.set(data);\n};\n\nIDEInterface.prototype.report_read_start = function()\n{\n    this.stats.loading = true;\n    this.bus.send(\"ide-read-start\");\n};\n\nIDEInterface.prototype.report_read_end = function(byte_count)\n{\n    this.stats.loading = false;\n\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_read += sector_count;\n    this.stats.bytes_read += byte_count;\n\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.report_write = function(byte_count)\n{\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_written += sector_count;\n    this.stats.bytes_written += byte_count;\n\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.bytecount;\n    state[1] = this.cylinder_count;\n    state[2] = this.cylinder_high;\n    state[3] = this.cylinder_low;\n    state[4] = this.data_pointer;\n    state[5] = 0;\n    state[6] = 0;\n    state[7] = 0;\n    state[8] = 0;\n    state[9] = this.drive_head;\n    state[10] = this.error;\n    state[11] = this.head;\n    state[12] = this.head_count;\n    state[13] = this.is_atapi;\n    state[14] = this.is_lba;\n    state[15] = this.lba_count;\n    state[16] = this.data;\n    state[17] = this.data_length;\n    state[18] = this.sector;\n    state[19] = this.sector_count;\n    state[20] = this.sector_size;\n    state[21] = this.sectors_per_drq;\n    state[22] = this.sectors_per_track;\n    state[23] = this.status;\n    state[24] = this.write_dest;\n    state[25] = this.current_command;\n    state[26] = this.data_end;\n    state[27] = this.current_atapi_command;\n    return state;\n};\n\nIDEInterface.prototype.set_state = function(state)\n{\n    this.bytecount = state[0];\n    this.cylinder_count = state[1];\n    this.cylinder_high = state[2];\n    this.cylinder_low = state[3];\n    this.data_pointer = state[4];\n\n    this.drive_head = state[9];\n    this.error = state[10];\n    this.head = state[11];\n    this.head_count = state[12];\n    this.is_atapi = state[13];\n    this.is_lba = state[14];\n    this.lba_count = state[15];\n    this.data = state[16];\n    this.data_length = state[17];\n    this.sector = state[18];\n    this.sector_count = state[19];\n    this.sector_size = state[20];\n    this.sectors_per_drq = state[21];\n    this.sectors_per_track = state[22];\n    this.status = state[23];\n    this.write_dest = state[24];\n    this.current_command = state[25];\n\n    this.data_end = state[26];\n    this.current_atapi_command = state[27];\n\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n};\n","\"use strict\";\n\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\n/** @const */ var CMOS_RTC_HOURS = 0x04;\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\n/** @const */ var CMOS_RTC_MONTH = 0x08;\n/** @const */ var CMOS_RTC_YEAR = 0x09;\n/** @const */ var CMOS_STATUS_A = 0x0a;\n/** @const */ var CMOS_STATUS_B = 0x0b;\n/** @const */ var CMOS_STATUS_C = 0x0c;\n/** @const */ var CMOS_STATUS_D = 0x0d;\n/** @const */ var CMOS_RESET_CODE = 0x0f;\n\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\n/** @const */ var CMOS_DISK_DATA = 0x12;\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\n/** @const */ var CMOS_CENTURY = 0x32;\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\n\n\n/**\n * RTC (real time clock) and CMOS\n * @constructor\n * @param {CPU} cpu\n */\nfunction RTC(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cmos_index = 0;\n    this.cmos_data = new Uint8Array(128);\n\n    // used for cmos entries\n    this.rtc_time = Date.now();\n    this.last_update = this.rtc_time;\n\n    // used for periodic interrupt\n    this.next_interrupt = 0;\n\n    this.periodic_interrupt = false;\n\n    // corresponds to default value for cmos_a\n    this.periodic_interrupt_time = 1000 / 1024;\n\n    this.cmos_a = 0x26;\n    this.cmos_b = 2;\n    this.cmos_c = 0;\n\n    this.nmi_disabled = 0;\n\n    cpu.io.register_write(0x70, this, function(out_byte)\n    {\n        this.cmos_index = out_byte & 0x7F;\n        this.nmi_disabled = out_byte >> 7;\n    });\n\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\n}\n\nRTC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.cmos_index;\n    state[1] = this.cmos_data;\n    state[2] = this.rtc_time;\n    state[3] = this.last_update;\n    state[4] = this.next_interrupt;\n\n    state[6] = this.periodic_interrupt;\n    state[7] = this.periodic_interrupt_time;\n    state[8] = this.cmos_a;\n    state[9] = this.cmos_b;\n    state[10] = this.cmos_c;\n    state[11] = this.nmi_disabled;\n\n    return state;\n};\n\nRTC.prototype.set_state = function(state)\n{\n    this.cmos_index = state[0];\n    this.cmos_data = state[1];\n    this.rtc_time = state[2];\n    this.last_update = state[3];\n    this.next_interrupt = state[4];\n\n    this.periodic_interrupt = state[6];\n    this.periodic_interrupt_time = state[7];\n    this.cmos_a = state[8];\n    this.cmos_b = state[9];\n    this.cmos_c = state[10];\n    this.nmi_disabled = state[11];\n};\n\nRTC.prototype.timer = function(time, legacy_mode)\n{\n    time = Date.now(); // XXX\n    this.rtc_time += time - this.last_update;\n    this.last_update = time;\n\n    if(this.periodic_interrupt && this.next_interrupt < time)\n    {\n        this.cpu.device_raise_irq(8);\n        this.cmos_c |= 1 << 6 | 1 << 7;\n\n        this.next_interrupt += this.periodic_interrupt_time *\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\n\n        return Math.max(0, time - this.next_interrupt);\n    }\n\n    return 100;\n};\n\nRTC.prototype.bcd_pack = function(n)\n{\n    var i = 0,\n        result = 0,\n        digit;\n\n    while(n)\n    {\n        digit = n % 10;\n\n        result |= digit << (4 * i);\n        i++;\n        n = (n - digit) / 10;\n    }\n\n    return result;\n};\n\nRTC.prototype.encode_time = function(t)\n{\n    if(this.cmos_b & 4)\n    {\n        // binary mode\n        return t;\n    }\n    else\n    {\n        return this.bcd_pack(t);\n    }\n};\n\n// TODO\n// - interrupt on update\n// - countdown\n// - letting bios/os set values\n// (none of these are used by seabios or the OSes we're\n// currently testing)\nRTC.prototype.cmos_port_read = function()\n{\n    var index = this.cmos_index;\n\n    //this.cmos_index = 0xD;\n\n    switch(index)\n    {\n        case CMOS_RTC_SECONDS:\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\n        case CMOS_RTC_MINUTES:\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\n        case CMOS_RTC_HOURS:\n            // TODO: 12 hour mode\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\n        case CMOS_RTC_DAY_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\n        case CMOS_RTC_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\n        case CMOS_RTC_YEAR:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\n\n        case CMOS_STATUS_A:\n            return this.cmos_a;\n        case CMOS_STATUS_B:\n            //dbg_log(\"cmos read from index \" + h(index));\n            return this.cmos_b;\n\n        case CMOS_STATUS_C:\n            // It is important to know that upon a IRQ 8, Status Register C\n            // will contain a bitmask telling which interrupt happened.\n            // What is important is that if register C is not read after an\n            // IRQ 8, then the interrupt will not happen again.\n            this.cpu.device_lower_irq(8);\n\n            dbg_log(\"cmos reg C read\", LOG_RTC);\n            // Missing IRQF flag\n            //return cmos_b & 0x70;\n            var c = this.cmos_c;\n\n            this.cmos_c &= ~0xF0;\n\n            return c;\n\n        case CMOS_STATUS_D:\n            return 0xFF;\n\n        case CMOS_CENTURY:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\n\n        default:\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\n            return this.cmos_data[this.cmos_index];\n    }\n};\n\nRTC.prototype.cmos_port_write = function(data_byte)\n{\n    switch(this.cmos_index)\n    {\n        case 0xA:\n            this.cmos_a = data_byte & 0x7F;\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\n\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\n            break;\n        case 0xB:\n            this.cmos_b = data_byte;\n            if(this.cmos_b & 0x40)\n            {\n                this.next_interrupt = Date.now();\n            }\n\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\n\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\n            break;\n        default:\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\n    }\n\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\n};\n\n/**\n * @param {number} index\n */\nRTC.prototype.cmos_read = function(index)\n{\n    dbg_assert(index < 128);\n    return this.cmos_data[index];\n};\n\n/**\n * @param {number} index\n * @param {number} value\n */\nRTC.prototype.cmos_write = function(index, value)\n{\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\n    dbg_assert(index < 128);\n    this.cmos_data[index] = value;\n};\n","\"use strict\";\n\n/** @const */\nvar A20_MASK = ~(1 << 20);\n/** @const */\nvar A20_MASK16 = ~(1 << 20 - 1);\n/** @const */\nvar A20_MASK32 = ~(1 << 20 - 2);\n\n/** @const */\nvar USE_A20 = false;\n\n\n// called by all memory writes\nCPU.prototype.debug_write = function(addr, size, value)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\n\n    this.debug_read(addr, size, true);\n}\n\n/**\n * @param {boolean=} is_write\n */\nCPU.prototype.debug_read = function(addr, size, is_write)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof addr === \"number\");\n    dbg_assert(!isNaN(addr));\n};\n\n\nCPU.prototype.mmap_read8 = function(addr)\n{\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\n};\n\nCPU.prototype.mmap_write8 = function(addr, value)\n{\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\n};\n\nCPU.prototype.mmap_read16 = function(addr)\n{\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\n\n    return fn(addr) | fn(addr + 1 | 0) << 8;\n};\n\nCPU.prototype.mmap_write16 = function(addr, value)\n{\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\n};\n\nCPU.prototype.mmap_read32 = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    return this.memory_map_read32[aligned_addr](addr);\n}\n\nCPU.prototype.mmap_write32 = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    this.memory_map_write32[aligned_addr](addr, value);\n}\n\nCPU.prototype.in_mapped_range = function(addr)\n{\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read8 = function(addr)\n{\n    this.debug_read(addr, 1);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read8(addr);\n    }\n    else\n    {\n        return this.mem8[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read16 = function(addr)\n{\n    this.debug_read(addr, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read16(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned16 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_read(addr << 1, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        return this.mmap_read16(addr << 1);\n    }\n    else\n    {\n        return this.mem16[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read32s = function(addr)\n{\n    this.debug_read(addr, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read32(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned32 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_read(addr << 2, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        return this.mmap_read32(addr << 2);\n    }\n    else\n    {\n        return this.mem32s[addr];\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write8 = function(addr, value)\n{\n    this.debug_write(addr, 1, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write8(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write16 = function(addr, value)\n{\n    this.debug_write(addr, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write16(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write_aligned16 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_write(addr << 1, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        this.mmap_write16(addr << 1, value);\n    }\n    else\n    {\n        this.mem16[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write32 = function(addr, value)\n{\n    this.debug_write(addr, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write32(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n        this.mem8[addr + 2 | 0] = value >> 16;\n        this.mem8[addr + 3 | 0] = value >> 24;\n    }\n};\n\nCPU.prototype.write_aligned32 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_write(addr << 2, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        this.mmap_write32(addr << 2, value);\n    }\n    else\n    {\n        this.mem32s[addr] = value;\n    }\n};\n\n/**\n * @param {Array.<number>|Uint8Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob = function(blob, offset)\n{\n    this.debug_write(offset, blob.length, 0)\n    dbg_assert(blob && blob.length >= 0);\n\n    this.mem8.set(blob, offset);\n};\n\n/**\n * @param {Array.<number>|Int32Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob32 = function(blob, offset)\n{\n    dbg_assert(blob && blob.length);\n    this.debug_write(offset, blob.length << 2, 0);\n    this.mem32s.set(blob, offset);\n};\n","\"use strict\";\n\n// http://wiki.osdev.org/PCI\n\nvar\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction PCI(cpu)\n{\n    this.pci_addr = new Uint8Array(4);\n    this.pci_value = new Uint8Array(4);\n    this.pci_response = new Uint8Array(4);\n    this.pci_status = new Uint8Array(4);\n\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\n\n    this.device_spaces = [];\n    this.devices = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 256; i++)\n    {\n        this.device_spaces[i] = undefined;\n        this.devices[i] = undefined;\n    }\n\n    this.io = cpu.io;\n\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write32(this.pci_addr32[0], value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\n        });\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\n        function()\n        {\n            return this.pci_response[0];\n        },\n        function()\n        {\n            return this.pci_response[1];\n        },\n        function()\n        {\n            return this.pci_response[2];\n        },\n        function()\n        {\n            return this.pci_response[3];\n        }\n    );\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\n        function()\n        {\n            return this.pci_status[0];\n        },\n        function()\n        {\n            return this.pci_status[1];\n        },\n        function()\n        {\n            return this.pci_status[2];\n        },\n        function()\n        {\n            return this.pci_status[3];\n        }\n    );\n\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\n        function(out_byte)\n        {\n            this.pci_addr[0] = out_byte & 0xFC;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[1] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[2] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[3] = out_byte;\n            this.pci_query();\n        }\n    );\n\n\n    // Some experimental PCI devices taken from my PC:\n\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\n    //var host_bridge = {\n    //    pci_id: 0,\n    //    pci_space: [\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    ],\n    //    pci_bars: [],\n    //};\n\n    var host_bridge = {\n        pci_id: 0,\n        pci_space: [\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82441FX PMC\",\n    };\n    this.register_device(host_bridge);\n\n    this.isa_bridge = {\n        pci_id: 1 << 3,\n        pci_space: [\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82371SB PIIX3 ISA\",\n    };\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\n\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n    //this.register_device([\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\n    //], 0x1e << 3);\n}\n\nPCI.prototype.get_state = function()\n{\n    var state = [];\n\n    for(var i = 0; i < 256; i++)\n    {\n        state[i] = this.device_spaces[i];\n    }\n\n    state[256] = this.pci_addr;\n    state[257] = this.pci_value;\n    state[258] = this.pci_response;\n    state[259] = this.pci_status;\n\n    return state;\n};\n\nPCI.prototype.set_state = function(state)\n{\n    for(var i = 0; i < 256; i++)\n    {\n        var device = this.devices[i];\n        var space = state[i];\n\n        if(!device || !space)\n        {\n            if(device)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\n                        \"configuration but not in snapshot (\" + device.name + \")\");\n            }\n            if(space)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\n            }\n            continue;\n        }\n\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\n        {\n            var value = space[(0x10 >> 2) + bar_nr];\n\n            if(value & 1)\n            {\n                var bar = device.pci_bars[bar_nr];\n                var from = bar.original_bar & ~1 & 0xFFFF;\n                var to = value & ~1 & 0xFFFF;\n                this.set_io_bars(bar, from, to);\n            }\n            else\n            {\n                // memory, cannot be changed\n            }\n        }\n\n        this.device_spaces[i].set(space);\n    }\n\n    this.pci_addr.set(state[256]);\n    this.pci_value.set(state[257]);\n    this.pci_response.set(state[258]);\n    this.pci_status.set(state[259]);\n};\n\nPCI.prototype.pci_query = function()\n{\n    var dbg_line = \"query\";\n\n    // Bit | .31                     .0\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\n\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\n        addr = this.pci_addr[0] & 0xFC,\n        //devfn = bdf & 0xFF,\n        //bus = bdf >> 8,\n        dev = bdf >> 3 & 0x1F,\n        //fn = bdf & 7,\n        enabled = this.pci_addr[3] >> 7;\n\n    dbg_line += \" enabled=\" + enabled;\n    dbg_line += \" bdf=\" + h(bdf, 4);\n    dbg_line += \" dev=\" + h(dev, 2);\n    dbg_line += \" addr=\" + h(addr, 2);\n\n    var device = this.device_spaces[bdf];\n\n    if(device !== undefined)\n    {\n        this.pci_status32[0] = 0x80000000 | 0;\n\n        if(addr < device.byteLength)\n        {\n            this.pci_response32[0] = device[addr >> 2];\n        }\n        else\n        {\n            // required by freebsd-9.1\n            this.pci_response32[0] = 0;\n        }\n\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\n\n        if(addr >= device.byteLength)\n        {\n            dbg_line += \" (undef)\";\n        }\n\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\n\n        dbg_log(dbg_line, LOG_PCI);\n    }\n    else\n    {\n        this.pci_response32[0] = -1;\n        this.pci_status32[0] = 0;\n    }\n};\n\nPCI.prototype.pci_write8 = function(address, written)\n{\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 2), LOG_PCI);\n\n    space[addr] = written;\n};\n\nPCI.prototype.pci_write16 = function(address, written)\n{\n    dbg_assert((address & 1) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 4), LOG_PCI);\n\n    space[addr >>> 1] = written;\n};\n\nPCI.prototype.pci_write32 = function(address, written)\n{\n    dbg_assert((address & 3) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = this.device_spaces[bdf];\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    if(addr >= 0x10 && addr < 0x28)\n    {\n        var bar_nr = addr - 0x10 >> 2;\n        var bar = device.pci_bars[bar_nr];\n\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\n\n        if(bar)\n        {\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\n\n            var space_addr = addr >> 2;\n            var type = space[space_addr] & 1;\n\n            if((written | 3 | bar.size - 1)  === -1) // size check\n            {\n                written = ~(bar.size - 1) | type;\n\n                if(type === 0)\n                {\n                    space[space_addr] = written;\n                }\n            }\n            else\n            {\n                if(type === 0)\n                {\n                    // memory\n                    var original_bar = bar.original_bar;\n\n                    if((written & ~0xF) !== (original_bar & ~0xF))\n                    {\n                        // seabios\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\n                    }\n\n                    // changing isn't supported yet, reset to default\n                    space[space_addr] = original_bar;\n                }\n            }\n\n            if(type === 1)\n            {\n                // io\n                dbg_assert(type === 1);\n\n                var from = space[space_addr] & ~1 & 0xFFFF;\n                var to = written & ~1 & 0xFFFF;\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\n                this.set_io_bars(bar, from, to);\n                space[space_addr] = written | 1;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\n    }\n    else if(addr === 0x30)\n    {\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n\n        if(device.pci_rom_size)\n        {\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\n            {\n                space[addr >> 2] = -device.pci_rom_size | 0;\n            }\n            else\n            {\n                space[addr >> 2] = device.pci_rom_address | 0;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n    }\n    else\n    {\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n        space[addr >>> 2] = written;\n    }\n};\n\nPCI.prototype.register_device = function(device)\n{\n    dbg_assert(device.pci_id !== undefined);\n    dbg_assert(device.pci_space !== undefined);\n    dbg_assert(device.pci_bars !== undefined);\n\n    var device_id = device.pci_id;\n\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\n\n    dbg_assert(!this.devices[device_id]);\n    dbg_assert(device.pci_space.length >= 64);\n    dbg_assert(device_id < this.devices.length);\n\n    // convert bytewise notation from lspci to double words\n    var space = new Int32Array(64);\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\n    this.device_spaces[device_id] = space;\n    this.devices[device_id] = device;\n\n    var bar_space = space.slice(4, 10);\n\n    for(var i = 0; i < device.pci_bars.length; i++)\n    {\n        var bar = device.pci_bars[i];\n\n        if(!bar)\n        {\n            continue;\n        }\n\n        var bar_base = bar_space[i];\n        var type = bar_base & 1;\n\n        bar.original_bar = bar_base;\n        bar.entries = [];\n\n        if(type === 0)\n        {\n            // memory, not needed currently\n        }\n        else\n        {\n            dbg_assert(type === 1);\n            var port = bar_base & ~1;\n\n            for(var j = 0; j < bar.size; j++)\n            {\n                bar.entries[j] = this.io.ports[port + j];\n            }\n        }\n    }\n\n    return space;\n};\n\nPCI.prototype.set_io_bars = function(bar, from, to)\n{\n    var count = bar.size;\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\n\n    var ports = this.io.ports;\n\n    for(var i = 0; i < count; i++)\n    {\n        var old_entry = ports[from + i];\n        ports[from + i] = this.io.create_empty_entry();\n\n        if(old_entry.read8 === this.io.empty_port_read8 &&\n           old_entry.read16 === this.io.empty_port_read16 &&\n           old_entry.read32 === this.io.empty_port_read32 &&\n           old_entry.write8 === this.io.empty_port_write &&\n           old_entry.write16 === this.io.empty_port_write &&\n           old_entry.write32 === this.io.empty_port_write)\n        {\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\n        }\n\n        var entry = bar.entries[i];\n        var empty_entry = ports[to + i];\n        dbg_assert(entry && empty_entry);\n\n        ports[to + i] = entry;\n\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n    }\n};\n\nPCI.prototype.raise_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\n    var device = (pci_id >> 3) - 1 & 0xFF;\n    var parent_pin = pin + device & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_raise_irq(irq);\n};\n\nPCI.prototype.lower_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\n    var device = pci_id >> 3 & 0xFF;\n    var parent_pin = pin + device - 2 & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_lower_irq(irq);\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {CPU} cpu\n */\nfunction FloppyController(cpu, fda_image, fdb_image)\n{\n    /** @const @type {IO|undefined} */\n    this.io = cpu.io;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {DMA} */\n    this.dma = cpu.devices.dma;\n\n    this.bytes_expecting = 0;\n    this.receiving_command = new Uint8Array(10);\n    this.receiving_index = 0;\n    this.next_command = null;\n\n    this.response_data = new Uint8Array(10);\n    this.response_index = 0;\n    this.response_length = 0;\n\n    this.floppy_size = 0;\n\n    /* const */\n    this.fda_image = fda_image;\n\n    /* const */\n    this.fdb_image = fdb_image;\n\n\n    this.status_reg0 = 0;\n    this.status_reg1 = 0;\n    this.status_reg2 = 0;\n    this.drive = 0;\n\n    this.last_cylinder = 0;\n    this.last_head = 0;\n    this.last_sector = 1;\n\n    // this should actually be write-only ... but people read it anyway\n    this.dor = 0;\n\n    if(!fda_image)\n    {\n        // Needed for CD emulation provided by seabios\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\n\n        this.sectors_per_track = 0;\n        this.number_of_heads = 0;\n        this.number_of_cylinders = 0;\n\n        this.floppy_size = 0;\n    }\n    else\n    {\n        this.floppy_size = fda_image.byteLength;\n\n        var floppy_types = {\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\n        };\n\n        var number_of_cylinders,\n            sectors_per_track,\n            number_of_heads,\n            floppy_type = floppy_types[this.floppy_size >> 10];\n\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\n        {\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\n\n            sectors_per_track = floppy_type.sectors;\n            number_of_heads = floppy_type.heads;\n            number_of_cylinders = floppy_type.tracks;\n        }\n        else\n        {\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\n        }\n\n        this.sectors_per_track = sectors_per_track;\n        this.number_of_heads = number_of_heads;\n        this.number_of_cylinders = number_of_cylinders;\n    }\n\n    this.io.register_read(0x3F0, this, this.port3F0_read);\n    this.io.register_read(0x3F2, this, this.port3F2_read);\n    this.io.register_read(0x3F4, this, this.port3F4_read);\n    this.io.register_read(0x3F5, this, this.port3F5_read);\n    this.io.register_read(0x3F7, this, this.port3F7_read);\n\n    this.io.register_write(0x3F2, this, this.port3F2_write);\n    this.io.register_write(0x3F5, this, this.port3F5_write);\n}\n\nFloppyController.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.bytes_expecting;\n    state[1] = this.receiving_command;\n    state[2] = this.receiving_index;\n    //state[3] = this.next_command;\n    state[4] = this.response_data;\n    state[5] = this.response_index;\n    state[6] = this.response_length;\n    state[7] = this.floppy_size;\n    state[8] = this.status_reg0;\n    state[9] = this.status_reg1;\n    state[10] = this.status_reg2;\n    state[11] = this.drive;\n    state[12] = this.last_cylinder;\n    state[13] = this.last_head;\n    state[14] = this.last_sector;\n    state[15] = this.dor;\n    state[16] = this.sectors_per_track;\n    state[17] = this.number_of_heads;\n    state[18] = this.number_of_cylinders;\n\n    return state;\n};\n\nFloppyController.prototype.set_state = function(state)\n{\n    this.bytes_expecting = state[0];\n    this.receiving_command = state[1];\n    this.receiving_index = state[2];\n    this.next_command = state[3];\n    this.response_data = state[4];\n    this.response_index = state[5];\n    this.response_length = state[6];\n    this.floppy_size = state[7];\n    this.status_reg0 = state[8];\n    this.status_reg1 = state[9];\n    this.status_reg2 = state[10];\n    this.drive = state[11];\n    this.last_cylinder = state[12];\n    this.last_head = state[13];\n    this.last_sector = state[14];\n    this.dor = state[15];\n    this.sectors_per_track = state[16];\n    this.number_of_heads = state[17];\n    this.number_of_cylinders = state[18];\n};\n\nFloppyController.prototype.port3F0_read = function()\n{\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\n\n    return 0;\n};\n\n\nFloppyController.prototype.port3F4_read = function()\n{\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\n\n    var return_byte = 0x80;\n\n    if(this.response_index < this.response_length)\n    {\n        return_byte |= 0x40 | 0x10;\n    }\n\n    if((this.dor & 8) === 0)\n    {\n        return_byte |= 0x20;\n    }\n\n    return return_byte;\n};\n\nFloppyController.prototype.port3F7_read = function()\n{\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\n    return 0x00;\n}\n\nFloppyController.prototype.port3F5_read = function()\n{\n    if(this.response_index < this.response_length)\n    {\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\n        this.cpu.device_lower_irq(6);\n        return this.response_data[this.response_index++];\n    }\n    else\n    {\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\n        return 0xFF;\n    }\n};\n\nFloppyController.prototype.port3F5_write = function(reg_byte)\n{\n    if(!this.fda_image) return;\n\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\n\n    if(this.bytes_expecting > 0)\n    {\n        this.receiving_command[this.receiving_index++] = reg_byte;\n\n        this.bytes_expecting--;\n\n        if(this.bytes_expecting === 0)\n        {\n            if(DEBUG)\n            {\n                var log = \"3F5 command received: \";\n                for(var i = 0; i < this.receiving_index; i++)\n                    log += h(this.receiving_command[i]) + \" \";\n                dbg_log(log, LOG_FLOPPY);\n            }\n\n            this.next_command.call(this, this.receiving_command);\n        }\n    }\n    else\n    {\n        switch(reg_byte)\n        {\n            // TODO\n            //case 2:\n                //this.next_command = read_complete_track;\n                //this.bytes_expecting = 8;\n                //break;\n            case 0x03:\n                this.next_command = this.fix_drive_data;\n                this.bytes_expecting = 2;\n                break;\n            case 0x04:\n                this.next_command = this.check_drive_status;\n                this.bytes_expecting = 1;\n                break;\n            case 0x05:\n            case 0xC5:\n                this.next_command = function(args) { this.do_sector(true, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0xE6:\n                this.next_command = function(args) { this.do_sector(false, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0x07:\n                this.next_command = this.calibrate;\n                this.bytes_expecting = 1;\n                break;\n            case 0x08:\n                this.check_interrupt_status();\n                break;\n            case 0x4A:\n                this.next_command = this.read_sector_id;\n                this.bytes_expecting = 1;\n                break;\n            case 0x0F:\n                this.bytes_expecting = 2;\n                this.next_command = this.seek;\n                break;\n            case 0x0E:\n                // dump regs\n                dbg_log(\"dump registers\", LOG_FLOPPY);\n                this.response_data[0] = 0x80;\n                this.response_index = 0;\n                this.response_length = 1;\n\n                this.bytes_expecting = 0;\n                break;\n\n            default:\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\n        }\n\n        this.receiving_index = 0;\n    }\n};\n\nFloppyController.prototype.port3F2_read = function()\n{\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\n    return this.dor;\n}\n\nFloppyController.prototype.port3F2_write = function(value)\n{\n    if((value & 4) === 4 && (this.dor & 4) === 0)\n    {\n        // reset\n        this.cpu.device_raise_irq(6);\n    }\n\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\n\n    this.dor = value;\n}\n\nFloppyController.prototype.check_drive_status = function(args)\n{\n    dbg_log(\"check drive status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 1;\n    this.response_data[0] = 1 << 5;\n}\n\nFloppyController.prototype.seek = function(args)\n{\n    dbg_log(\"seek\", LOG_FLOPPY);\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\n\n    this.last_cylinder = args[1];\n    this.last_head = args[0] >> 2 & 1;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.calibrate = function(args)\n{\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.check_interrupt_status = function()\n{\n    // do not trigger an interrupt here\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 2;\n\n    this.response_data[0] = 1 << 5;\n    this.response_data[1] = this.last_cylinder;\n}\n\nFloppyController.prototype.do_sector = function(is_write, args)\n{\n    var head = args[2],\n        cylinder = args[1],\n        sector = args[3],\n        sector_size = 128 << args[4],\n        read_count = args[5] - args[3] + 1,\n\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\n\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\n\n    if(!args[4])\n    {\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\n    }\n\n    if(!this.fda_image)\n    {\n        return;\n    }\n\n    if(is_write)\n    {\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n    else\n    {\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n};\n\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\n{\n    if(error)\n    {\n        // TODO: Set appropriate bits\n        return;\n    }\n\n    sector++;\n\n    if(sector > this.sectors_per_track)\n    {\n        sector = 1;\n        head++;\n\n        if(head >= this.number_of_heads)\n        {\n            head = 0;\n            cylinder++;\n        }\n    }\n\n    this.last_cylinder = cylinder;\n    this.last_head = head;\n    this.last_sector = sector;\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = head << 2 | 0x20;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = cylinder;\n    this.response_data[4] = head;\n    this.response_data[5] = sector;\n    this.response_data[6] = args[4];\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.fix_drive_data = function(args)\n{\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\n}\n\nFloppyController.prototype.read_sector_id = function(args)\n{\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = 0;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = 0;\n    this.response_data[4] = 0;\n    this.response_data[5] = 0;\n    this.response_data[6] = 0;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.raise_irq = function()\n{\n    if(this.dor & 8)\n    {\n        this.cpu.device_raise_irq(6);\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction DMA(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.channel_page = new Uint8Array(8);\n    this.channel_pagehi = new Uint8Array(8);\n    this.channel_addr = new Uint16Array(8);\n    this.channel_addr_init = new Uint16Array(8);\n    this.channel_count = new Uint16Array(8);\n    this.channel_count_init = new Uint16Array(8);\n    this.channel_mask = new Uint8Array(8);\n    this.channel_mode = new Uint8Array(8);\n    this.unmask_listeners = [];\n\n    this.lsb_msb_flipflop = 0;\n\n    var io = cpu.io;\n\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\n\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\n\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\n\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\n\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\n\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\n\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\n\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\n\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\n\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\n\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\n\n    io.register_write(0x0C, this, this.portC_write);\n    io.register_write(0xD8, this, this.portC_write);\n}\n\nDMA.prototype.get_state = function()\n{\n    return [\n        this.channel_page,\n        this.channel_pagehi,\n        this.channel_addr,\n        this.channel_addr_init,\n        this.channel_count,\n        this.channel_count_init,\n        this.channel_mask,\n        this.channel_mode,\n        this.lsb_msb_flipflop,\n    ];\n};\n\nDMA.prototype.set_state = function(state)\n{\n    this.channel_page = state[0];\n    this.channel_pagehi = state[1];\n    this.channel_addr = state[2];\n    this.channel_addr_init = state[3];\n    this.channel_count = state[4];\n    this.channel_count_init = state[5];\n    this.channel_mask = state[6];\n    this.channel_mode = state[7];\n    this.lsb_msb_flipflop = state[8];\n};\n\nDMA.prototype.port_count_write = function(channel, data_byte)\n{\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_count[channel] =\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\n\n    this.channel_count_init[channel] =\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_count_read = function(channel)\n{\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_count[channel]);\n};\n\nDMA.prototype.port_addr_write = function(channel, data_byte)\n{\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_addr[channel] =\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\n\n    this.channel_addr_init[channel] =\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_addr_read = function(channel)\n{\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_addr[channel]);\n};\n\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\n{\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_pagehi[channel] = data_byte;\n};\n\nDMA.prototype.port_pagehi_read = function(channel)\n{\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_pagehi[channel];\n};\n\nDMA.prototype.port_page_write = function(channel, data_byte)\n{\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_page[channel] = data_byte;\n};\n\nDMA.prototype.port_page_read = function(channel)\n{\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_page[channel];\n};\n\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    var value = !!(data_byte & 0x4);\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\n    this.update_mask(channel, value);\n};\n\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\n{\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\n    for(var i = 0; i < 4; i++)\n    {\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\n    }\n};\n\nDMA.prototype.port_multimask_read = function(channel_offset)\n{\n    var value = 0;\n    value |= this.channel_mask[channel_offset + 0];\n    value |= this.channel_mask[channel_offset + 1] << 1;\n    value |= this.channel_mask[channel_offset + 2] << 2;\n    value |= this.channel_mask[channel_offset + 3] << 3;\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\n    return value;\n};\n\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_mode[channel] = data_byte;\n};\n\nDMA.prototype.portC_write = function(data_byte)\n{\n    dbg_log(\"flipflop reset\", LOG_DMA);\n    this.lsb_msb_flipflop = 0;\n};\n\nDMA.prototype.on_unmask = function(fn, this_value)\n{\n    this.unmask_listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\nDMA.prototype.update_mask = function(channel, value)\n{\n    if(this.channel_mask[channel] !== value)\n    {\n        this.channel_mask[channel] ^= 1;\n\n        if(!value)\n        {\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\n            for(var i = 0; i < this.unmask_listeners.length; i++)\n            {\n                this.unmask_listeners[i].fn.call(\n                    this.unmask_listeners[i].this_value,\n                    channel\n                );\n            }\n        }\n    }\n};\n\n// read data, write to memory\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\n{\n    var read_count = this.count_get_8bit(channel),\n        addr = this.address_get_8bit(channel);\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\n\n    if(len < read_count)\n    {\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\n    }\n\n    if(start + read_count > buffer.byteLength)\n    {\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        var cpu = this.cpu;\n        this.channel_addr[channel] += read_count;\n\n        buffer.get(start, read_count, function(data)\n        {\n            cpu.write_blob(data, addr);\n            fn(false);\n        });\n    }\n};\n\n// write data, read memory\n// start and len in bytes\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\n{\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\n        bytes_per_count = channel >= 5 ? 2 : 1,\n        read_bytes = read_count * bytes_per_count,\n        addr = this.address_get_8bit(channel),\n        unfinished = false,\n        want_more = false,\n        autoinit = this.channel_mode[channel] & 0x10;\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\n\n    if(len < read_bytes)\n    {\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\n        read_count = Math.floor(len / bytes_per_count);\n        read_bytes = read_count * bytes_per_count;\n        unfinished = true;\n    }\n    else if(len > read_bytes)\n    {\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\n        want_more = true;\n    }\n\n    if(start + read_bytes > buffer.byteLength)\n    {\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        this.channel_addr[channel] += read_count;\n        this.channel_count[channel] -= read_count;\n        // when complete, counter should underflow to 0xFFFF\n\n        if(!unfinished && autoinit)\n        {\n            dbg_log(\"DMA autoinit\", LOG_DMA);\n            this.channel_addr[channel] = this.channel_addr_init[channel];\n            this.channel_count[channel] = this.channel_count_init[channel];\n        }\n\n        buffer.set(start,\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\n                () =>\n                {\n                    if(want_more && autoinit)\n                    {\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\n                    }\n                    else\n                    {\n                        fn(false);\n                    }\n                }\n            );\n    }\n};\n\nDMA.prototype.address_get_8bit = function(channel)\n{\n    var addr = this.channel_addr[channel];\n\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\n    if(channel >= 5)\n    {\n        addr = (addr << 1);\n    }\n\n    addr &= 0xFFFF;\n    addr |= this.channel_page[channel] << 16;\n    addr |= this.channel_pagehi[channel] << 24;\n\n    return addr;\n};\n\nDMA.prototype.count_get_8bit = function(channel)\n{\n    var count = this.channel_count[channel] + 1;\n\n    if(channel >= 5)\n    {\n        count *= 2;\n    }\n\n    return count;\n};\n\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\n{\n    if(!continuing)\n    {\n        this.lsb_msb_flipflop ^= 1;\n    }\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return old_dword & ~0xFF | new_byte;\n    }\n    else\n    {\n        // high byte\n        return old_dword & ~0xFF00 | new_byte << 8;\n    }\n};\n\nDMA.prototype.flipflop_read = function(dword)\n{\n    this.lsb_msb_flipflop ^= 1;\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return dword & 0xFF;\n    }\n    else\n    {\n        // high byte\n        return (dword >> 8) & 0xFF;\n    }\n};\n","\"use strict\";\n\n/**\n * @const\n * In kHz\n */\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\n\n/**\n * @constructor\n *\n * Programmable Interval Timer\n */\nfunction PIT(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.bus = bus;\n\n    this.counter_start_time = new Float64Array(3);\n    this.counter_start_value = new Uint16Array(3);\n\n    this.counter_next_low = new Uint8Array(4);\n    this.counter_enabled = new Uint8Array(4);\n    this.counter_mode = new Uint8Array(4);\n    this.counter_read_mode = new Uint8Array(4);\n\n    // 2 = latch low, 1 = latch high, 0 = no latch\n    this.counter_latch = new Uint8Array(4);\n    this.counter_latch_value = new Uint16Array(3);\n\n    this.counter_reload = new Uint16Array(3);\n\n    // TODO:\n    // - counter2 can be controlled by an input\n\n    cpu.io.register_read(0x61, this, function()\n    {\n        var now = v86.microtick();\n\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\n        var counter2_out = this.did_rollover(2, now);\n\n        return ref_toggle << 4 | counter2_out << 5;\n    });\n    cpu.io.register_write(0x61, this, function(data)\n    {\n        this.bus.send(\"pcspeaker-enable\", data & 1);\n    });\n\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\n\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\n\n    cpu.io.register_write(0x43, this, this.port43_write);\n}\n\nPIT.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.counter_next_low;\n    state[1] = this.counter_enabled;\n    state[2] = this.counter_mode;\n    state[3] = this.counter_read_mode;\n    state[4] = this.counter_latch;\n    state[5] = this.counter_latch_value;\n    state[6] = this.counter_reload;\n    state[7] = this.counter_start_time;\n    state[8] = this.counter_start_value;\n\n    return state;\n};\n\nPIT.prototype.set_state = function(state)\n{\n    this.counter_next_low = state[0];\n    this.counter_enabled = state[1];\n    this.counter_mode = state[2];\n    this.counter_read_mode = state[3];\n    this.counter_latch = state[4];\n    this.counter_latch_value = state[5];\n    this.counter_reload = state[6];\n    this.counter_start_time = state[7];\n    this.counter_start_value = state[8];\n};\n\nPIT.prototype.timer = function(now, no_irq)\n{\n    var time_to_next_interrupt = 100;\n\n    // counter 0 produces interrupts\n    if(!no_irq)\n    {\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\n        {\n            time_to_next_interrupt = 0;\n\n            this.counter_start_value[0] = this.get_counter_value(0, now);\n            this.counter_start_time[0] = now;\n\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\n\n            this.cpu.device_raise_irq(0);\n            var mode = this.counter_mode[0];\n\n            if(mode === 0)\n            {\n                this.counter_enabled[0] = 0;\n            }\n        }\n        else\n        {\n            this.cpu.device_lower_irq(0);\n        }\n    }\n    time_to_next_interrupt = 0;\n\n    return time_to_next_interrupt;\n};\n\nPIT.prototype.get_counter_value = function(i, now)\n{\n    if(!this.counter_enabled[i])\n    {\n        return 0;\n    }\n\n    var diff = now - this.counter_start_time[i];\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n\n    var value = this.counter_start_value[i] - diff_in_ticks;\n\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\n\n    var reload = this.counter_reload[i];\n\n    if(value >= reload)\n    {\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\n        value %= reload;\n    }\n    else if(value < 0)\n    {\n        value = value % reload + reload;\n    }\n\n    return value;\n};\n\nPIT.prototype.did_rollover = function(i, now)\n{\n    var diff = now - this.counter_start_time[i];\n\n    if(diff < 0)\n    {\n        // should only happen after restore_state\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\n        return true;\n    }\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\n\n    return this.counter_start_value[i] < diff_in_ticks;\n};\n\nPIT.prototype.counter_read = function(i)\n{\n    var latch = this.counter_latch[i];\n\n    if(latch)\n    {\n        this.counter_latch[i]--;\n\n        if(latch === 2)\n        {\n            return this.counter_latch_value[i] & 0xFF;\n        }\n        else\n        {\n            return this.counter_latch_value[i] >> 8;\n        }\n    }\n    else\n    {\n        var next_low = this.counter_next_low[i];\n\n        if(this.counter_mode[i] === 3)\n        {\n            this.counter_next_low[i] ^= 1;\n        }\n\n        var value = this.get_counter_value(i, v86.microtick());\n\n        if(next_low)\n        {\n            return value & 0xFF;\n        }\n        else\n        {\n            return value >> 8;\n        }\n    }\n};\n\nPIT.prototype.counter_write = function(i, value)\n{\n    if(this.counter_next_low[i])\n    {\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\n    }\n    else\n    {\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\n    }\n\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\n    {\n        if(!this.counter_reload[i])\n        {\n            this.counter_reload[i] = 0xFFFF;\n        }\n\n        // depends on the mode, should actually\n        // happen on the first tick\n        this.counter_start_value[i] = this.counter_reload[i];\n\n        this.counter_enabled[i] = true;\n\n        this.counter_start_time[i] = v86.microtick();\n\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\n    }\n\n    if(this.counter_read_mode[i] === 3)\n    {\n        this.counter_next_low[i] ^= 1;\n    }\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n\nPIT.prototype.port43_write = function(reg_byte)\n{\n    var mode = reg_byte >> 1 & 7,\n        binary_mode = reg_byte & 1,\n        i = reg_byte >> 6 & 3,\n        read_mode = reg_byte >> 4 & 3;\n\n    if(i === 1)\n    {\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\n    }\n\n    if(i === 3)\n    {\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\n        return;\n    }\n\n    if(read_mode === 0)\n    {\n        // latch\n        this.counter_latch[i] = 2;\n        var value = this.get_counter_value(i, v86.microtick());\n        dbg_log(\"latch: \" + value, LOG_PIT);\n        this.counter_latch_value[i] = value ? value - 1 : 0\n\n        return;\n    }\n\n    if(mode >= 6)\n    {\n        // 6 and 7 are aliased to 2 and 3\n        mode &= ~4;\n    }\n\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\n\n    if(read_mode === 1)\n    {\n        // msb\n        this.counter_next_low[i] = 0;\n    }\n    else if(read_mode === 2)\n    {\n        // lsb\n        this.counter_next_low[i] = 1;\n    }\n    else\n    {\n        // first lsb then msb\n        this.counter_next_low[i] = 1;\n    }\n\n    if(i === 0)\n    {\n        this.cpu.device_lower_irq(0);\n    }\n\n    if(mode === 0)\n    {\n    }\n    else if(mode === 3 || mode === 2)\n    {\n        // what is the difference\n    }\n    else\n    {\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\n    }\n\n    this.counter_mode[i] = mode;\n    this.counter_read_mode[i] = read_mode;\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n","\"use strict\";\n\n\nvar\n    /**\n     * Always 64k\n     * @const\n     */\n    VGA_BANK_SIZE = 64 * 1024,\n\n    /** @const */\n    MAX_XRES = 2560,\n\n    /** @const */\n    MAX_YRES = 1600,\n\n    /** @const */\n    MAX_BPP = 32;\n\n/** @const */\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\nvar VGA_LFB_ADDRESS = 0xE0000000;\n\n/** @const */\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\n\n/**\n * @const\n * Equals the maximum number of pixels for non svga.\n * 8 pixels per byte.\n */\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\n\n/** @const */\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\n    0xA0000,\n    0xA0000,\n    0xB0000,\n    0xB8000,\n]);\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\n    0x20000, // 128K\n    0x10000, // 64K\n    0x8000, // 32K\n    0x8000, // 32K\n]);\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {number} vga_memory_size\n */\nfunction VGAScreen(cpu, bus, vga_memory_size)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.vga_memory_size = vga_memory_size;\n\n    /** @type {number} */\n    this.cursor_address = 0;\n\n    /** @type {number} */\n    this.cursor_scanline_start = 0xE;\n\n    /** @type {number} */\n    this.cursor_scanline_end = 0xF;\n\n    /**\n     * Number of columns in text mode\n     * @type {number}\n     */\n    this.max_cols = 80;\n\n    /**\n     * Number of rows in text mode\n     * @type {number}\n     */\n    this.max_rows = 25;\n\n    /**\n     * Width in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_width = 0;\n\n    /**\n     * Height in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_height = 0;\n\n    /**\n     * Logical width in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_width = 0;\n\n    /**\n     * Logical height in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_height = 0;\n\n    /**\n     * The rectangular fragments of the image buffer, and their destination\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\n     * @type {Array<Object<string, number>>}\n     */\n    this.layers = [];\n\n    /**\n     * video memory start address\n     * @type {number}\n     */\n    this.start_address = 0;\n\n    /**\n     * Start address - a copy of start_address that only gets updated\n     * during VSync, used for panning and page flipping\n     * @type {number}\n     */\n    this.start_address_latched = 0;\n\n    /**\n     * Unimplemented CRTC registers go here\n     */\n    this.crtc = new Uint8Array(0x19);\n\n    // Implemented CRTC registers:\n\n    /** @type {number} */\n    this.crtc_mode = 0;\n\n    /** @type {number} */\n    this.horizontal_display_enable_end = 0;\n\n    /** @type {number} */\n    this.horizontal_blank_start = 0;\n\n    /** @type {number} */\n    this.vertical_display_enable_end = 0;\n\n    /** @type {number} */\n    this.vertical_blank_start = 0;\n\n    /** @type {number} */\n    this.underline_location_register = 0;\n\n    /** @type {number} */\n    this.preset_row_scan = 0;\n\n    /** @type {number} */\n    this.offset_register = 0;\n\n    /** @type {number} */\n    this.line_compare = 0;\n\n    // End of CRTC registers\n\n    /**\n     * Used for svga, e.g. banked modes\n     * @type{boolean}\n     */\n    this.graphical_mode_is_linear = true;\n\n    /** @type {boolean} */\n    this.graphical_mode = false;\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\n\n    /*\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\n     * Needs to be initialised by the BIOS\n     */\n    this.vga256_palette = new Int32Array(256);\n\n    /**\n     * VGA read latches\n     * @type{number}\n     */\n    this.latch_dword = 0;\n\n    /** @type {number} */\n    this.svga_width = 0;\n\n    /** @type {number} */\n    this.svga_height = 0;\n\n    this.svga_enabled = false;\n\n    /** @type {number} */\n    this.svga_bpp = 32;\n\n    /** @type {number} */\n    this.svga_bank_offset = 0;\n\n    /**\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\n     * In bytes\n     * @type {number}\n     */\n    this.svga_offset = 0;\n\n    // Experimental, could probably need some changes\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\n    this.pci_space = [\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x12 << 3;\n    this.pci_bars = [\n        {\n            size: vga_memory_size,\n        },\n    ];\n\n    // TODO: Should be matched with vga bios size and mapping address\n    // Seabios config for this device:\n    // CONFIG_VGA_PCI=y\n    // CONFIG_OVERRIDE_PCI_ID=y\n    // CONFIG_VGA_VID=0x10de\n    // CONFIG_VGA_DID=0x0a20\n\n    this.pci_rom_size = 0x10000;\n    this.pci_rom_address = 0xFEB00000;\n\n    this.name = \"vga\";\n\n    this.stats = {\n        is_graphical: false,\n        res_x: 0,\n        res_y: 0,\n        bpp: 0,\n    };\n\n    this.index_crtc = 0;\n\n    // index for setting colors through port 3C9h\n    this.dac_color_index_write = 0;\n    this.dac_color_index_read = 0;\n    this.dac_state = 0;\n\n    this.dac_map = new Uint8Array(0x10);\n\n    this.attribute_controller_index = -1;\n    this.palette_source = 0x20;\n    this.attribute_mode = 0;\n    this.color_plane_enable = 0;\n    this.horizontal_panning = 0;\n    this.color_select = 0;\n\n    this.sequencer_index = -1;\n\n    // bitmap of planes 0-3\n    this.plane_write_bm = 0xF;\n    this.sequencer_memory_mode = 0;\n    this.clocking_mode = 0;\n    this.graphics_index = -1;\n\n    this.plane_read = 0, // value 0-3, which plane to read\n    this.planar_mode = 0;\n    this.planar_rotate_reg = 0;\n    this.planar_bitmap = 0xFF;\n    this.planar_setreset = 0;\n    this.planar_setreset_enable = 0;\n    this.miscellaneous_graphics_register = 0;\n\n    this.color_compare = 0;\n    this.color_dont_care = 0;\n\n    this.max_scan_line = 0;\n\n    this.miscellaneous_output_register = 0xff;\n    this.port_3DA_value = 0xFF;\n\n\n    var io = cpu.io;\n\n    io.register_write(0x3C0, this, this.port3C0_write);\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\n\n    io.register_read(0x3C1, this, this.port3C1_read);\n    io.register_write(0x3C2, this, this.port3C2_write);\n\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\n\n    io.register_read(0x3C4, this, this.port3C4_read);\n    io.register_read(0x3C5, this, this.port3C5_read);\n\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\n\n    io.register_read(0x3CE, this, this.port3CE_read);\n    io.register_read(0x3CF, this, this.port3CF_read);\n\n    io.register_write(0x3C7, this, this.port3C7_write);\n    io.register_read(0x3C7, this, this.port3C7_read);\n    io.register_write(0x3C8, this, this.port3C8_write);\n    io.register_read(0x3C8, this, this.port3C8_read);\n    io.register_write(0x3C9, this, this.port3C9_write);\n    io.register_read(0x3C9, this, this.port3C9_read);\n\n    io.register_read(0x3CC, this, this.port3CC_read);\n\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\n    io.register_read(0x3D5, this, this.port3D5_read);\n\n    io.register_read(0x3D4, this, function() { dbg_log(\"3D4 read\", LOG_VGA); return 0; });\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\n\n    io.register_read(0x3DA, this, this.port3DA_read);\n    io.register_read(0x3BA, this, this.port3DA_read);\n\n\n    // Bochs VBE Extensions\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\n    this.dispi_index = -1;\n    this.dispi_enable_value = 0;\n\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\n\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\n\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\n    {\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\n    }\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\n    {\n        // round up to next 64k\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\n        this.vga_memory_size++;\n    }\n\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n\n    this.dest_buffer = undefined;\n\n    bus.register(\"screen-tell-buffer\", function(data)\n    {\n        if(this.dest_buffer && data[0])\n        {\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\n        }\n        this.dest_buffer = data[0];\n    }, this);\n\n    bus.register(\"screen-fill-buffer\", function()\n    {\n        this.screen_fill_buffer();\n    }, this);\n\n\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\n\n    var me = this;\n    io.mmap_register(0xA0000, 0x20000,\n        function(addr) { return me.vga_memory_read(addr); },\n        function(addr, value) { me.vga_memory_write(addr, value); }\n    );\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\n        function(addr) { return me.svga_memory_read8(addr); },\n        function(addr, value) { me.svga_memory_write8(addr, value); },\n        function(addr) { return me.svga_memory_read32(addr); },\n        function(addr, value) { me.svga_memory_write32(addr, value); }\n    );\n\n    cpu.devices.pci.register_device(this);\n}\n\nVGAScreen.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.vga_memory_size;\n    state[1] = this.cursor_address;\n    state[2] = this.cursor_scanline_start;\n    state[3] = this.cursor_scanline_end;\n    state[4] = this.max_cols;\n    state[5] = this.max_rows;\n    state[6] = this.layers;\n    state[7] = this.dac_state;\n    state[8] = this.start_address;\n    state[9] = this.graphical_mode;\n    state[10] = this.vga256_palette;\n    state[11] = this.latch_dword;\n    state[12] = this.color_compare;\n    state[13] = this.color_dont_care;\n    state[14] = this.miscellaneous_graphics_register;\n    state[15] = this.svga_width;\n    state[16] = this.svga_height;\n    state[17] = this.crtc_mode;\n    state[18] = this.svga_enabled;\n    state[19] = this.svga_bpp;\n    state[20] = this.svga_bank_offset;\n    state[21] = this.svga_offset;\n    state[22] = this.index_crtc;\n    state[23] = this.dac_color_index_write;\n    state[24] = this.dac_color_index_read;\n    state[25] = this.dac_map;\n    state[26] = this.sequencer_index;\n    state[27] = this.plane_write_bm;\n    state[28] = this.sequencer_memory_mode;\n    state[29] = this.graphics_index;\n    state[30] = this.plane_read;\n    state[31] = this.planar_mode;\n    state[32] = this.planar_rotate_reg;\n    state[33] = this.planar_bitmap;\n    state[34] = this.max_scan_line;\n    state[35] = this.miscellaneous_output_register;\n    state[36] = this.port_3DA_value;\n    state[37] = this.dispi_index;\n    state[38] = this.dispi_enable_value;\n    state[39] = this.svga_memory;\n    state[40] = this.graphical_mode_is_linear;\n    state[41] = this.attribute_controller_index;\n    state[42] = this.offset_register;\n    state[43] = this.planar_setreset;\n    state[44] = this.planar_setreset_enable;\n    state[45] = this.start_address_latched;\n    state[46] = this.crtc;\n    state[47] = this.horizontal_display_enable_end;\n    state[48] = this.horizontal_blank_start;\n    state[49] = this.vertical_display_enable_end;\n    state[50] = this.vertical_blank_start;\n    state[51] = this.underline_location_register;\n    state[52] = this.preset_row_scan;\n    state[53] = this.offset_register;\n    state[54] = this.palette_source;\n    state[55] = this.attribute_mode;\n    state[56] = this.color_plane_enable;\n    state[57] = this.horizontal_panning;\n    state[58] = this.color_select;\n    state[59] = this.clocking_mode;\n    state[60] = this.line_compare;\n\n    return state;\n};\n\nVGAScreen.prototype.set_state = function(state)\n{\n    this.vga_memory_size = state[0];\n    this.cursor_address = state[1];\n    this.cursor_scanline_start = state[2];\n    this.cursor_scanline_end = state[3];\n    this.max_cols = state[4];\n    this.max_rows = state[5];\n    this.layers = state[6];\n    this.dac_state = state[7];\n    this.start_address = state[8];\n    this.graphical_mode = state[9];\n    this.vga256_palette = state[10];\n    this.latch_dword = state[11];\n    this.color_compare = state[12];\n    this.color_dont_care = state[13];\n    this.miscellaneous_graphics_register = state[14];\n    this.svga_width = state[15];\n    this.svga_height = state[16];\n    this.crtc_mode = state[17];\n    this.svga_enabled = state[18];\n    this.svga_bpp = state[19];\n    this.svga_bank_offset = state[20];\n    this.svga_offset = state[21];\n    this.index_crtc = state[22];\n    this.dac_color_index_write = state[23];\n    this.dac_color_index_read = state[24];\n    this.dac_map = state[25];\n    this.sequencer_index = state[26];\n    this.plane_write_bm = state[27];\n    this.sequencer_memory_mode = state[28];\n    this.graphics_index = state[29];\n    this.plane_read = state[30];\n    this.planar_mode = state[31];\n    this.planar_rotate_reg = state[32];\n    this.planar_bitmap = state[33];\n    this.max_scan_line = state[34];\n    this.miscellaneous_output_register = state[35];\n    this.port_3DA_value = state[36];\n    this.dispi_index = state[37];\n    this.dispi_enable_value = state[38];\n    this.svga_memory.set(state[39]);\n    this.graphical_mode_is_linear = state[40];\n    this.attribute_controller_index = state[41];\n    this.offset_register = state[42];\n    this.planar_setreset = state[43];\n    this.planar_setreset_enable = state[44];\n    this.start_address_latched = state[45];\n    this.crtc.set(state[46]);\n    this.horizontal_display_enable_end = state[47];\n    this.horizontal_blank_start = state[48];\n    this.vertical_display_enable_end = state[49];\n    this.vertical_blank_start = state[50];\n    this.underline_location_register = state[51];\n    this.preset_row_scan = state[52];\n    this.offset_register = state[53];\n    this.palette_source = state[54];\n    this.attribute_mode = state[55];\n    this.color_plane_enable = state[56];\n    this.horizontal_panning = state[57];\n    this.color_select = state[58];\n    this.clocking_mode = state[59];\n    this.line_compare = state[60];\n\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\n\n    if(this.graphical_mode)\n    {\n        // Ensure set_size_graphical will update\n        this.screen_width = 0;\n        this.screen_height = 0;\n\n        if(this.svga_enabled)\n        {\n            this.set_size_graphical(this.svga_width, this.svga_height,\n                this.svga_bpp, this.svga_width, this.svga_height);\n            this.update_layers();\n        }\n        else\n        {\n            this.update_vga_size();\n            this.complete_replot();\n        }\n    }\n    else\n    {\n        this.set_size_text(this.max_cols, this.max_rows);\n        this.update_cursor_scanline();\n        this.update_cursor();\n    }\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.vga_memory_read = function(addr)\n{\n    if(this.svga_enabled && this.graphical_mode_is_linear)\n    {\n        addr -= 0xA0000;\n        addr |= this.svga_bank_offset;\n\n        return this.svga_memory[addr];\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    // VGA chip only decodes addresses within the selected memory space.\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\n        return 0;\n    }\n\n    this.latch_dword = this.plane0[addr];\n    this.latch_dword |= this.plane1[addr] << 8;\n    this.latch_dword |= this.plane2[addr] << 16;\n    this.latch_dword |= this.plane3[addr] << 24;\n\n    if(this.planar_mode & 0x08)\n    {\n        // read mode 1\n        var reading = 0xFF;\n\n        if(this.color_dont_care & 0x1)\n        {\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x2)\n        {\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x4)\n        {\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x8)\n        {\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\n        }\n\n        return reading;\n    }\n    else\n    {\n        // read mode 0\n\n        var plane = this.plane_read;\n        if(!this.graphical_mode)\n        {\n            // We currently put all text data linearly\n            plane = 0;\n        }\n        else if(this.sequencer_memory_mode & 0x8)\n        {\n            // Chain 4\n            plane = addr & 0x3;\n            addr &= ~0x3;\n        }\n        else if(this.planar_mode & 0x10)\n        {\n            // Odd/Even host read\n            plane = addr & 0x1;\n            addr &= ~0x1;\n        }\n        return this.vga_memory[plane << 16 | addr];\n    }\n};\n\nVGAScreen.prototype.vga_memory_write = function(addr, value)\n{\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\n    {\n        // vbe banked mode\n        addr -= 0xA0000;\n        this.vga_memory_write_graphical_linear(addr, value);\n        return;\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        this.vga_memory_write_graphical(addr, value);\n    }\n    else\n    {\n        if(!(this.plane_write_bm & 0x3))\n        {\n            // Ignore writes to font planes.\n            return;\n        }\n        this.vga_memory_write_text_mode(addr, value);\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\n{\n    addr |= this.svga_bank_offset;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n};\n\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\n{\n    var plane_dword;\n    var write_mode = this.planar_mode & 3;\n    var bitmask = this.apply_feed(this.planar_bitmap);\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\n\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\n    switch(write_mode)\n    {\n        case 0:\n            value = this.apply_rotate(value);\n            plane_dword = this.apply_feed(value);\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 1:\n            plane_dword = this.latch_dword;\n            break;\n        case 2:\n            plane_dword = this.apply_expand(value);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 3:\n            value = this.apply_rotate(value);\n            bitmask &= this.apply_feed(value);\n            plane_dword = setreset_dword;\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n    }\n\n    var plane_select = 0xF;\n\n    switch(this.sequencer_memory_mode & 0xC)\n    {\n        // Odd/Even (aka chain 2)\n        case 0x0:\n            plane_select = 0x5 << (addr & 0x1);\n            addr &= ~0x1;\n            break;\n\n        // Chain 4\n        // Note: FreeVGA may have mistakenly stated that this bit field is\n        // for system read only, yet the IBM Open Source Graphics Programmer's\n        // Reference Manual explicitly states \"both read and write\".\n        case 0x8:\n        case 0xC:\n            plane_select = 1 << (addr & 0x3);\n            addr &= ~0x3;\n            break;\n    }\n\n    // Plane masks take precedence\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\n    plane_select &= this.plane_write_bm;\n\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\n\n    var pixel_addr = this.vga_addr_to_pixel(addr);\n    this.partial_replot(pixel_addr, pixel_addr + 7);\n};\n\n/**\n * Copies data_byte into the four planes, with each plane\n * represented by an 8-bit field inside the dword.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_feed = function(data_byte)\n{\n    var dword = data_byte;\n    dword |= data_byte << 8;\n    dword |= data_byte << 16;\n    dword |= data_byte << 24;\n    return dword;\n};\n\n/**\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\n * bit is expanded to 0xFF if set or 0x00 if clear.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_expand = function(data_byte)\n{\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\n    return dword;\n};\n\n/**\n * Planar Write - Barrel Shifter\n * @param {number} data_byte\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_rotate = function(data_byte)\n{\n    var wrapped = data_byte | (data_byte << 8);\n    var count = this.planar_rotate_reg & 0x7;\n    var shifted = wrapped >>> count;\n    return shifted & 0xFF;\n};\n\n/**\n * Planar Write - Set / Reset Circuitry\n * @param {number} data_dword\n * @param {number} enable_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\n */\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\n{\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    data_dword |= enable_dword & setreset_dword;\n    data_dword &= ~enable_dword | setreset_dword;\n    return data_dword;\n};\n\n/**\n * Planar Write - ALU Unit\n * @param {number} data_dword\n * @param {number} latch_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\n{\n    switch(this.planar_rotate_reg & 0x18)\n    {\n        case 0x08:\n            return data_dword & latch_dword;\n        case 0x10:\n            return data_dword | latch_dword;\n        case 0x18:\n            return data_dword ^ latch_dword;\n    }\n    return data_dword;\n};\n\n/**\n * Planar Write - Bitmask Unit\n * @param {number} data_dword\n * @param {number} bitmask_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\n */\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\n{\n    var plane_dword = bitmask_dword & data_dword;\n    plane_dword |= ~bitmask_dword & this.latch_dword;\n    return plane_dword;\n};\n\nVGAScreen.prototype.text_mode_redraw = function()\n{\n    var addr = this.start_address << 1,\n        chr,\n        color;\n\n    for(var row = 0; row < this.max_rows; row++)\n    {\n        for(var col = 0; col < this.max_cols; col++)\n        {\n            chr = this.vga_memory[addr];\n            color = this.vga_memory[addr | 1];\n\n            this.bus.send(\"screen-put-char\", [row, col, chr,\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n            addr += 2;\n        }\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\n{\n    var memory_start = (addr >> 1) - this.start_address,\n        row = memory_start / this.max_cols | 0,\n        col = memory_start % this.max_cols,\n        chr,\n        color;\n\n    // XXX: Should handle 16 bit write if possible\n    if(addr & 1)\n    {\n        color = value;\n        chr = this.vga_memory[addr & ~1];\n    }\n    else\n    {\n        chr = value;\n        color = this.vga_memory[addr | 1];\n    }\n\n    this.bus.send(\"screen-put-char\", [row, col, chr,\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n    this.vga_memory[addr] = value;\n};\n\nVGAScreen.prototype.update_cursor = function()\n{\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\n        col = (this.cursor_address - this.start_address) % this.max_cols;\n\n    row = Math.min(this.max_rows - 1, row);\n\n    this.bus.send(\"screen-update-cursor\", [row, col]);\n};\n\nVGAScreen.prototype.svga_memory_read8 = function(addr)\n{\n    return this.svga_memory[addr & 0xFFFFFFF];\n};\n\nVGAScreen.prototype.svga_memory_read32 = function(addr)\n{\n    addr &= 0xFFFFFFF;\n\n    if(addr & 3)\n    {\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\n    }\n    else\n    {\n        return this.svga_memory32[addr >> 2];\n    }\n};\n\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n    this.svga_memory[addr] = value;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n};\n\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n    this.svga_memory[addr + 1] = value >> 8;\n    this.svga_memory[addr + 2] = value >> 16;\n    this.svga_memory[addr + 3] = value >> 24;\n};\n\nVGAScreen.prototype.complete_redraw = function()\n{\n    dbg_log(\"complete redraw\", LOG_VGA);\n\n    if(this.graphical_mode)\n    {\n        this.diff_addr_min = 0;\n\n        if(this.svga_enabled)\n        {\n            this.diff_addr_max = this.vga_memory_size;\n        }\n        else\n        {\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\n        }\n    }\n    else\n    {\n        this.text_mode_redraw();\n    }\n};\n\nVGAScreen.prototype.complete_replot = function()\n{\n    dbg_log(\"complete replot\", LOG_VGA);\n\n    if(!this.graphical_mode || this.svga_enabled)\n    {\n        return;\n    }\n\n    this.diff_plot_min = 0;\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\n\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.partial_redraw = function(min, max)\n{\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\n};\n\nVGAScreen.prototype.partial_replot = function(min, max)\n{\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\n\n    this.partial_redraw(min, max);\n};\n\nVGAScreen.prototype.reset_diffs = function()\n{\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n};\n\nVGAScreen.prototype.destroy = function()\n{\n\n};\n\nVGAScreen.prototype.vga_bytes_per_line = function()\n{\n    var bytes_per_line = this.offset_register << 2;\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\n    return bytes_per_line;\n};\n\nVGAScreen.prototype.vga_addr_shift_count = function()\n{\n    // Count in multiples of 0x40 for convenience\n    // Left shift 2 for word mode - 2 bytes per dot clock\n    var shift_count = 0x80;\n\n    // Left shift 3 for byte mode - 1 byte per dot clock\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\n\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\n    shift_count -= this.underline_location_register & 0x40;\n\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\n    shift_count -= this.attribute_mode & 0x40;\n\n    return shift_count >>> 6;\n};\n\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\n{\n    var shift_count = this.vga_addr_shift_count();\n\n    // Undo effects of substituted bits 13 and 14\n    // Assumptions:\n    //  - max_scan_line register is set to the values shown below\n    //  - Each scan line stays within the offset alignment\n    //  - No panning and no page flipping after drawing\n    if(~this.crtc_mode & 0x3)\n    {\n        var pixel_addr = addr - this.start_address;\n\n        // Remove substituted bits\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\n\n        // Convert to 1 pixel per address\n        pixel_addr <<= shift_count;\n\n        // Decompose address\n        var row = pixel_addr / this.virtual_width | 0;\n        var col = pixel_addr % this.virtual_width;\n\n        switch(this.crtc_mode & 0x3)\n        {\n            case 0x2:\n                // Alternating rows using bit 13\n                // Assumes max scan line = 1\n                row = row << 1 | (addr >> 13 & 0x1);\n                break;\n            case 0x1:\n                // Alternating rows using bit 14\n                // Assumes max scan line = 3\n                row = row << 1 | (addr >> 14 & 0x1);\n                break;\n            case 0x0:\n                // Cycling through rows using bit 13 and 14\n                // Assumes max scan line = 3\n                row = row << 2 | (addr >> 13 & 0x3);\n                break;\n        }\n\n        // Reassemble address\n        return row * this.virtual_width + col + (this.start_address << shift_count);\n    }\n    else\n    {\n        // Convert to 1 pixel per address\n        return addr << shift_count;\n    }\n};\n\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\n{\n    // Double scanning. The clock to the row scan counter is halved\n    // so it is not affected by the memory address bit substitutions below\n    if(this.max_scan_line & 0x80)\n    {\n        scan_line >>>= 1;\n    }\n\n    // Maximum scan line, aka scan lines per character row\n    // This is the number of repeats - 1 for graphic modes\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\n    scan_line = Math.ceil(scan_line / repeat_factor);\n\n    // Odd and Even Row Scan Counter\n    // Despite repeated address counter values, because bit 13 of the shifted\n    // address is substituted with bit 0 of the row scan counter, a different\n    // display buffer address is generated instead of repeated\n    // Assumes maximum scan line register is set to 2 or 4.\n    // Note: can't assert this as register values may not be fully programmed.\n    if(!(this.crtc_mode & 0x1))\n    {\n        scan_line <<= 1;\n    }\n\n    // Undo effects of substituted bit 14\n    // Assumes maximum scan line register is set to 2 or 4\n    // Note: can't assert this as register values may not be fully programmed.\n    // Other maximum scan line register values would result in weird addressing\n    // anyway\n    if(!(this.crtc_mode & 0x2))\n    {\n        scan_line <<= 1;\n    }\n\n    return scan_line;\n};\n\n/**\n * @param {number} cols_count\n * @param {number} rows_count\n */\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\n{\n    this.max_cols = cols_count;\n    this.max_rows = rows_count;\n\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\n};\n\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\n{\n    var needs_update = !this.stats.is_graphical ||\n        this.stats.bpp !== bpp ||\n        this.screen_width !== width ||\n        this.screen_height !== height ||\n        this.virtual_width !== virtual_width ||\n        this.virtual_height !== virtual_height;\n\n    if(needs_update)\n    {\n        this.screen_width = width;\n        this.screen_height = height;\n        this.virtual_width = virtual_width;\n        this.virtual_height = virtual_height;\n\n        this.stats.bpp = bpp;\n        this.stats.is_graphical = true;\n        this.stats.res_x = width;\n        this.stats.res_y = height;\n\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\n    }\n};\n\nVGAScreen.prototype.update_vga_size = function()\n{\n    if(this.svga_enabled)\n    {\n        return;\n    }\n\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\n        this.horizontal_blank_start);\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\n        this.vertical_blank_start);\n\n    if(!horizontal_characters || !vertical_scans)\n    {\n        // Don't update if width or height is zero.\n        // These happen when registers are not fully configured yet.\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        var screen_width = horizontal_characters << 3;\n\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\n        // of display memory that each logical line occupies.\n        // However, the number of pixels latched, regardless of addressing mode,\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\n        // case 4 pixels).\n        var virtual_width = this.offset_register << 4;\n\n        // Pixel Width / PEL Width / Clock Select\n        if(this.attribute_mode & 0x40)\n        {\n            screen_width >>>= 1;\n            virtual_width >>>= 1;\n        }\n\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\n\n        // The virtual buffer height is however many rows of data that can fit.\n        // Previously drawn graphics outside of current memory address space can\n        // still be drawn by setting start_address. The address at\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\n        // byte of the frame buffer. Verified on some hardware.\n        // Depended on by: Windows 98 start screen\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\n\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\n\n        this.set_size_graphical(screen_width, screen_height, 8,\n            virtual_width, virtual_height);\n\n        this.update_vertical_retrace();\n        this.update_layers();\n    }\n    else\n    {\n        if(this.max_scan_line & 0x80)\n        {\n            // Double scanning means that half of those scan lines\n            // are just repeats\n            vertical_scans >>>= 1;\n        }\n\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\n\n        if(horizontal_characters && height)\n        {\n            this.set_size_text(horizontal_characters, height);\n        }\n    }\n};\n\nVGAScreen.prototype.update_layers = function()\n{\n    if(!this.graphical_mode)\n    {\n        this.text_mode_redraw();\n    }\n\n    if(this.svga_enabled)\n    {\n        this.layers = [];\n        return;\n    }\n\n    if(!this.virtual_width || !this.screen_width)\n    {\n        // Avoid division by zero\n        return;\n    }\n\n    if(!this.palette_source || (this.clocking_mode & 0x20))\n    {\n        // Palette source and screen disable bits = draw nothing\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\n        this.layers = [];\n        this.bus.send(\"screen-clear\");\n        return;\n    }\n\n    var start_addr = this.start_address_latched;\n\n    var pixel_panning = this.horizontal_panning;\n    if(this.attribute_mode & 0x40)\n    {\n        pixel_panning >>>= 1;\n    }\n\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\n\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\n\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\n\n    var split_buffer_height = this.screen_height - split_screen_row;\n\n    this.layers = [];\n\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: 0,\n            buffer_x: 0,\n            buffer_y: start_buffer_row + y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_screen_row,\n        });\n    }\n\n    var start_split_col = 0;\n    if(!(this.attribute_mode & 0x20))\n    {\n        // Pixel panning mode. Allow panning for the lower split screen\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\n    }\n\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: split_screen_row,\n            buffer_x: 0,\n            buffer_y: y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_buffer_height,\n        });\n    }\n};\n\nVGAScreen.prototype.update_vertical_retrace = function()\n{\n    // Emulate behaviour during VSync/VRetrace\n    this.port_3DA_value |= 0x8;\n    if(this.start_address_latched !== this.start_address)\n    {\n        this.start_address_latched = this.start_address;\n        this.update_layers();\n    }\n};\n\nVGAScreen.prototype.update_cursor_scanline = function()\n{\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\n};\n\n/**\n * Attribute controller register / index write\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\n */\nVGAScreen.prototype.port3C0_write = function(value)\n{\n    if(this.attribute_controller_index === -1)\n    {\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\n        this.attribute_controller_index = value & 0x1F;\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\n\n        if(this.palette_source !== (value & 0x20))\n        {\n            // A method of blanking the screen.\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n            this.palette_source = value & 0x20;\n            this.update_layers();\n        }\n    }\n    else\n    {\n        if(this.attribute_controller_index < 0x10)\n        {\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\n            this.dac_map[this.attribute_controller_index] = value;\n\n            if(!(this.attribute_mode & 0x40))\n            {\n                this.complete_redraw();\n            }\n        }\n        else\n        switch(this.attribute_controller_index)\n        {\n            case 0x10:\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\n                if(this.attribute_mode !== value)\n                {\n                    var previous_mode = this.attribute_mode;\n                    this.attribute_mode = value;\n\n                    var is_graphical = (value & 0x1) > 0;\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\n                    {\n                        this.graphical_mode = is_graphical;\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\n                    }\n\n                    if((previous_mode ^ value) & 0x40)\n                    {\n                        // PEL width changed. Pixel Buffer now invalidated\n                        this.complete_replot();\n                    }\n\n                    this.update_vga_size();\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x12:\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\n                if(this.color_plane_enable !== value)\n                {\n                    this.color_plane_enable = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x13:\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\n                if(this.horizontal_panning !== value)\n                {\n                    this.horizontal_panning = value & 0xF;\n                    this.update_layers();\n                }\n                break;\n            case 0x14:\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\n                if(this.color_select !== value)\n                {\n                    this.color_select = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            default:\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\n        }\n\n        this.attribute_controller_index = -1;\n    }\n};\n\nVGAScreen.prototype.port3C0_read = function()\n{\n    dbg_log(\"3C0 read\", LOG_VGA);\n    var result = this.attribute_controller_index | this.palette_source;\n    return result;\n};\n\nVGAScreen.prototype.port3C0_read16 = function()\n{\n    dbg_log(\"3C0 read16\", LOG_VGA);\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\n};\n\nVGAScreen.prototype.port3C1_read = function()\n{\n    if(this.attribute_controller_index < 0x10)\n    {\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\n        return this.dac_map[this.attribute_controller_index];\n    }\n\n    switch(this.attribute_controller_index)\n    {\n        case 0x10:\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\n            return this.attribute_mode;\n        case 0x12:\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\n            return this.color_plane_enable;\n        case 0x13:\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\n            return this.horizontal_panning;\n        case 0x14:\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\n            return this.color_select;\n        default:\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\n    }\n    return -1;\n\n};\n\nVGAScreen.prototype.port3C2_write = function(value)\n{\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\n    this.miscellaneous_output_register = value;\n};\n\nVGAScreen.prototype.port3C4_write = function(value)\n{\n    this.sequencer_index = value;\n};\n\nVGAScreen.prototype.port3C4_read = function()\n{\n    return this.sequencer_index;\n};\n\n/**\n * Sequencer register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\n */\nVGAScreen.prototype.port3C5_write = function(value)\n{\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\n            var previous_clocking_mode = this.clocking_mode;\n            this.clocking_mode = value;\n            if((previous_clocking_mode ^ value) & 0x20)\n            {\n                // Screen disable bit modified\n                this.update_layers();\n            }\n            break;\n        case 0x02:\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\n            this.plane_write_bm = value;\n            break;\n        case 0x04:\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\n            this.sequencer_memory_mode = value;\n            break;\n        default:\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3C5_read = function()\n{\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\n\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            return this.clocking_mode;\n        case 0x02:\n            return this.plane_write_bm;\n        case 0x04:\n            return this.sequencer_memory_mode;\n        case 0x06:\n            return 0x12;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3C7_write = function(index)\n{\n    // index for reading the DAC\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\n    this.dac_color_index_read = index * 3;\n    this.dac_state &= 0x0;\n};\n\nVGAScreen.prototype.port3C7_read = function()\n{\n    // prepared to accept reads or writes\n    return this.dac_state;\n};\n\nVGAScreen.prototype.port3C8_write = function(index)\n{\n    this.dac_color_index_write = index * 3;\n    this.dac_state |= 0x3;\n};\n\nVGAScreen.prototype.port3C8_read = function()\n{\n    return this.dac_color_index_write / 3 | 0;\n};\n\n/**\n * DAC color palette register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\n */\nVGAScreen.prototype.port3C9_write = function(color_byte)\n{\n    var index = this.dac_color_index_write / 3 | 0,\n        offset = this.dac_color_index_write % 3,\n        color = this.vga256_palette[index];\n\n    color_byte = (color_byte & 0x3F) * 255 / 63 | 0;\n\n    if(offset === 0)\n    {\n        color = color & ~0xFF0000 | color_byte << 16;\n    }\n    else if(offset === 1)\n    {\n        color = color & ~0xFF00 | color_byte << 8;\n    }\n    else\n    {\n        color = color & ~0xFF | color_byte;\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\n    }\n\n    if(this.vga256_palette[index] !== color)\n    {\n        this.vga256_palette[index] = color;\n        this.complete_redraw();\n    }\n    this.dac_color_index_write++;\n};\n\nVGAScreen.prototype.port3C9_read = function()\n{\n    dbg_log(\"3C9 read\", LOG_VGA);\n\n    var index = this.dac_color_index_read / 3 | 0;\n    var offset = this.dac_color_index_read % 3;\n    var color = this.vga256_palette[index];\n\n    this.dac_color_index_read++;\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\n};\n\nVGAScreen.prototype.port3CC_read = function()\n{\n    dbg_log(\"3CC read\", LOG_VGA);\n    return this.miscellaneous_output_register;\n};\n\nVGAScreen.prototype.port3CE_write = function(value)\n{\n    this.graphics_index = value;\n};\n\nVGAScreen.prototype.port3CE_read = function()\n{\n    return this.graphics_index;\n};\n\n/**\n * Graphics controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\n */\nVGAScreen.prototype.port3CF_write = function(value)\n{\n    switch(this.graphics_index)\n    {\n        case 0:\n            this.planar_setreset = value;\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\n            break;\n        case 1:\n            this.planar_setreset_enable = value;\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\n            break;\n        case 2:\n            this.color_compare = value;\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\n            break;\n        case 3:\n            this.planar_rotate_reg = value;\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\n            break;\n        case 4:\n            this.plane_read = value;\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\n            break;\n        case 5:\n            var previous_planar_mode = this.planar_mode;\n            this.planar_mode = value;\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\n            if((previous_planar_mode ^ value) & 0x60)\n            {\n                // Shift mode modified. Pixel buffer invalidated\n                this.complete_replot();\n            }\n            break;\n        case 6:\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\n            if(this.miscellaneous_graphics_register !== value)\n            {\n                this.miscellaneous_graphics_register = value;\n                this.update_vga_size();\n            }\n            break;\n        case 7:\n            this.color_dont_care = value;\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\n            break;\n        case 8:\n            this.planar_bitmap = value;\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\n            break;\n        default:\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3CF_read = function()\n{\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\n\n    switch(this.graphics_index)\n    {\n        case 0:\n            return this.planar_setreset;\n        case 1:\n            return this.planar_setreset_enable;\n        case 2:\n            return this.color_compare;\n        case 3:\n            return this.planar_rotate_reg;\n        case 4:\n            return this.plane_read;\n        case 5:\n            return this.planar_mode;\n        case 6:\n            return this.miscellaneous_graphics_register;\n        case 7:\n            return this.color_dont_care;\n        case 8:\n            return this.planar_bitmap;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3D4_write = function(register)\n{\n    this.index_crtc = register;\n};\n\n/**\n * CRT controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\n */\nVGAScreen.prototype.port3D5_write = function(value)\n{\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\n            if(this.horizontal_display_enable_end !== value)\n            {\n                this.horizontal_display_enable_end = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x2:\n            if(this.horizontal_blank_start !== value)\n            {\n                this.horizontal_blank_start = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x7:\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\n            this.vertical_display_enable_end &= 0xFF;\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\n            {\n                this.update_vga_size();\n            }\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n            this.update_layers();\n            break;\n        case 0x8:\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\n            this.preset_row_scan = value;\n            this.update_layers();\n            break;\n        case 0x9:\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\n            this.max_scan_line = value;\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n\n            this.update_layers();\n            break;\n        case 0xA:\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_start = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xB:\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_end = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xC:\n            if((this.start_address >> 8 & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff | value << 8;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xD:\n            if((this.start_address & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff00 | value;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xE:\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\n            this.update_cursor();\n            break;\n        case 0xF:\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\n            this.update_cursor();\n            break;\n        case 0x12:\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\n            if((this.vertical_display_enable_end & 0xFF) !== value)\n            {\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x13:\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\n            if(this.offset_register !== value)\n            {\n                this.offset_register = value;\n                this.update_vga_size();\n\n                if(~this.crtc_mode & 0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // virtual width, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x14:\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\n            if(this.underline_location_register !== value)\n            {\n                var previous_underline = this.underline_location_register;\n\n                this.underline_location_register = value;\n                this.update_vga_size();\n\n                if((previous_underline ^ value) & 0x40)\n                {\n                    // Doubleword addressing changed. Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x15:\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\n            if((this.vertical_blank_start & 0xFF) !== value)\n            {\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x17:\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\n            if(this.crtc_mode !== value)\n            {\n                var previous_mode = this.crtc_mode;\n\n                this.crtc_mode = value;\n                this.update_vga_size();\n\n                if((previous_mode ^ value) & 0x43)\n                {\n                    // Word/byte addressing changed or address substitution changed.\n                    // Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x18:\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\n            this.line_compare = (this.line_compare & 0x300) | value;\n            this.update_layers();\n            break;\n        default:\n            if(this.index_crtc < this.crtc.length)\n            {\n                this.crtc[this.index_crtc] = value;\n            }\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\n    }\n\n};\n\nVGAScreen.prototype.port3D5_read = function()\n{\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\n\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            return this.horizontal_display_enable_end;\n        case 0x2:\n            return this.horizontal_blank_start;\n        case 0x7:\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\n                (this.vertical_blank_start >> 5 & 0x8) |\n                (this.line_compare >> 4 & 0x10) |\n                (this.vertical_display_enable_end >> 3 & 0x40);\n        case 0x8:\n            return this.preset_row_scan;\n        case 0x9:\n            return this.max_scan_line;\n        case 0xA:\n            return this.cursor_scanline_start;\n        case 0xB:\n            return this.cursor_scanline_end;\n        case 0xC:\n            return this.start_address & 0xFF;\n        case 0xD:\n            return this.start_address >> 8;\n        case 0xE:\n            return this.cursor_address >> 8;\n        case 0xF:\n            return this.cursor_address & 0xFF;\n        case 0x12:\n            return this.vertical_display_enable_end & 0xFF;\n        case 0x13:\n            return this.offset_register;\n        case 0x14:\n            return this.underline_location_register;\n        case 0x15:\n            return this.vertical_blank_start & 0xFF;\n        case 0x17:\n            return this.crtc_mode;\n        case 0x18:\n            return this.line_compare & 0xFF;\n    }\n\n    if(this.index_crtc < this.crtc.length)\n    {\n        return this.crtc[this.index_crtc];\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nVGAScreen.prototype.port3DA_read = function()\n{\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\n\n    var value = this.port_3DA_value;\n\n    // Status register, bit 3 set by update_vertical_retrace\n    // during screen-fill-buffer\n    if(!this.graphical_mode)\n    {\n        // But screen-fill-buffer may not get triggered in text mode\n        // so toggle it manually here\n        if(this.port_3DA_value & 1)\n        {\n            this.port_3DA_value ^= 8;\n        }\n        this.port_3DA_value ^= 1;\n    }\n    else\n    {\n        this.port_3DA_value ^= 1;\n        this.port_3DA_value &= 1;\n    }\n    this.attribute_controller_index = -1;\n    return value;\n};\n\nVGAScreen.prototype.svga_bytes_per_line = function()\n{\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\n\n    return this.svga_width * bits / 8;\n};\n\nVGAScreen.prototype.port1CE_write = function(value)\n{\n    this.dispi_index = value;\n};\n\nVGAScreen.prototype.port1CF_write = function(value)\n{\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\n\n    switch(this.dispi_index)\n    {\n        case 1:\n            this.svga_width = value;\n            if(this.svga_width > MAX_XRES)\n            {\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\n                this.svga_width = MAX_XRES;\n            }\n            break;\n        case 2:\n            this.svga_height = value;\n            if(this.svga_height > MAX_YRES)\n            {\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\n                this.svga_height = MAX_YRES;\n            }\n            break;\n        case 3:\n            this.svga_bpp = value;\n            break;\n        case 4:\n            // enable, options\n            this.svga_enabled = (value & 1) === 1;\n            this.dispi_enable_value = value;\n            break;\n        case 5:\n            this.svga_bank_offset = value << 16;\n            break;\n        case 9:\n            // y offset\n            this.svga_offset = value * this.svga_bytes_per_line();\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\n            this.complete_redraw();\n            break;\n        default:\n    }\n\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\n    {\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\n        this.svga_enabled = false;\n    }\n\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\n               this.svga_bpp === 24 || this.svga_bpp === 32,\n               \"unexpected svga bpp: \" + this.svga_bpp);\n\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\n\n    if(this.svga_enabled && this.dispi_index === 4)\n    {\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\n        this.bus.send(\"screen-set-mode\", true);\n        this.graphical_mode = true;\n        this.graphical_mode_is_linear = true;\n    }\n\n    if(!this.svga_enabled)\n    {\n        this.svga_bank_offset = 0;\n    }\n\n    this.update_layers();\n};\n\nVGAScreen.prototype.port1CF_read = function()\n{\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\n    return this.svga_register_read(this.dispi_index);\n};\n\nVGAScreen.prototype.svga_register_read = function(n)\n{\n    switch(n)\n    {\n        case 0:\n            // id\n            return 0xB0C0;\n        case 1:\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\n        case 2:\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\n        case 3:\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\n        case 4:\n            return this.dispi_enable_value;\n        case 5:\n            return this.svga_bank_offset >>> 16;\n        case 6:\n            // virtual width\n            if(this.screen_width)\n            {\n                return this.screen_width;\n            }\n            else\n            {\n                return 1; // seabios/windows98 divide exception\n            }\n            break;\n\n        case 8:\n            // x offset\n            return 0;\n        case 0x0A:\n            // memory size in 64 kilobyte banks\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\n    }\n\n    return 0xFF;\n};\n\n/**\n * Transfers graphics from VGA Planes to the Pixel Buffer\n * VGA Planes represent data stored on actual hardware.\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\n */\nVGAScreen.prototype.vga_replot = function()\n{\n    // Round to multiple of 8 towards extreme\n    var start = this.diff_plot_min & ~0xF;\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\n\n    var addr_shift = this.vga_addr_shift_count();\n    var addr_substitution = ~this.crtc_mode & 0x3;\n\n    var shift_mode = this.planar_mode & 0x60\n    var pel_width = this.attribute_mode & 0x40;\n\n    for(var pixel_addr = start; pixel_addr <= end;)\n    {\n        var addr = pixel_addr >>> addr_shift;\n        if(addr_substitution)\n        {\n            var row = pixel_addr / this.virtual_width | 0;\n            var col = pixel_addr - this.virtual_width * row;\n\n            switch(addr_substitution)\n            {\n                case 0x1:\n                    // Alternating rows using bit 13\n                    // Assumes max scan line = 1\n                    addr = (row & 0x1) << 13;\n                    row >>>= 1;\n                    break;\n                case 0x2:\n                    // Alternating rows using bit 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x1) << 14;\n                    row >>>= 1;\n                    break;\n                case 0x3:\n                    // Cycling through rows using bit 13 and 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x3) << 13;\n                    row >>>= 2;\n                    break;\n            }\n\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\n        }\n\n        var byte0 = this.plane0[addr];\n        var byte1 = this.plane1[addr];\n        var byte2 = this.plane2[addr];\n        var byte3 = this.plane3[addr];\n\n        var shift_loads = new Uint8Array(8);\n        switch(shift_mode)\n        {\n            // Planar Shift Mode\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\n            case 0x00:\n                // Shift these, so that the bits for the color are in\n                // the correct position in the for loop\n                byte0 <<= 0;\n                byte1 <<= 1;\n                byte2 <<= 2;\n                byte3 <<= 3;\n\n                for(var i = 7; i >= 0; i--)\n                {\n                    shift_loads[7 - i] =\n                            byte0 >> i & 1 |\n                            byte1 >> i & 2 |\n                            byte2 >> i & 4 |\n                            byte3 >> i & 8;\n                }\n                break;\n\n            // Packed Shift Mode, aka Interleaved Shift Mode\n            // Video Modes 4h and 5h\n            case 0x20:\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\n\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\n                break;\n\n            // 256-Color Shift Mode\n            // Video Modes 13h and unchained 256 color\n            case 0x40:\n            case 0x60:\n                shift_loads[0] = byte0 >> 4 & 0xF;\n                shift_loads[1] = byte0 >> 0 & 0xF;\n                shift_loads[2] = byte1 >> 4 & 0xF;\n                shift_loads[3] = byte1 >> 0 & 0xF;\n                shift_loads[4] = byte2 >> 4 & 0xF;\n                shift_loads[5] = byte2 >> 0 & 0xF;\n                shift_loads[6] = byte3 >> 4 & 0xF;\n                shift_loads[7] = byte3 >> 0 & 0xF;\n                break;\n        }\n\n        if(pel_width)\n        {\n            // Assemble from two sets of 4 bits.\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\n            {\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\n            }\n        }\n        else\n        {\n            for(var i = 0; i < 8; i++, pixel_addr++)\n            {\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\n            }\n        }\n    }\n};\n\n/**\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\n * obtain the final 32 bit color that the Canvas API uses.\n */\nVGAScreen.prototype.vga_redraw = function()\n{\n    var start = this.diff_addr_min;\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\n    var buffer = this.dest_buffer;\n\n    // Closure compiler\n    if(!buffer) return;\n\n    var mask = 0xFF;\n    var colorset = 0x00;\n    if(this.attribute_mode & 0x80)\n    {\n        // Palette bits 5/4 select\n        mask &= 0xCF;\n        colorset |= this.color_select << 4 & 0x30;\n    }\n\n    if(this.attribute_mode & 0x40)\n    {\n        // 8 bit mode\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n    else\n    {\n        // 4 bit mode\n\n        // Palette bits 7/6 select\n        mask &= 0x3F;\n        colorset |= this.color_select << 4 & 0xC0;\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\n            var color256 = (this.dac_map[color16] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n};\n\nVGAScreen.prototype.screen_fill_buffer = function()\n{\n    if(!this.graphical_mode)\n    {\n        // text mode\n        // Update retrace behaviour anyway - programs waiting for signal before\n        // changing to graphical mode\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(!this.dest_buffer)\n    {\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\n        // Update retrace behaviour anyway\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\n    {\n        // No pixels to update\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.svga_enabled)\n    {\n        var bpp = this.svga_bpp;\n\n        var buffer = this.dest_buffer;\n\n        var start = this.diff_addr_min;\n        var end = this.diff_addr_max;\n\n        switch(bpp)\n        {\n            case 32:\n                var start_pixel = start >> 2;\n                var end_pixel = (end >> 2) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var dword = this.svga_memory32[i];\n\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\n                }\n                break;\n\n            case 24:\n                var start_pixel = start / 3 | 0;\n                var end_pixel = (end / 3 | 0) + 1;\n                var addr = start_pixel * 3;\n\n                for(var i = start_pixel; addr < end; i++)\n                {\n                    var red = this.svga_memory[addr++];\n                    var green = this.svga_memory[addr++];\n                    var blue = this.svga_memory[addr++];\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 16:\n                var start_pixel = start >> 1;\n                var end_pixel = (end >> 1) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var word = this.svga_memory16[i];\n\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 8:\n                var start_pixel = start;\n                var end_pixel = end + 1;\n\n                for(var i = start; i <= end; i++)\n                {\n                    var color = this.vga256_palette[this.svga_memory[i]];\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n                }\n                break;\n\n            default:\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\n        }\n\n        var min_y = start_pixel / this.svga_width | 0;\n        var max_y = end_pixel / this.svga_width | 0;\n\n        this.bus.send(\"screen-fill-buffer-end\", [{\n            screen_x: 0, screen_y: min_y,\n            buffer_x: 0, buffer_y: min_y,\n            buffer_width: this.svga_width,\n            buffer_height: max_y - min_y + 1,\n        }]);\n    }\n    else\n    {\n        this.vga_replot();\n        this.vga_redraw();\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n    }\n\n    this.reset_diffs();\n    this.update_vertical_retrace();\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction PS2(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @type {boolean} */\n    this.enable_mouse_stream = false;\n\n    /** @type {boolean} */\n    this.use_mouse = false;\n\n    /** @type {boolean} */\n    this.have_mouse = true;\n\n    /** @type {number} */\n    this.mouse_delta_x = 0;\n    /** @type {number} */\n    this.mouse_delta_y = 0;\n    /** @type {number} */\n    this.mouse_clicks = 0;\n\n    /** @type {boolean} */\n    this.have_keyboard = true;\n\n    /** @type {boolean} */\n    this.enable_keyboard_stream = false;\n\n    /** @type {boolean} */\n    this.next_is_mouse_command = false;\n\n    /** @type {boolean} */\n    this.next_read_sample = false;\n\n    /** @type {boolean} */\n    this.next_read_led = false;\n\n    /** @type {boolean} */\n    this.next_handle_scan_code_set = false;\n\n    /** @type {boolean} */\n    this.next_read_rate = false;\n\n    /** @type {boolean} */\n    this.next_read_resolution = false;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.kbd_buffer = new ByteQueue(1024);\n\n    this.last_port60_byte = 0;\n\n    /** @type {number} */\n    this.sample_rate = 100;\n\n    /** @type {number} */\n    this.resolution = 4;\n\n    /** @type {boolean} */\n    this.scaling2 = false;\n\n    /** @type {number} */\n    this.last_mouse_packet = -1;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.mouse_buffer = new ByteQueue(1024);\n\n\n    this.bus.register(\"keyboard-code\", function(code)\n    {\n        this.kbd_send_code(code);\n    }, this);\n\n    this.bus.register(\"mouse-click\", function(data)\n    {\n        this.mouse_send_click(data[0], data[1], data[2]);\n    }, this);\n\n    this.bus.register(\"mouse-delta\", function(data)\n    {\n        this.mouse_send_delta(data[0], data[1]);\n    }, this);\n\n    this.bus.register(\"mouse-wheel\", function(data)\n    {\n        // TODO: Mouse Wheel\n        // http://www.computer-engineering.org/ps2mouse/\n    }, this);\n\n    this.command_register = 1 | 4;\n    this.read_output_register = false;\n    this.read_command_register = false;\n\n    cpu.io.register_read(0x60, this, this.port60_read);\n    cpu.io.register_read(0x64, this, this.port64_read);\n\n    cpu.io.register_write(0x60, this, this.port60_write);\n    cpu.io.register_write(0x64, this, this.port64_write);\n}\n\nPS2.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.enable_mouse_stream;\n    state[1] = this.use_mouse;\n    state[2] = this.have_mouse;\n    state[3] = this.mouse_delta_x;\n    state[4] = this.mouse_delta_y;\n    state[5] = this.mouse_clicks;\n    state[6] = this.have_keyboard;\n    state[7] = this.enable_keyboard_stream;\n    state[8] = this.next_is_mouse_command;\n    state[9] = this.next_read_sample;\n    state[10] = this.next_read_led;\n    state[11] = this.next_handle_scan_code_set;\n    state[12] = this.next_read_rate;\n    state[13] = this.next_read_resolution;\n    //state[14] = this.kbd_buffer;\n    state[15] = this.last_port60_byte;\n    state[16] = this.sample_rate;\n    state[17] = this.resolution;\n    state[18] = this.scaling2;\n    //state[19] = this.mouse_buffer;\n    state[20] = this.command_register;\n    state[21] = this.read_output_register;\n    state[22] = this.read_command_register;\n\n    return state;\n};\n\nPS2.prototype.set_state = function(state)\n{\n    this.enable_mouse_stream = state[0];\n    this.use_mouse = state[1];\n    this.have_mouse = state[2];\n    this.mouse_delta_x = state[3];\n    this.mouse_delta_y = state[4];\n    this.mouse_clicks = state[5];\n    this.have_keyboard = state[6];\n    this.enable_keyboard_stream = state[7];\n    this.next_is_mouse_command = state[8];\n    this.next_read_sample = state[9];\n    this.next_read_led = state[10];\n    this.next_handle_scan_code_set = state[11];\n    this.next_read_rate = state[12];\n    this.next_read_resolution = state[13];\n    //this.kbd_buffer = state[14];\n    this.last_port60_byte = state[15];\n    this.sample_rate = state[16];\n    this.resolution = state[17];\n    this.scaling2 = state[18];\n    //this.mouse_buffer = state[19];\n    this.command_register = state[20];\n    this.read_output_register = state[21];\n    this.read_command_register = state[22];\n\n    this.bus.send(\"mouse-enable\", this.use_mouse);\n};\n\nPS2.prototype.mouse_irq = function()\n{\n    if(this.command_register & 2)\n    {\n        this.cpu.device_raise_irq(12);\n    }\n};\n\nPS2.prototype.kbd_irq = function()\n{\n    if(this.command_register & 1)\n    {\n        this.cpu.device_raise_irq(1);\n    }\n};\n\nPS2.prototype.kbd_send_code = function(code)\n{\n    if(this.enable_keyboard_stream)\n    {\n        this.kbd_buffer.push(code);\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    // note: delta_x or delta_y can be floating point numbers\n\n    var factor = this.resolution * this.sample_rate / 80;\n\n    this.mouse_delta_x += delta_x * factor;\n    this.mouse_delta_y += delta_y * factor;\n\n    if(this.enable_mouse_stream)\n    {\n        var change_x = this.mouse_delta_x | 0,\n            change_y = this.mouse_delta_y | 0;\n\n        if(change_x || change_y)\n        {\n            var now = Date.now();\n\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\n            //{\n            //    // TODO: set timeout\n            //    return;\n            //}\n\n            this.mouse_delta_x -= change_x;\n            this.mouse_delta_y -= change_y;\n\n            this.send_mouse_packet(change_x, change_y);\n        }\n    }\n};\n\nPS2.prototype.mouse_send_click = function(left, middle, right)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    this.mouse_clicks = left | right << 1 | middle << 2;\n\n    if(this.enable_mouse_stream)\n    {\n        this.send_mouse_packet(0, 0);\n    }\n};\n\nPS2.prototype.send_mouse_packet = function(dx, dy)\n{\n    var info_byte =\n            (dy < 0) << 5 |\n            (dx < 0) << 4 |\n            1 << 3 |\n            this.mouse_clicks,\n        delta_x = dx,\n        delta_y = dy;\n\n    this.last_mouse_packet = Date.now();\n\n    //if(this.scaling2)\n    //{\n    //    // only in automatic packets, not 0xEB requests\n    //    delta_x = this.apply_scaling2(delta_x);\n    //    delta_y = this.apply_scaling2(delta_y);\n    //}\n\n    this.mouse_buffer.push(info_byte);\n    this.mouse_buffer.push(delta_x);\n    this.mouse_buffer.push(delta_y);\n\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\n\n    this.mouse_irq();\n};\n\nPS2.prototype.apply_scaling2 = function(n)\n{\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\n    var abs = Math.abs(n),\n        sign = n >> 31;\n\n    switch(abs)\n    {\n        case 0:\n        case 1:\n        case 3:\n            return n;\n        case 2:\n            return sign;\n        case 4:\n            return 6 * sign;\n        case 5:\n            return 9 * sign;\n        default:\n            return n << 1;\n    }\n};\n\nPS2.prototype.next_byte_is_aux = function()\n{\n    return this.mouse_buffer.length && !this.kbd_buffer.length;\n};\n\nPS2.prototype.port60_read = function()\n{\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\n\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\n    {\n        // should not happen\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\n        return this.last_port60_byte;\n    }\n\n    var do_mouse_buffer = this.next_byte_is_aux();\n\n    if(do_mouse_buffer)\n    {\n        this.cpu.device_lower_irq(12);\n        this.last_port60_byte = this.mouse_buffer.shift();\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\n\n        if(this.mouse_buffer.length >= 1)\n        {\n            this.mouse_irq();\n        }\n    }\n    else\n    {\n        this.cpu.device_lower_irq(1);\n        this.last_port60_byte = this.kbd_buffer.shift();\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\n\n        if(this.kbd_buffer.length >= 1)\n        {\n            this.kbd_irq();\n        }\n    }\n\n    return this.last_port60_byte;\n};\n\nPS2.prototype.port64_read = function()\n{\n    // status port\n\n    var status_byte = 0x10;\n\n    if(this.mouse_buffer.length || this.kbd_buffer.length)\n    {\n        status_byte |= 1;\n    }\n    if(this.next_byte_is_aux())\n    {\n        status_byte |= 0x20;\n    }\n\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\n\n    return status_byte;\n};\n\nPS2.prototype.port60_write = function(write_byte)\n{\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\n\n    if(this.read_command_register)\n    {\n        this.command_register = write_byte;\n        this.read_command_register = false;\n\n        // not sure, causes \"spurious ack\" in Linux\n        //this.kbd_buffer.push(0xFA);\n        //this.kbd_irq();\n\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\n    }\n    else if(this.read_output_register)\n    {\n        this.read_output_register = false;\n\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(write_byte);\n        this.mouse_irq();\n    }\n    else if(this.next_read_sample)\n    {\n        this.next_read_sample = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        this.sample_rate = write_byte;\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\n        if(!this.sample_rate)\n        {\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\n            this.sample_rate = 100;\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_resolution)\n    {\n        this.next_read_resolution = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        if(write_byte > 3)\n        {\n            this.resolution = 4;\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\n        }\n        else\n        {\n            this.resolution = 1 << write_byte;\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_led)\n    {\n        // nope\n        this.next_read_led = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_handle_scan_code_set)\n    {\n        this.next_handle_scan_code_set = false;\n\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n\n        if(write_byte)\n        {\n            // set scan code set\n        }\n        else\n        {\n            this.kbd_buffer.push(2);\n        }\n    }\n    else if(this.next_read_rate)\n    {\n        // nope\n        this.next_read_rate = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_is_mouse_command)\n    {\n        this.next_is_mouse_command = false;\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        if(!this.have_mouse)\n        {\n            return;\n        }\n\n        // send ack\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xE6:\n            // set scaling to 1:1\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\n            this.scaling2 = false;\n            break;\n        case 0xE7:\n            // set scaling to 2:1\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\n            this.scaling2 = true;\n            break;\n        case 0xE8:\n            // set mouse resolution\n            this.next_read_resolution = true;\n            break;\n        case 0xE9:\n            // status request - send one packet\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xEB:\n            // request single packet\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xF2:\n            //  MouseID Byte\n            this.mouse_buffer.push(0);\n            this.mouse_buffer.push(0);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF3:\n            // sample rate\n            this.next_read_sample = true;\n            break;\n        case 0xF4:\n            // enable streaming\n            this.enable_mouse_stream = true;\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF5:\n            // disable streaming\n            this.enable_mouse_stream = false;\n            break;\n        case 0xF6:\n            // set defaults\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n            break;\n        case 0xFF:\n            // reset, send completion code\n            dbg_log(\"Mouse reset\", LOG_PS2);\n            this.mouse_buffer.push(0xAA);\n            this.mouse_buffer.push(0);\n\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n\n        default:\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.mouse_irq();\n    }\n    else\n    {\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        // send ack\n        this.mouse_buffer.clear();\n        this.kbd_buffer.clear();\n        this.kbd_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xED:\n            this.next_read_led = true;\n            break;\n        case 0xF0:\n            // get/set scan code set\n            this.next_handle_scan_code_set = true;\n            break;\n        case 0xF2:\n            // identify\n            this.kbd_buffer.push(0xAB);\n            this.kbd_buffer.push(83);\n            break;\n        case 0xF3:\n            //  Set typematic rate and delay\n            this.next_read_rate = true;\n            break;\n        case 0xF4:\n            // enable scanning\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = true;\n            break;\n        case 0xF5:\n            // disable scanning\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = false;\n            break;\n        case 0xF6:\n            // reset defaults\n            //this.enable_keyboard_stream = false;\n            break;\n        case 0xFF:\n            this.kbd_buffer.clear();\n            this.kbd_buffer.push(0xFA);\n            this.kbd_buffer.push(0xAA);\n            this.kbd_buffer.push(0);\n            break;\n        default:\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.port64_write = function(write_byte)\n{\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\n\n    switch(write_byte)\n    {\n    case 0x20:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(this.command_register);\n        break;\n    case 0x60:\n        this.read_command_register = true;\n        break;\n    case 0xD3:\n        this.read_output_register = true;\n        break;\n    case 0xD4:\n        this.next_is_mouse_command = true;\n        break;\n    case 0xA7:\n        // Disable second port\n        dbg_log(\"Disable second port\", LOG_PS2);\n        this.command_register |= 0x20;\n        break;\n    case 0xA8:\n        // Enable second port\n        dbg_log(\"Enable second port\", LOG_PS2);\n        this.command_register &= ~0x20;\n        break;\n    case 0xA9:\n        // test second ps/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        break;\n    case 0xAA:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0x55);\n        break;\n    case 0xAB:\n        // Test first PS/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        break;\n    case 0xAD:\n        // Disable Keyboard\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\n        this.command_register |= 0x10;\n        break;\n    case 0xAE:\n        // Enable Keyboard\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\n        this.command_register &= ~0x10;\n        break;\n    case 0xFE:\n        dbg_log(\"CPU reboot via PS2\");\n        this.cpu.reboot_internal();\n        break;\n    default:\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar PIC_LOG_VERBOSE = false;\n\n/**\n * Programmable Interrupt Controller\n * http://stanislavs.org/helppc/8259.html\n *\n * @constructor\n * @param {CPU} cpu\n * @param {PIC=} master\n */\nfunction PIC(cpu, master)\n{\n    /**\n     * all irqs off\n     * @type {number}\n     */\n    this.irq_mask = 0;\n\n    /**\n     * @type {number}\n     *\n     * Bogus default value (both master and slave mapped to 0).\n     * Will be initialized by the BIOS\n     */\n    this.irq_map = 0;\n\n    /**\n     * in-service register\n     * Holds interrupts that are currently being serviced\n     * @type {number}\n     */\n    this.isr = 0;\n\n    /**\n     * interrupt request register\n     * Holds interrupts that have been requested\n     * @type {number}\n     */\n    this.irr = 0;\n\n    this.irq_value = 0;\n\n    /**\n     * @type {number}\n     */\n    this.requested_irq = -1;\n\n    this.master = master;\n    this.is_master = this.master === undefined;\n    this.slave = undefined;\n\n    this.name = this.is_master ? \"master\" : \"slave \";\n\n    this.expect_icw4 = false;\n    this.state = 0;\n    this.read_isr = 0;\n    this.auto_eoi = 1;\n    this.special_mask_mode = 0;\n\n    this.elcr = 0;\n\n    this.cpu = cpu;\n\n    // Checking for callable interrupts:\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\n\n    // triggering irqs:\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\n\n\n    if(this.is_master)\n    {\n        this.slave = new PIC(this.cpu, this);\n\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\n\n            this.requested_irq = irq_number;\n            this.cpu.handle_irqs();\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\n            if(this.requested_irq === 2)\n            {\n                this.slave.acknowledge_irq();\n            }\n            else\n            {\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n            }\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n    else\n    {\n        // is slave\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\n            this.requested_irq = irq_number;\n            this.master.set_irq(2);\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.master.irq_value &= ~(1 << 2);\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            this.master.irq_value &= ~(1 << 2);\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n\n    this.dump = function()\n    {\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\n\n        if(this.is_master)\n        {\n            this.slave.dump();\n        }\n    };\n\n    var io_base;\n    var iobase_high;\n    if(this.is_master)\n    {\n        io_base = 0x20;\n        iobase_high = 0x4D0;\n    }\n    else\n    {\n        io_base = 0xA0;\n        iobase_high = 0x4D1;\n    }\n\n    this.cpu.io.register_write(io_base, this, this.port20_write);\n    this.cpu.io.register_read(io_base, this, this.port20_read);\n\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\n\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\n\n\n    if(this.is_master)\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n\n            if(irq_number >= 8)\n            {\n                this.slave.set_irq(irq_number - 8);\n                return;\n            }\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\n            }\n\n            if(irq_number >= 8)\n            {\n                this.slave.clear_irq(irq_number - 8);\n                return;\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n    else\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n\n    this.get_isr = function()\n    {\n        return this.isr;\n    };\n}\n\nPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.irq_mask;\n    state[1] = this.irq_map;\n    state[2] = this.isr;\n    state[3] = this.irr;\n    state[4] = this.is_master;\n    state[5] = this.slave;\n    state[6] = this.expect_icw4;\n    state[7] = this.state;\n    state[8] = this.read_isr;\n    state[9] = this.auto_eoi;\n    state[10] = this.elcr;\n\n    return state;\n};\n\nPIC.prototype.set_state = function(state)\n{\n    this.irq_mask = state[0];\n    this.irq_map = state[1];\n    this.isr = state[2];\n    this.irr = state[3];\n    this.is_master = state[4];\n    this.slave = state[5];\n    this.expect_icw4 = state[6];\n    this.state = state[7];\n    this.read_isr = state[8];\n    this.auto_eoi = state[9];\n    this.elcr = state[10];\n};\n\nPIC.prototype.port20_write = function(data_byte)\n{\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\n    if(data_byte & 0x10) // xxxx1xxx\n    {\n        // icw1\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\n        this.isr = 0;\n        this.irr = 0;\n        this.irq_mask = 0;\n        this.irq_value = 0;\n        this.auto_eoi = 1;\n        this.requested_irq = -1;\n\n        this.expect_icw4 = data_byte & 1;\n        this.state = 1;\n    }\n    else if(data_byte & 8) // xxx01xxx\n    {\n        // ocw3\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\n        if(data_byte & 2)\n        {\n            this.read_isr = data_byte & 1;\n        }\n        if(data_byte & 4)\n        {\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\n        }\n        if(data_byte & 0x40)\n        {\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\n        }\n    }\n    else // xxx00xxx\n    {\n        // ocw2\n        // end of interrupt\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\n\n        var eoi_type = data_byte >> 5;\n\n        if(eoi_type === 1)\n        {\n            // non-specific eoi\n            this.isr &= this.isr - 1;\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\n        }\n        else if(eoi_type === 3)\n        {\n            // specific eoi\n            this.isr &= ~(1 << (data_byte & 7));\n        }\n        else if((data_byte & 0xC8) === 0xC0)\n        {\n            // os2 v4\n            let priority = data_byte & 7;\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\n        }\n        else\n        {\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\n            dbg_assert(false);\n            this.isr &= this.isr - 1;\n        }\n\n        this.check_irqs();\n    }\n};\n\nPIC.prototype.port20_read = function()\n{\n    if(this.read_isr)\n    {\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\n        return this.isr;\n    }\n    else\n    {\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\n        return this.irr;\n    }\n};\n\nPIC.prototype.port21_write = function(data_byte)\n{\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\n    if(this.state === 0)\n    {\n        if(this.expect_icw4)\n        {\n            // icw4\n            this.expect_icw4 = false;\n            this.auto_eoi = data_byte & 2;\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\n\n            if((data_byte & 1) === 0)\n            {\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\n            }\n        }\n        else\n        {\n            // ocw1\n            this.irq_mask = ~data_byte;\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\n                        \" (\" + this.name + \")\", LOG_PIC);\n            }\n\n            this.check_irqs();\n        }\n    }\n    else if(this.state === 1)\n    {\n        // icw2\n        this.irq_map = data_byte;\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\n                \" (\" + this.name + \")\", LOG_PIC);\n        this.state++;\n    }\n    else if(this.state === 2)\n    {\n        // icw3\n        this.state = 0;\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\n    }\n};\n\nPIC.prototype.port21_read = function()\n{\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\n    return ~this.irq_mask & 0xFF;\n};\n\nPIC.prototype.port4D0_read = function()\n{\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\n    return this.elcr;\n};\n\nPIC.prototype.port4D0_write = function(value)\n{\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\n    // set by seabios to 00 0C (only set for pci interrupts)\n    this.elcr = value;\n};\n\n","\"use strict\";\n\n/*\n * Serial ports\n * http://wiki.osdev.org/UART\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\n * https://www.freebsd.org/doc/en/articles/serial-uart/\n */\n\n/** @const */\nvar DLAB = 0x80;\n\n\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\n\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\n/** @const */var UART_IIR_NO_INT = 0x01;\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\n\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {number} port\n * @param {BusConnector} bus\n */\nfunction UART(cpu, port, bus)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.ints = 1 << UART_IIR_THRI;\n\n    this.baud_rate = 0;\n\n    this.line_control = 0;\n\n    // line status register\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\n\n    this.fifo_control = 0;\n\n    // interrupts enable\n    this.ier = 0;\n\n    // interrupt identification register\n    this.iir = UART_IIR_NO_INT;\n\n    this.modem_control = 0;\n    this.modem_status = 0;\n\n    this.scratch_register = 0;\n\n    this.irq = 0;\n\n    this.input = new ByteQueue(4096);\n\n    this.current_line = [];\n\n    if(port === 0x3E8 || port === 0x3F8)\n    {\n        this.irq = 4;\n    }\n    else if(port === 0x3E8 || port === 0x3E8)\n    {\n        this.irq = 3;\n    }\n    else\n    {\n        dbg_log(\"Invalid port: \" + h(port), LOG_SERIAL);\n        return;\n    }\n\n    this.bus.register(\"serial0-input\", function(data)\n    {\n        this.data_received(data);\n    }, this);\n\n    var io = cpu.io;\n\n    io.register_write(port, this, function(out_byte)\n    {\n        this.write_data(out_byte);\n    }, function(out_word)\n    {\n        this.write_data(out_word & 0xFF);\n        this.write_data(out_word >> 8);\n    });\n\n    io.register_write(port | 1, this, function(out_byte)\n    {\n        if(this.line_control & DLAB)\n        {\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\n        }\n        else\n        {\n            this.ier = out_byte & 0xF;\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\n            this.CheckInterrupt();\n        }\n    });\n\n    io.register_read(port, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate & 0xFF;\n        }\n        else\n        {\n            var data = this.input.shift();\n\n            if(data === -1)\n            {\n                dbg_log(\"Read input empty\", LOG_SERIAL);\n            }\n            else\n            {\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\n            }\n\n            if(this.input.length === 0)\n            {\n                this.lsr &= ~UART_LSR_DATA_READY;\n                this.ClearInterrupt(UART_IIR_CTI);\n            }\n\n            return data;\n        }\n    });\n\n    io.register_read(port | 1, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate >> 8;\n        }\n        else\n        {\n            return this.ier & 0xF;\n        }\n    });\n\n    io.register_read(port | 2, this, function()\n    {\n        var ret = this.iir & 0xF | 0xC0;\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\n\n        if (this.iir == UART_IIR_THRI) {\n            this.ClearInterrupt(UART_IIR_THRI);\n        }\n\n        return ret;\n    });\n    io.register_write(port | 2, this, function(out_byte)\n    {\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\n        this.fifo_control = out_byte;\n    });\n\n    io.register_read(port | 3, this, function()\n    {\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\n        return this.line_control;\n    });\n    io.register_write(port | 3, this, function(out_byte)\n    {\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\n        this.line_control = out_byte;\n    });\n\n\n    io.register_read(port | 4, this, function()\n    {\n        return this.modem_control;\n    });\n    io.register_write(port | 4, this, function(out_byte)\n    {\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\n        this.modem_control = out_byte;\n    });\n\n    io.register_read(port | 5, this, function()\n    {\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\n        return this.lsr;\n    });\n    io.register_write(port | 5, this, function(out_byte)\n    {\n        dbg_log(\"Factory test write\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 6, this, function()\n    {\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\n        return this.modem_status;\n    });\n    io.register_write(port | 6, this, function(out_byte)\n    {\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 7, this, function()\n    {\n        return this.scratch_register;\n    });\n    io.register_write(port | 7, this, function(out_byte)\n    {\n        this.scratch_register = out_byte;\n    });\n}\n\nUART.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.ints;\n    state[1] = this.baud_rate;\n    state[2] = this.line_control;\n    state[3] = this.lsr;\n    state[4] = this.fifo_control;\n    state[5] = this.ier;\n    state[6] = this.iir;\n    state[7] = this.modem_control;\n    state[8] = this.modem_status;\n    state[9] = this.scratch_register;\n    state[10] = this.irq;\n\n    return state;\n};\n\nUART.prototype.set_state = function(state)\n{\n    this.ints = state[0];\n    this.baud_rate = state[1];\n    this.line_control = state[2];\n    this.lsr = state[3];\n    this.fifo_control = state[4];\n    this.ier = state[5];\n    this.iir = state[6];\n    this.modem_control = state[7];\n    this.modem_status = state[8];\n    this.scratch_register = state[9];\n    this.irq = state[10];\n};\n\nUART.prototype.CheckInterrupt = function() {\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\n        this.iir = UART_IIR_CTI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\n        this.iir = UART_IIR_THRI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\n        this.iir = UART_IIR_MSI;\n        this.cpu.device_raise_irq(this.irq);\n    } else {\n        this.iir = UART_IIR_NO_INT;\n        this.cpu.device_lower_irq(this.irq);\n    }\n};\n\nUART.prototype.ThrowInterrupt = function(line) {\n    this.ints |= (1 << line);\n    this.CheckInterrupt();\n};\n\nUART.prototype.ClearInterrupt = function(line) {\n    this.ints &= ~(1 << line);\n    this.CheckInterrupt();\n};\n\n/**\n * @param {number} data\n */\nUART.prototype.data_received = function(data)\n{\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\n    this.input.push(data);\n\n    this.lsr |= UART_LSR_DATA_READY;\n    this.ThrowInterrupt(UART_IIR_CTI);\n};\n\nUART.prototype.write_data = function(out_byte)\n{\n    if(this.line_control & DLAB)\n    {\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\n        return;\n    }\n\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\n\n    this.ThrowInterrupt(UART_IIR_THRI);\n\n    if(out_byte === 0xFF)\n    {\n        return;\n    }\n\n    var char = String.fromCharCode(out_byte);\n\n    this.bus.send(\"serial0-output-char\", char);\n\n    this.current_line.push(out_byte);\n\n    if(char === \"\\n\")\n    {\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\n        this.bus.send(\"serial0-output-line\", String.fromCharCode.apply(\"\", this.current_line));\n        this.current_line = [];\n    }\n};\n\n","\"use strict\";\n\n/** @const */\nvar STATE_VERSION = 5;\n\n/** @const */\nvar STATE_MAGIC = 0x86768676|0;\n\n/** @const */\nvar STATE_INDEX_MAGIC = 0;\n\n/** @const */\nvar STATE_INDEX_VERSION = 1;\n\n/** @const */\nvar STATE_INDEX_TOTAL_LEN = 2;\n\n/** @const */\nvar STATE_INDEX_INFO_LEN = 3;\n\n/** @const */\nvar STATE_INFO_BLOCK_START = 16;\n\n\n/** @constructor */\nfunction StateLoadError(msg)\n{\n    this.message = msg;\n}\nStateLoadError.prototype = new Error;\n\n\nfunction save_object(obj, saved_buffers)\n{\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\n    {\n        return obj;\n    }\n\n    dbg_assert(obj.constructor !== Object);\n\n    if(obj.BYTES_PER_ELEMENT)\n    {\n        // Uint8Array, etc.\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\n\n        return {\n            \"__state_type__\": obj.constructor.name,\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\n        };\n    }\n\n    if(DEBUG && !obj.get_state)\n    {\n        console.log(\"Object without get_state: \", obj);\n    }\n\n    var state = obj.get_state();\n    var result = [];\n\n    for(var i = 0; i < state.length; i++)\n    {\n        var value = state[i];\n\n        dbg_assert(typeof value !== \"function\");\n\n        result[i] = save_object(value, saved_buffers);\n    }\n\n    return result;\n}\n\nfunction restore_object(base, obj, buffers)\n{\n    // recursively restore obj into base\n\n    if(typeof obj !== \"object\" || obj === null)\n    {\n        return obj;\n    }\n\n    if(base instanceof Array)\n    {\n        return obj;\n    }\n\n    var type = obj[\"__state_type__\"];\n\n    if(type === undefined)\n    {\n        if(DEBUG && base === undefined)\n        {\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\n            dbg_assert(false);\n        }\n\n        if(DEBUG && !base.get_state)\n        {\n            console.log(\"No get_state:\", base);\n        }\n\n        var current = base.get_state();\n\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\n\n        for(var i = 0; i < obj.length; i++)\n        {\n            obj[i] = restore_object(current[i], obj[i], buffers);\n        }\n\n        base.set_state(obj);\n\n        return base;\n    }\n    else\n    {\n        var table = {\n            \"Uint8Array\": Uint8Array,\n            \"Int8Array\": Int8Array,\n            \"Uint16Array\": Uint16Array,\n            \"Int16Array\": Int16Array,\n            \"Uint32Array\": Uint32Array,\n            \"Int32Array\": Int32Array,\n            \"Float32Array\": Float32Array,\n            \"Float64Array\": Float64Array,\n        };\n\n        var constructor = table[type];\n        dbg_assert(constructor, \"Unkown type: \" + type);\n\n        var info = buffers.infos[obj[\"buffer_id\"]];\n\n        dbg_assert(base);\n        dbg_assert(base.constructor === constructor);\n\n        // restore large buffers by just returning a view on the state blob\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\n        {\n            return new Uint8Array(buffers.full, info.offset, info.length);\n        }\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\n        //      and possibly also breaks restore -> save -> restore again\n        // avoid a new allocation if possible\n        //else if(base &&\n        //        base.constructor === constructor &&\n        //        base.byteOffset === 0 &&\n        //        base.byteLength === info.length)\n        //{\n        //    new Uint8Array(base.buffer).set(\n        //        new Uint8Array(buffers.full, info.offset, info.length),\n        //        base.byteOffset\n        //    );\n        //    return base;\n        //}\n        else\n        {\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\n            return new constructor(buf);\n        }\n    }\n}\n\nCPU.prototype.save_state = function()\n{\n    var saved_buffers = [];\n    var state = save_object(this, saved_buffers);\n\n    var buffer_infos = [];\n    var total_buffer_size = 0;\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var len = saved_buffers[i].byteLength;\n\n        buffer_infos[i] = {\n            offset: total_buffer_size,\n            length: len,\n        };\n\n        total_buffer_size += len;\n\n        // align\n        total_buffer_size = total_buffer_size + 3 & ~3;\n    }\n\n    var info_object = JSON.stringify({\n        \"buffer_infos\": buffer_infos,\n        \"state\": state,\n    });\n\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n    var total_size = buffer_block_start + total_buffer_size;\n\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\n\n    var result = new ArrayBuffer(total_size);\n\n    var header_block = new Int32Array(\n        result,\n        0,\n        STATE_INFO_BLOCK_START / 4\n    );\n    var info_block = new Uint16Array(\n        result,\n        STATE_INFO_BLOCK_START,\n        info_object.length\n    );\n    var buffer_block = new Uint8Array(\n        result,\n        buffer_block_start\n    );\n\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\n\n    for(var i = 0; i < info_object.length; i++)\n    {\n        info_block[i] = info_object.charCodeAt(i);\n    }\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var buffer = saved_buffers[i];\n        dbg_assert(buffer.constructor === Uint8Array);\n        buffer_block.set(buffer, buffer_infos[i].offset);\n    }\n\n    return result;\n};\n\nCPU.prototype.restore_state = function(state)\n{\n    var len = state.byteLength;\n\n    if(len < STATE_INFO_BLOCK_START)\n    {\n        throw new StateLoadError(\"Invalid length: \" + len);\n    }\n\n    var header_block = new Int32Array(state, 0, 4);\n\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\n    {\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\n    }\n\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\n    {\n        throw new StateLoadError(\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\n                \" we=\" + STATE_VERSION);\n    }\n\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\n    {\n        throw new StateLoadError(\n                \"Length doesn't match header: \" +\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\n    }\n\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\n\n    if(info_block_len < 0 ||\n       info_block_len + 12 >= len ||\n       info_block_len % 2)\n    {\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\n    }\n\n    var info_block_str_len = info_block_len / 2;\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\n    var info_block = \"\";\n\n    for(var i = 0; i < info_block_str_len - 8; )\n    {\n        info_block += String.fromCharCode(\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++]\n        );\n    }\n\n    for(; i < info_block_str_len; )\n    {\n        info_block += String.fromCharCode(info_block_buffer[i++]);\n    }\n\n    var info_block_obj = JSON.parse(info_block);\n    var state_object = info_block_obj[\"state\"];\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n\n    for(var i = 0; i < buffer_infos.length; i++)\n    {\n        buffer_infos[i].offset += buffer_block_start;\n    }\n\n    var buffers = {\n        full: state,\n        infos: buffer_infos,\n    };\n\n    restore_object(this, state_object, buffers);\n};\n","\"use strict\";\n\n\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\n\n/* Page 0 register offsets. */\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\n\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\n\n/* Bits in EN0_ISR - Interrupt status register */\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\n\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\n\n/** @const */ var START_PAGE = 0x40;\n/** @const */ var START_RX_PAGE = 0x40 + 12;\n/** @const */ var STOP_PAGE = 0x80;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction Ne2k(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n    this.bus.register(\"net0-receive\", function(data)\n    {\n        this.receive(data);\n    }, this);\n\n    this.port = 0x300;\n\n    this.name = \"ne2k\";\n\n    /** @const */\n    var use_pci = true;\n\n    if(use_pci)\n    {\n        this.pci_space = [\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n        ];\n        this.pci_id = 0x05 << 3;\n        this.pci_bars = [\n            {\n                size: 32,\n            },\n        ];\n    }\n\n    this.isr = 0;\n    this.imr = 0; // interrupt mask register\n\n    this.cr = 1;\n\n    this.dcfg = 0;\n\n    this.rcnt = 0;\n\n    this.tcnt = 0;\n    this.tpsr = 0;\n    this.memory = new Uint8Array(256 * 0x80);\n\n    this.rxcr = 0;\n    this.txcr = 0;\n    this.tsr = 1;\n\n    // mac address\n    var mac = [\n        0x00, 0x22, 0x15,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n    ];\n\n    for(var i = 0; i < 6; i++)\n    {\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\n    }\n\n    this.memory[14] = this.memory[15] = 0x57;\n\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\n                      h(mac[1], 2) + \":\" +\n                      h(mac[2], 2) + \":\" +\n                      h(mac[3], 2) + \":\" +\n                      h(mac[4], 2) + \":\" +\n                      h(mac[5], 2), LOG_NET);\n\n    this.rsar = 0;\n\n    this.pstart = START_PAGE;\n    this.pstop = STOP_PAGE;\n\n    this.curpg = START_RX_PAGE;\n    this.boundary = START_RX_PAGE;\n\n    var io = cpu.io;\n\n    io.register_read(this.port | E8390_CMD, this, function()\n    {\n        dbg_log(\"Read cmd\", LOG_NET);\n        return this.cr;\n    });\n\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\n    {\n        this.cr = data_byte & ~4;\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\n\n        if(this.cr & 1)\n        {\n            return;\n        }\n\n        if((data_byte | 0x18) && this.rcnt === 0)\n        {\n            this.do_interrupt(ENISR_RDC);\n        }\n\n        if(data_byte & 4)\n        {\n            var start = this.tpsr << 8;\n            var data = this.memory.subarray(start, start + this.tcnt);\n            this.bus.send(\"net0-send\", data);\n            this.bus.send(\"eth-transmit-end\", [data.length]);\n            this.do_interrupt(ENISR_TX);\n\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_COUNTER0, this, function()\n    {\n        dbg_log(\"Read counter0\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER1, this, function()\n    {\n        dbg_log(\"Read counter1\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER2, this, function()\n    {\n        dbg_log(\"Read counter2\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | NE_RESET, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read reset\", LOG_NET);\n            this.do_interrupt(ENISR_RESET);\n        }\n        else\n        {\n            dbg_log(\"Read pg1/1f\", LOG_NET);\n        }\n        return 0;\n    });\n\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\n            //this.isr &= ~ENISR_RESET;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\n            this.pstart = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\n            this.pstop = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_ISR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\n            return this.isr;\n        }\n        else\n        {\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\n            return this.curpg;\n        }\n    });\n\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            // acknoledge interrupts where bit is set\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\n            this.isr &= ~data_byte\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\n            this.curpg = data_byte\n        }\n    });\n\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            this.txcr = data_byte;\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\n            this.dcfg = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write start addresse count high: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\n            this.imr = data_byte;\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\n            return this.boundary;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\n            this.boundary = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_TSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return this.tsr;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\n            this.tpsr = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_RSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return 1 | 1 << 3; // receive status ok\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\n    {\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\n        this.rxcr = data_byte;\n    });\n\n    io.register_read(this.port | NE_DATAPORT | 0, this,\n            this.data_port_read8,\n            this.data_port_read16,\n            this.data_port_read32);\n    io.register_write(this.port | NE_DATAPORT | 0, this,\n            this.data_port_write16,\n            this.data_port_write16,\n            this.data_port_write32);\n\n    if(use_pci)\n    {\n        cpu.devices.pci.register_device(this);\n    }\n}\n\nNe2k.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.isr;\n    state[1] = this.imr;\n    state[2] = this.cr;\n    state[3] = this.dcfg;\n    state[4] = this.rcnt;\n    state[5] = this.tcnt;\n    state[6] = this.tpsr;\n    state[7] = this.rsar;\n    state[8] = this.pstart;\n    state[9] = this.curpg;\n    state[10] = this.boundary;\n\n    return state;\n};\n\nNe2k.prototype.set_state = function(state)\n{\n    this.isr = state[0];\n    this.imr = state[1];\n    this.cr = state[2];\n    this.dcfg = state[3];\n    this.rcnt = state[4];\n    this.tcnt = state[5];\n    this.tpsr = state[6];\n    this.rsar = state[7];\n    this.pstart = state[8];\n    this.curpg = state[9];\n    this.boundary = state[10];\n};\n\nNe2k.prototype.do_interrupt = function(ir_mask)\n{\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\n    this.isr |= ir_mask;\n    this.update_irq();\n};\n\nNe2k.prototype.update_irq = function()\n{\n    if(this.imr & this.isr)\n    {\n        this.pci.raise_irq(this.pci_id);\n    }\n    else\n    {\n        this.pci.lower_irq(this.pci_id);\n    }\n};\n\nNe2k.prototype.data_port_write = function(data_byte)\n{\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\n                            \" rsar=\" + h(this.rsar, 4) +\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\n    {\n        // unmapped\n        return;\n    }\n\n    this.rcnt--;\n    this.memory[this.rsar++] = data_byte;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n};\n\nNe2k.prototype.data_port_write16 = function(data)\n{\n    this.data_port_write(data);\n\n    if(this.dcfg & 1)\n    {\n        this.data_port_write(data >> 8);\n    }\n};\n\nNe2k.prototype.data_port_write32 = function(data)\n{\n    this.data_port_write(data);\n    this.data_port_write(data >> 8);\n    this.data_port_write(data >> 16);\n    this.data_port_write(data >> 24);\n};\n\nNe2k.prototype.data_port_read = function()\n{\n    var data = this.memory[this.rsar++];\n\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\n                           \" rsar=\" + h(this.rsar - 1, 4) +\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n    this.rcnt--;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n\n    return data;\n};\n\nNe2k.prototype.data_port_read8 = function()\n{\n    return this.data_port_read16() & 0xFF;\n};\n\nNe2k.prototype.data_port_read16 = function()\n{\n    if(this.dcfg & 1)\n    {\n        return this.data_port_read() | this.data_port_read() << 8;\n    }\n    else\n    {\n        return this.data_port_read();\n    }\n};\n\nNe2k.prototype.data_port_read32 = function()\n{\n    return this.data_port_read() | this.data_port_read() << 8 |\n            this.data_port_read() << 16 | this.data_port_read() << 24;\n};\n\nNe2k.prototype.receive = function(data)\n{\n    // called from the adapter when data is received over the network\n\n    if(this.cr & 1)\n    {\n        // stop bit set\n        return;\n    }\n\n    this.bus.send(\"eth-receive-end\", [data.length]);\n\n    if(this.rxcr & 0x10)\n    {\n        // promiscuous\n    }\n    else if((this.rxcr & 4) &&\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\n    {\n        // broadcast\n    }\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\n    {\n        // multicast\n        // XXX\n        return;\n    }\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\n            data[4] === this.memory[8] && data[5] === this.memory[10])\n    {\n    }\n    else\n    {\n        return;\n    }\n\n    var packet_length = Math.max(60, data.length);\n\n    var offset = this.curpg << 8;\n    var total_length = packet_length + 4;\n    var data_start = offset + 4;\n    var next = this.curpg + 1 + (total_length >> 8);\n\n    var end = offset + total_length;\n\n    if(end > this.memory.length)\n    {\n        // shouldn't happen because at this size it can't cross a page\n        dbg_assert(data.length >= 60);\n\n        var cut = this.memory.length - data_start;\n        this.memory.set(data.subarray(0, cut), data_start);\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\n    }\n    else\n    {\n        this.memory.set(data, data_start);\n\n        if(data.length < 60)\n        {\n            for(var i = data.length; i < 60; i++)\n            {\n                this.memory[data_start + i] = 0;\n            }\n        }\n    }\n\n    if(next >= this.pstop)\n    {\n        next += this.pstart - this.pstop;\n    }\n\n    // write packet header\n    this.memory[offset] = ENRSR_RXOK; // status\n    this.memory[offset + 1] = next;\n    this.memory[offset + 2] = total_length;\n    this.memory[offset + 3] = total_length >> 8;\n\n    this.curpg = next;\n\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\n\n    this.do_interrupt(ENISR_RX);\n};\n\nNe2k.prototype.get_page = function()\n{\n    return this.cr & 0xC0;\n};\n","\"use strict\";\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {FS} filesystem\n */\nfunction VirtIO(cpu, bus, filesystem)\n{\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\n\n    this.pci_space = [\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x06 << 3;\n    this.pci_bars = [\n        {\n            size: 256,\n        },\n    ];\n    this.name = \"virtio\";\n\n    var io = cpu.io;\n\n    io.register_read(0xA800, this,\n        function() {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        },\n        undefined,\n        function()\n        {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        }\n    );\n\n    io.register_write(0xA804, this, undefined, undefined, function(data)\n    {\n        // write guest features\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\n    });\n\n    io.register_write(0xA80E, this, undefined, function(data)\n    {\n        // rw queue select\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\n        this.queue_select = data;\n    }, undefined);\n\n    io.register_read(0xA80C, this, undefined, function()\n    {\n        // read queue size\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\n        return this.queue_size;\n    }, undefined);\n\n    io.register_read(0xA808, this, undefined, undefined, function()\n    {\n        // rw queue address\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\n\n        if(this.queue_select === 0)\n        {\n            return this.queue_address;\n        }\n        else\n        {\n            // queue does not exist\n            return 0;\n        }\n    });\n\n    io.register_write(0xA808, this, undefined, undefined, function(data)\n    {\n        // rw queue address\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\n        this.queue_address = data;\n    });\n\n    io.register_write(0xA812, this, function(data)\n    {\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\n\n        if(data === 0)\n        {\n            dbg_log(\"Reset\", LOG_VIRTIO);\n            this.reset();\n        }\n        else if(data & 0x80)\n        {\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\n        }\n        else\n        {\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\n                    ((data & 2) ? \"DRIVER \" : \"\") +\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\n                    LOG_VIRTIO);\n\n        }\n\n        this.device_status = data;\n    });\n\n    io.register_read(0xA812, this, function()\n    {\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\n        return this.device_status;\n    });\n\n    io.register_read(0xA813, this, function()\n    {\n        dbg_log(\"Read isr\", LOG_VIRTIO);\n\n        // reading resets the isr\n        var isr = this.isr;\n        this.isr = 0;\n        this.pci.lower_irq(this.pci_id);\n        return isr;\n    });\n\n    io.register_write(0xA810, this, undefined, function(data)\n    {\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\n\n        // only queue 0 supported\n        dbg_assert(data === 0);\n\n        var queue_start = this.queue_address << 12;\n        var ring_start = queue_start + 16 * this.queue_size;\n        var ring_desc_start = ring_start + 4;\n\n        var //flags = this.cpu.read16(ring_start),\n            // index of the next free ring\n            idx = this.cpu.read16(ring_start + 2);\n\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\n        //dbg_assert(idx < this.queue_size);\n\n        var mask = this.queue_size - 1;\n        idx &= mask;\n\n        while(this.last_idx !== idx)\n        {\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\n            this.handle_descriptor(desc_idx);\n\n            this.last_idx = this.last_idx + 1 & mask;\n        }\n    });\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    // these should be stored per queue if there is more than one queue\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n\n    for(var i = 0; i < 128; i++)\n    {\n        io.register_read(0xA814 + i, this, function(port)\n        {\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\n\n            if(port < this.device.configspace.length)\n            {\n                return this.device.configspace[port];\n            }\n            else\n            {\n                return 0;\n            }\n        }.bind(this, i), undefined, undefined);\n\n        io.register_write(0xA814 + i, this, function(port, data)\n        {\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\n        }.bind(this, i), undefined, undefined);\n    }\n\n    // should be generalized to support more devices than just the filesystem\n    this.device = new Virtio9p(filesystem, bus);\n    this.device.SendReply = this.device_reply.bind(this);\n\n    cpu.devices.pci.register_device(this);\n}\n\nVirtIO.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = 0; // unused\n    state[1] = this.queue_select;\n    state[2] = this.device_status;\n    state[3] = this.isr;\n    state[4] = this.last_idx;\n    state[5] = this.queue_size;\n    state[6] = this.queue_address;\n    state[7] = this.device;\n\n    return state;\n};\n\nVirtIO.prototype.set_state = function(state)\n{\n    this.queue_select = state[1];\n    this.device_status = state[2];\n    this.isr = state[3];\n    this.last_idx = state[4];\n    this.queue_size = state[5];\n    this.queue_address = state[6];\n\n    this.device = state[7];\n    this.device.SendReply = this.device_reply.bind(this);\n};\n\nVirtIO.prototype.reset = function()\n{\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n};\n\nVirtIO.prototype.handle_descriptor = function(idx)\n{\n    var next = idx;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if(flags & VRING_DESC_F_WRITE)\n        {\n            break;\n        }\n\n        if(flags & VRING_DESC_F_INDIRECT) {\n            dbg_assert(false, \"unsupported\");\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            next = -1;\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    var infos = {\n        start: idx,\n        next: next,\n    };\n\n    this.device.ReceiveRequest(infos, function()\n    {\n        // return one byte\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        return this.cpu.read8(addr_low + pointer++);\n    }.bind(this));\n};\n\nVirtIO.prototype.device_reply = function(queueidx, infos)\n{\n    if(infos.next === -1)\n    {\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\n        return;\n    }\n\n    var mask = this.queue_size - 1;\n    var result_length = this.device.replybuffersize;\n\n    var next = infos.next;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if((flags & VRING_DESC_F_WRITE) === 0)\n        {\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\n            break;\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    for(var i = 0; i < result_length; i++)\n    {\n        var data = this.device.replybuffer[i];\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        this.cpu.write8(addr_low + pointer++, data);\n    }\n\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\n    used_desc_start = used_desc_start + 4095 & ~4095;\n\n    var flags = this.cpu.read16(used_desc_start);\n    var used_idx = this.cpu.read16(used_desc_start + 2);\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\n\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\n\n    used_idx &= mask;\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\n    this.cpu.write32(used_desc_offset, infos.start);\n    this.cpu.write32(used_desc_offset + 4, result_length);\n\n    this.isr |= 1;\n    this.pci.raise_irq(this.pci_id);\n};\n","\"use strict\";\n\n// jor1k compatibility\n\nvar VIRTIO_MAGIC_REG = 0x0;\nvar VIRTIO_VERSION_REG = 0x4;\nvar VIRTIO_DEVICE_REG = 0x8;\nvar VIRTIO_VENDOR_REG = 0xc;\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\nvar VIRTIO_QUEUESEL_REG = 0x30;\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\nvar VIRTIO_QUEUENUM_REG = 0x38;\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\nvar VIRTIO_QUEUEPFN_REG = 0x40;\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\nvar VIRTIO_STATUS_REG = 0x70;\n\n/** @const */\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\n/** @const */\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\n/** @const */\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\n\n\nfunction hex8(n)\n{\n    return h(n);\n}\n\nvar message = {};\n\n/** @param {...string} log */\nmessage.Debug = function(log)\n{\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\n}\n\nmessage.Abort = function()\n{ \n    if(DEBUG)\n    {\n        throw \"abort\"; \n    }\n}\n\n\n// XXX: Should go through emulator interface\nvar LoadBinaryResource;\n\nif(typeof XMLHttpRequest !== \"undefined\")\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) {\n                return;\n            }\n            if ((req.status != 200) && (req.status != 0)) {\n                OnError(\"Error: Could not load file \" + url);\n                return;\n            }\n            var arrayBuffer = req.response;\n            if (arrayBuffer) {\n                OnSuccess(arrayBuffer);\n            } else {\n                OnError(\"Error: No data received from: \" + url);\n            }\n        };\n        /*\n            req.onload = function(e)\n            {\n                    var arrayBuffer = req.response;\n                    if (arrayBuffer) {\n                        OnLoadFunction(arrayBuffer);\n                    }\n            };\n        */\n        req.send(null);\n    }\n}\nelse\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError)\n    {\n        //console.log(url);\n        require(\"fs\")[\"readFile\"](url, function(err, data)\n        {\n            if(err)\n            {\n                OnError(err);\n            }\n            else\n            {\n                OnSuccess(new Uint8Array(data).buffer);\n            }\n        });\n    }\n}\n","\"use strict\";\n\nvar Bus = {};\n\n/** @constructor */\nfunction BusConnector()\n{\n    this.listeners = {};\n    this.pair = undefined;\n};\n\n/**\n * @param {string} name\n * @param {function(*=)} fn\n * @param {Object} this_value\n */\nBusConnector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Unregister one message with the given name and callback\n *\n * @param {string} name\n * @param {function()} fn\n */\nBusConnector.prototype.unregister = function(name, fn)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    this.listeners[name] = listeners.filter(function(l)\n    {\n        return l.fn !== fn\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} unused_transfer\n */\nBusConnector.prototype.send = function(name, value, unused_transfer)\n{\n    if(!this.pair)\n    {\n        return;\n    }\n\n    var listeners = this.pair.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    for(var i = 0; i < listeners.length; i++)\n    {\n        var listener = listeners[i];\n        listener.fn.call(listener.this_value, value);\n    }\n};\n\n/**\n * Send a message, guaranteeing that it is received asynchronously\n *\n * @param {string} name\n * @param {Object=} value\n */\nBusConnector.prototype.send_async = function(name, value)\n{\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\n\n    setTimeout(this.send.bind(this, name, value), 0);\n};\n\nBus.create = function()\n{\n    var c0 = new BusConnector();\n    var c1 = new BusConnector();\n\n    c0.pair = c1;\n    c1.pair = c0;\n\n    return [c0, c1];\n};\n\n","/**\n * This file contains functions to decode the modrm and sib bytes\n *\n * These functions return a virtual address\n *\n * @fileoverview .\n * @suppress {newCheckTypes}\n */\n\"use strict\";\n(function()\n{\n    CPU.prototype.modrm_table16 = Array(0xC0);\n    CPU.prototype.modrm_table32 = Array(0xC0);\n    CPU.prototype.sib_table = Array(0x100);\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\n    };;\n    // special cases\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\n    }\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(false) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\n    };\n    for(var low = 0; low < 8; low++)\n    {\n        for(var high = 0; high < 3; high++)\n        {\n            var x = low | high << 6;\n            for(var i = 1; i < 8; i++)\n            {\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\n            }\n        }\n    }\n\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n})();\n","\"use strict\";\n\n/*\n * string operations\n *\n *       cmp  si  di\n * movs   0    1   1/w    A4\n * cmps   1    1   1/r    A6\n * stos   0    0   1/w    AA\n * lods   0    1   0      AC\n * scas   1    0   1/r    AE\n * ins    0    0   1/w\n * outs   0    1   0\n */\n\n/** @const */\nvar MAX_COUNT_PER_CYCLE = 0x1000;\n\n\nfunction string_get_cycle_count(size, address)\n{\n    dbg_assert(size && size <= 4 && size >= -4);\n\n    if(size < 0)\n    {\n        return (address & 0xFFF) >> (-size >> 1);\n    }\n    else\n    {\n        return (~address & 0xFFF) >> size;\n    }\n}\n\nfunction string_get_cycle_count2(size, addr1, addr2)\n{\n    dbg_assert(arguments.length === 3);\n\n    return Math.min(\n            string_get_cycle_count(size, addr1),\n            string_get_cycle_count(size, addr2));\n}\n\n\nCPU.prototype.movsb = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.read8(phys_src));\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsw = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.safe_read16(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsd = function()\n{\n    var cpu = this;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        // often used by memcpy, well worth optimizing\n        //   using cpu.mem32s.set\n        var ds = cpu.get_seg_prefix(reg_ds),\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\n            es = cpu.get_seg(reg_es),\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\n\n        if(!count)\n        {\n            return;\n        }\n\n        // must be page-aligned if cpu.paging is enabled\n        // and dword-aligned in general\n        var align_mask = cpu.paging ? 0xFFF : 3;\n\n        if((dest & align_mask) === 0 &&\n           (src & align_mask) === 0 &&\n           // If df is set, alignment works a different\n           // This should be unlikely\n           (cpu.flags & flag_direction) === 0)\n        {\n            var cont = false;\n            if(cpu.paging)\n            {\n                src = cpu.translate_address_read(src);\n                dest = cpu.translate_address_write(dest);\n\n                if(count > 0x400)\n                {\n                    count = 0x400;\n                    cont = true;\n                }\n            }\n\n            if(!cpu.io.in_mmap_range(src, count) &&\n                !cpu.io.in_mmap_range(dest, count))\n            {\n                var diff = count << 2;\n                cpu.add_reg_asize(reg_ecx, -count);\n                cpu.add_reg_asize(reg_edi, diff);\n                cpu.add_reg_asize(reg_esi, diff);\n\n                dest >>>= 2;\n                src >>>= 2;\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\n\n                if(cont)\n                {\n                    cpu.instruction_pointer = cpu.previous_ip;\n                }\n\n                return;\n            }\n        }\n    }\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            this.instruction_pointer = this.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nfunction cmpsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            data_src = cpu.read8(phys_src);\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_src = cpu.safe_read8(src);\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                data_src = cpu.read_aligned16(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                data_src = cpu.safe_read16(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        data_src = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                data_src = cpu.read_aligned32(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                data_src = cpu.safe_read32s(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        data_src = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction stosb(cpu)\n{\n    var data = cpu.reg8[reg_al];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, data);\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosw(cpu)\n{\n    var data = cpu.reg16[reg_ax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosd(cpu)\n{\n    var data = cpu.reg32s[reg_eax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction scasb(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n    var data_dest;\n    var data_src = cpu.reg8[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            phys_dest += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasw(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n    var data_dest;\n    var data_src = cpu.reg16[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasd(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n    var data_dest;\n    var data_src = cpu.reg32s[reg_eax];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction insb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 1);\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 2);\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 4);\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.io.port_write8(port, cpu.read8(phys_src));\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write8(port, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write16(port, cpu.safe_read16(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write16(port, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n","/*\n * Arithmatic functions\n * This file contains:\n *\n * add, adc, sub, sbc, cmp\n * inc, dec\n * neg, not\n * imul, mul, idiv, div\n * xadd\n *\n * das, daa, aad, aam\n *\n * and, or, xor, test\n * shl, shr, sar, ror, rol, rcr, rcl\n * shld, shrd\n *\n * bts, btr, btc, bt\n * bsf, bsr\n *\n * popcnt\n*/\n\"use strict\";\n\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\n\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\n\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\n\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\n{\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\n\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\n{\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\n/*\n * inc and dec\n */\n\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\n\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\n\nCPU.prototype.inc = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = 1;\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\nCPU.prototype.dec = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = 1;\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\n\n/*\n * neg\n */\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\n\nCPU.prototype.neg = function(dest_operand, op_size)\n{\n    this.last_op1 = this.last_result = -dest_operand | 0;\n\n    this.flags_changed = flags_all;\n    this.last_add_result = 0;\n    this.last_op2 = dest_operand;\n    this.last_op_size = op_size;\n\n    return this.last_result;\n}\n\n\n/*\n * mul, imul, div, idiv\n *\n * Note: imul has some extra opcodes\n *       while other functions only allow\n *       ax * modrm\n */\n\nCPU.prototype.mul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result < 0x100)\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.imul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8s[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result > 0x7F || result < -0x80)\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.mul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16[reg_ax],\n        high_result = result >>> 16;\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = high_result;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(high_result === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 1 argument\n * ax = ax * r/m\n */\nCPU.prototype.imul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16s[reg_ax];\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = result >> 16;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg16 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\n\n    var result = operand1 * operand2;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.do_mul32 = function(a, b)\n{\n    var a00 = a & 0xFFFF;\n    var a16 = a >>> 16;\n    var b00 = b & 0xFFFF;\n    var b16 = b >>> 16;\n    var low_result = a00 * b00;\n    var mid = (low_result >>> 16) + (a16 * b00 | 0) | 0;\n    var high_result = mid >>> 16;\n    mid = (mid & 0xFFFF) + (a00 * b16 | 0) | 0;\n    this.mul32_result[0] = (mid << 16) | low_result & 0xFFFF;\n    this.mul32_result[1] = ((mid >>> 16) + (a16 * b16 | 0) | 0) + high_result | 0;\n    return this.mul32_result;\n};\n\nCPU.prototype.do_imul32 = function(a, b)\n{\n    var is_neg = false;\n    if(a < 0) {\n        is_neg = true;\n        a = -a | 0;\n    }\n    if(b < 0) {\n        is_neg = !is_neg;\n        b = -b | 0;\n    }\n    var result = this.do_mul32(a, b);\n    if(is_neg) {\n        result[0] = -result[0] | 0;\n        result[1] = ~result[1] + !result[0] | 0;\n    }\n    return result;\n}\n\nCPU.prototype.mul32 = function(source_operand)\n{\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_mul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\n}\n\nCPU.prototype.imul32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_imul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(target_operand + \" * \" + source_operand);\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg32 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\n\n    var result = this.do_imul32(operand1, operand2);\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result[0];\n\n    //console.log(operand + \" * \" + source_operand);\n    //console.log(\"= \" + this.reg32[reg]);\n}\n\nCPU.prototype.div8 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x100)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv8 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16s[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x80 || result <= -0x81)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.div16 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x10000 || result < 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv16 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x8000 || result <= -0x8001)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\n// If the dividend is too large, the division cannot be done precisely using\n// JavaScript's double floating point numbers. Run simple long divsion until\n// the dividend is small enough\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\n{\n    if(div_high >= quot || quot === 0)\n    {\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\n        this.trigger_de();\n    }\n\n    var result = 0;\n\n    if(div_high > 0x100000)\n    {\n        var m = 0;\n        var i = 32;\n        var q = quot;\n        while(q > div_high)\n        {\n            q >>>= 1;\n            i--;\n        }\n        while(div_high > 0x100000)\n        {\n            if(div_high >= q)\n            {\n                div_high -= q;\n                var sub = quot << i >>> 0;\n                if(sub > div_low)\n                {\n                    div_high--;\n                }\n                div_low = div_low - sub >>> 0;\n                result |= 1 << i\n            }\n            i--;\n            q >>= 1;\n        }\n        result >>>= 0;\n    }\n\n    var div = div_low + div_high * 0x100000000;\n    var mod = div % quot;\n    result += div / quot | 0;\n\n    this.div32_result[0] = result;\n    this.div32_result[1] = mod;\n    return this.div32_result;\n}\n\n\nCPU.prototype.div32 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32[reg_edx];\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    // XXX\n    dbg_assert(source_operand);\n    if(result >= 0x100000000)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\nCPU.prototype.idiv32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32s[reg_edx],\n        div_is_neg = false,\n        is_neg = false;\n\n    if(source_operand < 0)\n    {\n        is_neg = true;\n        source_operand = -source_operand;\n    }\n\n    if(dest_operand_high < 0)\n    {\n        div_is_neg = true;\n        is_neg = !is_neg;\n        dest_operand_low = -dest_operand_low >>> 0;\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\n    }\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    if(is_neg)\n    {\n        result = -result | 0;\n    }\n\n    if(div_is_neg)\n    {\n        mod = -mod | 0;\n    }\n\n    dbg_assert(source_operand);\n    if(result >= 0x80000000 || result <= -0x80000001)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\n\nCPU.prototype.xadd8 = function(source_operand, reg)\n{\n    var tmp = this.reg8[reg];\n\n    this.reg8[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_8);\n}\n\n\nCPU.prototype.xadd16 = function(source_operand, reg)\n{\n    var tmp = this.reg16[reg];\n\n    this.reg16[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_16);\n}\n\n\nCPU.prototype.xadd32 = function(source_operand, reg)\n{\n    var tmp = this.reg32s[reg];\n\n    this.reg32s[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_32);\n}\n\n\nCPU.prototype.bcd_daa = function()\n{\n    //dbg_log(\"daa\");\n    // decimal adjust after addition\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf(),\n        old_af = this.getaf();\n\n    this.flags &= ~1 & ~flag_adjust\n\n    if((old_al & 0xF) > 9 || old_af)\n    {\n        this.reg8[reg_al] += 6;\n        this.flags |= flag_adjust;\n    }\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] += 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_das = function()\n{\n    //dbg_log(\"das\");\n    // decimal adjust after subtraction\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf();\n\n    this.flags &= ~1;\n\n    if((old_al & 0xF) > 9 || this.getaf())\n    {\n        this.reg8[reg_al] -= 6;\n        this.flags |= flag_adjust;\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\n    }\n    else\n    {\n        this.flags &= ~flag_adjust;\n    }\n\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] -= 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_aam = function(imm8)\n{\n    //dbg_log(\"aam\");\n    // ascii adjust after multiplication\n\n    if(imm8 === 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        var temp = this.reg8[reg_al];\n        this.reg8[reg_ah] = temp / imm8;\n        this.reg8[reg_al] = temp % imm8;\n\n        this.last_result = this.reg8[reg_al];\n\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n    }\n}\n\nCPU.prototype.bcd_aad = function(imm8)\n{\n    //dbg_log(\"aad\");\n    // ascii adjust before division\n\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\n    this.last_result = result & 0xFF;\n    this.reg16[reg_ax] = this.last_result;\n    this.last_op_size = OPSIZE_8;\n\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n\n    if(result > 0xFFFF)\n    {\n        this.flags |= 1;\n    }\n}\n\nCPU.prototype.bcd_aaa = function()\n{\n    //dbg_log(\"aaa\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] += 6;\n        this.reg8[reg_ah] += 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n};\n\n\nCPU.prototype.bcd_aas = function()\n{\n    //dbg_log(\"aas\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] -= 6;\n        this.reg8[reg_ah] -= 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n}\n\n\n/*                     \\O\n * bitwise functions    |\\\n *                     / \\\n *\n * and, or, xor, test\n * shl, shr, sar, rol, ror, rcl, ror\n * shrd, shld\n *\n * bt, bts, btr, btc\n * bsf, bsr\n */\n\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\n\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\n\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand & source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand | source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand ^ source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\n\n/*\n * rotates and shifts\n */\n\nCPU.prototype.rol8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 7;\n\n    var result = dest_operand << count | dest_operand >> (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 15;\n\n    var result = dest_operand << count | dest_operand >> (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | dest_operand >>> (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 3 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 5 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1);\n\n    if(count > 1)\n    {\n        result |= dest_operand >>> (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 7;\n    var result = dest_operand >> count | dest_operand << (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 7 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 15;\n    var result = dest_operand >> count | dest_operand << (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 15 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | dest_operand << (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 31 & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\n\n    if(count > 1)\n    {\n        result |= dest_operand << (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.shl8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 8 & 1)\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 16 & 1)\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    // test this\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 4)  & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >>> (count - 1) & 1)\n                | (dest_operand >> 20) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 8)\n    {\n        this.last_result = dest_operand << 24 >> count + 24;\n        // of is zero\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 24 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 16)\n    {\n        this.last_result = dest_operand << 16 >> count + 16;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 16 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\n\n    return this.last_result;\n}\n\n\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\n\n    return this.last_result;\n}\n\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\n\n    if(count === 1)\n    {\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\n    }\n    else\n    {\n        this.flags &= ~flag_overflow;\n    }\n\n    return this.last_result;\n}\n\n\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base ^ 1 << bit_offset;\n}\n\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base | 1 << bit_offset;\n}\n\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base & ~(1 << bit_offset);\n}\n\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\n{\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\n}\n\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\n}\n\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\n}\n\nCPU.prototype.bsf16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n\n        // not defined in the docs, but value doesn't change on my intel machine\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        // http://jsperf.com/lowest-bit-index\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\n    }\n}\n\nCPU.prototype.bsf32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\n    }\n}\n\nCPU.prototype.bsr16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2(bit_base);\n    }\n}\n\nCPU.prototype.bsr32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\n    }\n}\n\nCPU.prototype.popcnt = function(v)\n{\n    this.flags_changed = 0;\n    this.flags &= ~flags_all;\n\n    if(v)\n    {\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\n        v = v - ((v >> 1) & 0x55555555);\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return 0;\n    }\n};\n\nCPU.prototype.saturate_sw_to_ub = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v >>> 0;\n    if (ret >= 0x8000) {\n        ret = 0;\n    }\n    else if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sw_to_sb = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v;\n\n    if (ret > 0xFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sw = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFF8000) {\n        ret = ret & 0xFFFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x8000;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x7FFF;\n    }\n\n    dbg_assert((ret & 0xFFFF0000) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sb = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFFFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_ub = function(v)\n{\n    let ret = v | 0;\n\n    if (ret < 0) {\n        ret = 0;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\n\nCPU.prototype.saturate_ud_to_ub = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_uw = function(v)\n{\n    dbg_assert(v >= 0);\n    return v > 0xFFFF ? 0xFFFF : v;\n};\n","/*\n * Some miscellaneous instructions:\n *\n * jmpcc16, jmpcc32, jmp16\n * loop, loope, loopne, jcxz\n * test_cc\n *\n * mov, push, pop\n * pusha, popa\n * xchg, lss\n * lea\n * enter\n * bswap\n * fxsave, fxrstor\n */\n\"use strict\";\n\nCPU.prototype.jmpcc8 = function(condition)\n{\n    var imm8 = this.read_op8s();\n    if(condition)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.jmp_rel16 = function(rel16)\n{\n    var current_cs = this.get_seg(reg_cs);\n\n    // limit ip to 16 bit\n    // ugly\n    this.instruction_pointer -= current_cs;\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\n};\n\nCPU.prototype.jmpcc16 = function(condition)\n{\n    var imm16 = this.read_op16();\n    if(condition)\n    {\n        this.jmp_rel16(imm16);\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\n\nCPU.prototype.jmpcc32 = function(condition)\n{\n    var imm32s = this.read_op32s();\n    if(condition)\n    {\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\n        //   since read_op32s modifies instruction_pointer\n\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.cmovcc16 = function(condition)\n{\n    var data = this.read_e16();\n    if(condition)\n    {\n        this.write_g16(data);\n    }\n};\n\nCPU.prototype.cmovcc32 = function(condition)\n{\n    var data = this.read_e32s();\n    if(condition)\n    {\n        this.write_g32(data);\n    }\n};\n\nCPU.prototype.setcc = function(condition)\n{\n    this.set_e8(condition ? 1 : 0)\n};\n\nCPU.prototype.loopne = function(imm8s)\n{\n    if(this.decr_ecx_asize() && !this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loope = function(imm8s)\n{\n    if(this.decr_ecx_asize() && this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loop = function(imm8s)\n{\n    if(this.decr_ecx_asize())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.jcxz = function(imm8s)\n{\n    if(this.get_reg_asize(reg_ecx) === 0)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\n/**\n * @return {number}\n * @const\n */\nCPU.prototype.getcf = function()\n{\n    if(this.flags_changed & 1)\n    {\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & 1;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getpf = function()\n{\n    if(this.flags_changed & flag_parity)\n    {\n        // inverted lookup table\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\n    }\n    else\n    {\n        return this.flags & flag_parity;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getaf = function()\n{\n    if(this.flags_changed & flag_adjust)\n    {\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\n    }\n    else\n    {\n        return this.flags & flag_adjust;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getzf = function()\n{\n    if(this.flags_changed & flag_zero)\n    {\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_zero;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getsf = function()\n{\n    if(this.flags_changed & flag_sign)\n    {\n        return this.last_result >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_sign;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getof = function()\n{\n    if(this.flags_changed & flag_overflow)\n    {\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_overflow;\n    }\n};\n\nCPU.prototype.test_o = CPU.prototype.getof;\nCPU.prototype.test_b = CPU.prototype.getcf;\nCPU.prototype.test_z = CPU.prototype.getzf;\nCPU.prototype.test_s = CPU.prototype.getsf;\nCPU.prototype.test_p = CPU.prototype.getpf;\n\nCPU.prototype.test_be = function()\n{\n    // Idea:\n    //    return this.last_op1 <= this.last_op2;\n    return this.getcf() || this.getzf();\n}\n\nCPU.prototype.test_l = function()\n{\n    // Idea:\n    //    return this.last_add_result < this.last_op2;\n    return !this.getsf() !== !this.getof();\n}\n\nCPU.prototype.test_le = function()\n{\n    // Idea:\n    //    return this.last_add_result <= this.last_op2;\n    return this.getzf() || !this.getsf() !== !this.getof();\n}\n\n\n\nCPU.prototype.push16 = function(imm16)\n{\n    var sp = this.get_stack_pointer(-2);\n\n    this.safe_write16(sp, imm16);\n    this.adjust_stack_reg(-2);\n}\n\nCPU.prototype.push32 = function(imm32)\n{\n    var sp = this.get_stack_pointer(-4);\n\n    this.safe_write32(sp, imm32);\n    this.adjust_stack_reg(-4);\n}\n\nCPU.prototype.pop16 = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read16(sp);\n\n    this.adjust_stack_reg(2);\n    return result;\n}\n\nCPU.prototype.pop32s = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read32s(sp);\n\n    this.adjust_stack_reg(4);\n    return result;\n}\n\nCPU.prototype.pusha16 = function()\n{\n    var temp = this.reg16[reg_sp];\n\n    // make sure we don't get a pagefault after having\n    // pushed several registers already\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\n\n    this.push16(this.reg16[reg_ax]);\n    this.push16(this.reg16[reg_cx]);\n    this.push16(this.reg16[reg_dx]);\n    this.push16(this.reg16[reg_bx]);\n    this.push16(temp);\n    this.push16(this.reg16[reg_bp]);\n    this.push16(this.reg16[reg_si]);\n    this.push16(this.reg16[reg_di]);\n}\n\nCPU.prototype.pusha32 = function()\n{\n    var temp = this.reg32s[reg_esp];\n\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\n\n    this.push32(this.reg32s[reg_eax]);\n    this.push32(this.reg32s[reg_ecx]);\n    this.push32(this.reg32s[reg_edx]);\n    this.push32(this.reg32s[reg_ebx]);\n    this.push32(temp);\n    this.push32(this.reg32s[reg_ebp]);\n    this.push32(this.reg32s[reg_esi]);\n    this.push32(this.reg32s[reg_edi]);\n}\n\nCPU.prototype.popa16 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(15));\n\n    this.reg16[reg_di] = this.pop16();\n    this.reg16[reg_si] = this.pop16();\n    this.reg16[reg_bp] = this.pop16();\n    this.adjust_stack_reg(2);\n    this.reg16[reg_bx] = this.pop16();\n    this.reg16[reg_dx] = this.pop16();\n    this.reg16[reg_cx] = this.pop16();\n    this.reg16[reg_ax] = this.pop16();\n}\n\nCPU.prototype.popa32 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(31));\n\n    this.reg32s[reg_edi] = this.pop32s();\n    this.reg32s[reg_esi] = this.pop32s();\n    this.reg32s[reg_ebp] = this.pop32s();\n    this.adjust_stack_reg(4);\n    this.reg32s[reg_ebx] = this.pop32s();\n    this.reg32s[reg_edx] = this.pop32s();\n    this.reg32s[reg_ecx] = this.pop32s();\n    this.reg32s[reg_eax] = this.pop32s();\n}\n\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\n        tmp = this.reg8[mod];\n\n    this.reg8[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 2 & 14,\n        tmp = this.reg16[mod];\n\n    this.reg16[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16r = function(operand)\n{\n    var temp = this.reg16[reg_ax];\n    this.reg16[reg_ax] = this.reg16[operand];\n    this.reg16[operand] = temp;\n}\n\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 3 & 7,\n        tmp = this.reg32s[mod];\n\n    this.reg32s[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg32r = function(operand)\n{\n    var temp = this.reg32s[reg_eax];\n    this.reg32s[reg_eax] = this.reg32s[operand];\n    this.reg32s[operand] = temp;\n}\n\nCPU.prototype.lss16 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read16(addr),\n        new_seg = this.safe_read16(addr + 2 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\n}\n\nCPU.prototype.lss32 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read32s(addr),\n        new_seg = this.safe_read16(addr + 4 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\n}\n\nCPU.prototype.enter16 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push16(this.reg16[reg_bp]);\n    var frame_temp = this.reg16[reg_sp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg16[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 2;\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push16(frame_temp);\n    }\n    this.reg16[reg_bp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.enter32 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push32(this.reg32s[reg_ebp]);\n    var frame_temp = this.reg32s[reg_esp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg32s[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 4;\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push32(frame_temp);\n    }\n    this.reg32s[reg_ebp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.bswap = function(reg)\n{\n    var temp = this.reg32s[reg];\n\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\n}\n\nCPU.prototype.fxsave = function(addr)\n{\n    this.writable_or_pagefault(addr, 512);\n\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\n\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\n    }\n\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\n    // instruction may not save these registers. This behavior is\n    // implementation dependent.\n    for(let i = 0; i < 8; i++)\n    {\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\n    }\n};\n\nCPU.prototype.fxrstor = function(addr)\n{\n    this.translate_address_read(addr | 0);\n    this.translate_address_read(addr + 511 | 0);\n\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\n\n    if(new_mxcsr & ~MXCSR_MASK)\n    {\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n        this.trigger_gp(0);\n    }\n\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\n\n    this.mxcsr = new_mxcsr;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\n    }\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\n    }\n};\n","\"use strict\";\n\nvar t = [];\nvar t16 = [];\nvar t32 = [];\n\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\n\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\nt16[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\nt16[0x0F] = cpu => {\n    cpu.table0F_16[cpu.read_op0F()](cpu);\n};\nt32[0x0F] = cpu => {\n    cpu.table0F_32[cpu.read_op0F()](cpu);\n};\n\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\nt16[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\nt32[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\n\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\nt16[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\nt[0x27] = cpu => { cpu.bcd_daa(); };\n\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\nt[0x2F] = cpu => { cpu.bcd_das(); };\n\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\nt[0x37] = cpu => { cpu.bcd_aaa(); };\n\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\nt[0x3F] = cpu => { cpu.bcd_aas(); };\n\n\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\n\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\n\n\nt16[0x60] = cpu => { cpu.pusha16(); };\nt32[0x60] = cpu => { cpu.pusha32(); };\nt16[0x61] = cpu => { cpu.popa16(); };\nt32[0x61] = cpu => { cpu.popa32(); };\n\nt[0x62] = cpu => {\n    // bound\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\n    dbg_assert(false);\n};\nt[0x63] = cpu => { cpu.read_modrm_byte();\n    // arpl\n    //dbg_log(\"arpl\", LOG_CPU);\n    if(cpu.protected_mode && !cpu.vm86_mode())\n    {\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\n    }\n    else\n    {\n        dbg_log(\"arpl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n};\n\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\n\nt[0x66] = cpu => {\n    // Operand-size override prefix\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0x67] = cpu => {\n    // Address-size override prefix\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\n\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\n\nt16[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\n};\nt32[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\n};\n\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\n\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\n};\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\n};\n\nt[0x6C] = cpu => { insb(cpu); };\nt16[0x6D] = cpu => { insw(cpu); };\nt32[0x6D] = cpu => { insd(cpu); };\nt[0x6E] = cpu => { outsb(cpu); };\nt16[0x6F] = cpu => { outsw(cpu); };\nt32[0x6F] = cpu => { outsd(cpu); };\n\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\n\nt[0x80] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\n    }\n};\nt16[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\n    }\n};\nt32[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\n    }\n};\nt[0x82] = t[0x80]; // alias\nt16[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\n    }\n};\nt32[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\n    }\n};\n\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\n\n\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\nt16[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\n};\nt32[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\n};\n\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\n\nt[0x8A] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g8(data);\n};\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(data);\n};\n\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\n\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\n    // lea\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    // override prefix, so modrm_resolve does not return the segment part\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\n\nt[0x8E] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n    var data = cpu.read_e16();\n    cpu.switch_seg(mod, data);\n\n    if(mod === reg_ss)\n    {\n        // run next instruction, so no interrupts are handled\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n    }\n};\n\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\n    // pop\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\n\n    cpu.adjust_stack_reg(2);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.adjust_stack_reg(-2);\n        cpu.safe_write16(addr, sp);\n        cpu.adjust_stack_reg(2);\n    } else {\n        cpu.write_reg_e16(sp);\n    }\n};\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\n\n    // change esp first, then resolve modrm address\n    cpu.adjust_stack_reg(4);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n        // Before attempting a write that might cause a page fault,\n        // we must set esp to the old value. Fuck Intel.\n        cpu.adjust_stack_reg(-4);\n        cpu.safe_write32(addr, sp);\n        cpu.adjust_stack_reg(4);\n    } else {\n        cpu.write_reg_e32(sp);\n    }\n};\n\nt[0x90] = cpu => { };\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\n\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\n\nt16[0x9A] = cpu => {\n    // callf\n    var new_ip = cpu.read_op16();\n    var new_cs = cpu.read_disp16();\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0x9A] = cpu => {\n    var new_ip = cpu.read_op32s();\n    var new_cs = cpu.read_disp16();\n\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        if(new_ip & 0xFFFF0000)\n        {\n            throw cpu.debug.unimpl(\"#GP handler\");\n        }\n    }\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0x9B] = cpu => {\n    // fwait: check for pending fpu exceptions\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\n    {\n        // task switched and MP bit is set\n        cpu.trigger_nm();\n    }\n    else\n    {\n        if(cpu.fpu)\n        {\n            cpu.fpu.fwait();\n        }\n        else\n        {\n            // EM bit isn't checked\n            // If there's no FPU, do nothing\n        }\n    }\n};\nt16[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        cpu.push16(cpu.get_eflags());\n    }\n};\nt32[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        // trap to virtual 8086 monitor\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        // vm and rf flag are cleared in image stored on the stack\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\n    }\n};\nt16[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\n\n    if(cpu.flags & flag_trap)\n    {\n        // XXX: Problems with fdgame\n        //cpu.clear_prefixes();\n        //cpu.cycle_internal();\n        cpu.flags &= ~flag_trap;\n        //cpu.instruction_pointer = cpu.previous_ip;\n        //cpu.raise_exception(1);\n    }\n    else\n    {\n        cpu.handle_irqs();\n    }\n};\nt32[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags(cpu.pop32s());\n    cpu.handle_irqs();\n};\nt[0x9E] = cpu => {\n    // sahf\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\n    cpu.flags_changed = 0;\n};\nt[0x9F] = cpu => {\n    // lahf\n    cpu.reg8[reg_ah] = cpu.get_eflags();\n};\n\nt[0xA0] = cpu => {\n    // mov\n    var data = cpu.safe_read8(cpu.read_moffs());\n    cpu.reg8[reg_al] = data;\n};\nt16[0xA1] = cpu => {\n    // mov\n    var data = cpu.safe_read16(cpu.read_moffs());\n    cpu.reg16[reg_ax] = data;\n};\nt32[0xA1] = cpu => {\n    var data = cpu.safe_read32s(cpu.read_moffs());\n    cpu.reg32s[reg_eax] = data;\n};\nt[0xA2] = cpu => {\n    // mov\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\n};\nt16[0xA3] = cpu => {\n    // mov\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\n};\nt32[0xA3] = cpu => {\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\n};\n\nt[0xA4] = cpu => { cpu.movsb(); };\nt16[0xA5] = cpu => { cpu.movsw(); };\nt32[0xA5] = cpu => { cpu.movsd(); };\nt[0xA6] = cpu => { cmpsb(cpu); };\nt16[0xA7] = cpu => { cmpsw(cpu); };\nt32[0xA7] = cpu => { cmpsd(cpu); };\n\nt[0xA8] = cpu => {\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\n};\nt16[0xA9] = cpu => {\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\n};\nt32[0xA9] = cpu => {\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\n};\n\nt[0xAA] = cpu => { stosb(cpu); };\nt16[0xAB] = cpu => { stosw(cpu); };\nt32[0xAB] = cpu => { stosd(cpu); };\nt[0xAC] = cpu => { lodsb(cpu); };\nt16[0xAD] = cpu => { lodsw(cpu); };\nt32[0xAD] = cpu => { lodsd(cpu); };\nt[0xAE] = cpu => { scasb(cpu); };\nt16[0xAF] = cpu => { scasw(cpu); };\nt32[0xAF] = cpu => { scasd(cpu); };\n\n\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\n\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\n\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt16[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt32[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n    var ip = cpu.pop32s();\n\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt16[0xC3] = cpu => {\n    // retn\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    cpu.diverged();\n};\nt32[0xC3] = cpu => {\n    // retn\n    var ip = cpu.pop32s();\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.diverged();\n};\n\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_es);\n};\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_es);\n};\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ds);\n};\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ds);\n};\n\nt[0xC6] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\n    } else {\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\n    }\n}\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\n    } else {\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\n    }\n};\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\n    } else {\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\n    }\n}\n\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\nt16[0xC9] = cpu => {\n    // leave\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 2 | 0);\n    cpu.reg16[reg_bp] = new_bp;\n};\nt32[0xC9] = cpu => {\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 4 | 0);\n    cpu.reg32s[reg_ebp] = new_ebp;\n};\nt16[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, imm16);\n    cpu.diverged();\n};\nt32[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, imm16);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xCC] = cpu => {\n    // INT3\n    // TODO: inhibit iopl checks\n    dbg_log(\"INT3\", LOG_CPU);\n    cpu.call_interrupt_vector(3, true, false);\n    cpu.diverged();\n};\nt[0xCD] = cpu => {\n    // INT\n    var imm8 = cpu.read_op8();\n    cpu.call_interrupt_vector(imm8, true, false);\n    cpu.diverged();\n};\nt[0xCE] = cpu => {\n    // INTO\n    dbg_log(\"INTO\", LOG_CPU);\n    if(cpu.getof())\n    {\n        // TODO: inhibit iopl checks\n        cpu.call_interrupt_vector(4, true, false);\n    }\n    cpu.diverged();\n};\n\nt16[0xCF] = cpu => {\n    // iret\n    cpu.iret16();\n    cpu.diverged();\n};\nt32[0xCF] = cpu => {\n    cpu.iret32();\n    cpu.diverged();\n};\n\nt[0xD0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, 1); break;\n        case 1: result = cpu.ror8(op1, 1); break;\n        case 2: result = cpu.rcl8(op1, 1); break;\n        case 3: result = cpu.rcr8(op1, 1); break;\n        case 4: result = cpu.shl8(op1, 1); break;\n        case 5: result = cpu.shr8(op1, 1); break;\n        case 6: result = cpu.shl8(op1, 1); break;\n        case 7: result = cpu.sar8(op1, 1); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, 1); break;\n        case 1: result = cpu.ror16(op1, 1); break;\n        case 2: result = cpu.rcl16(op1, 1); break;\n        case 3: result = cpu.rcr16(op1, 1); break;\n        case 4: result = cpu.shl16(op1, 1); break;\n        case 5: result = cpu.shr16(op1, 1); break;\n        case 6: result = cpu.shl16(op1, 1); break;\n        case 7: result = cpu.sar16(op1, 1); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, 1); break;\n        case 1: result = cpu.ror32(op1, 1); break;\n        case 2: result = cpu.rcl32(op1, 1); break;\n        case 3: result = cpu.rcr32(op1, 1); break;\n        case 4: result = cpu.shl32(op1, 1); break;\n        case 5: result = cpu.shr32(op1, 1); break;\n        case 6: result = cpu.shl32(op1, 1); break;\n        case 7: result = cpu.sar32(op1, 1); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD2] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD4] = cpu => {\n    cpu.bcd_aam(cpu.read_op8());\n};\nt[0xD5] = cpu => {\n    cpu.bcd_aad(cpu.read_op8());\n};\n\nt[0xD6] = cpu => {\n    // salc\n    cpu.reg8[reg_al] = -cpu.getcf();\n};\nt[0xD7] = cpu => {\n    // xlat\n    if(cpu.is_asize_32())\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\n    }\n};\n\nt[0xD8] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\n};\nt[0xD9] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\n};\nt[0xDA] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\n};\nt[0xDB] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\n};\nt[0xDC] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\n};\nt[0xDD] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\n};\nt[0xDE] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\n};\nt[0xDF] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\n};\n\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\n\nt[0xE4] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xE6] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt16[0xE8] = cpu => {\n    // call\n    var imm16 = cpu.read_op16();\n    cpu.push16(cpu.get_real_eip());\n\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE8] = cpu => {\n    // call\n    var imm32s = cpu.read_op32s();\n    cpu.push32(cpu.get_real_eip());\n\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xE9] = cpu => {\n    // jmp\n    var imm16 = cpu.read_op16();\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE9] = cpu => {\n    // jmp\n    var imm32s = cpu.read_op32s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xEA] = cpu => {\n    // jmpf\n    var ip = cpu.read_op16();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xEA] = cpu => {\n    // jmpf\n    var new_ip = cpu.read_op32s();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(new_ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt[0xEB] = cpu => {\n    // jmp near\n    var imm8 = cpu.read_op8s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xEC] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xEE] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt[0xF0] = cpu => {\n    // lock\n    //dbg_log(\"lock\", LOG_CPU);\n\n    // TODO\n    // This triggers UD when used with\n    // some instructions that don't write to memory\n    cpu.run_prefix_instruction();\n};\nt[0xF1] = cpu => {\n    // INT1\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\n    throw cpu.debug.unimpl(\"int1 instruction\");\n};\n\nt[0xF2] = cpu => {\n    // repnz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPNZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\nt[0xF3] = cpu => {\n    // repz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0xF4] = cpu => {\n    cpu.hlt_op();\n};\n\nt[0xF5] = cpu => {\n    // cmc\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\n    cpu.flags_changed &= ~1;\n};\n\nt[0xF6] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 1:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 2:\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\n            break;\n        case 4:\n            var data = cpu.read_e8(); cpu.mul8(data);\n            break;\n        case 5:\n            var data = cpu.read_e8s(); cpu.imul8(data);\n            break;\n        case 6:\n            var data = cpu.read_e8(); cpu.div8(data);\n            break;\n        case 7:\n            var data = cpu.read_e8s(); cpu.idiv8(data);\n            break;\n    }\n};\n\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 1:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 2:\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\n            break;\n        case 4:\n            var data = cpu.read_e16(); cpu.mul16(data);\n            break;\n        case 5:\n            var data = cpu.read_e16s(); cpu.imul16(data);\n            break;\n        case 6:\n            var data = cpu.read_e16(); cpu.div16(data);\n            break;\n        case 7:\n            var data = cpu.read_e16s(); cpu.idiv16(data);\n            break;\n    }\n};\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 1:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 2:\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\n            break;\n        case 4:\n            var data = cpu.read_e32(); cpu.mul32(data);\n            break;\n        case 5:\n            var data = cpu.read_e32s(); cpu.imul32(data);\n            break;\n        case 6:\n            var data = cpu.read_e32(); cpu.div32(data);\n            break;\n        case 7:\n            var data = cpu.read_e32s(); cpu.idiv32(data);\n            break;\n    }\n};\n\nt[0xF8] = cpu => {\n    // clc\n    cpu.flags &= ~flag_carry;\n    cpu.flags_changed &= ~1;\n};\nt[0xF9] = cpu => {\n    // stc\n    cpu.flags |= flag_carry;\n    cpu.flags_changed &= ~1;\n};\n\nt[0xFA] = cpu => {\n    // cli\n    //dbg_log(\"interrupts off\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags &= ~flag_interrupt;\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags &= ~flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"cli #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n};\nt[0xFB] = cpu => {\n    // sti\n    //dbg_log(\"interrupts on\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags |= flag_interrupt;\n\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n\n        cpu.handle_irqs();\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags |= flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"sti #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n\n};\n\nt[0xFC] = cpu => {\n    // cld\n    cpu.flags &= ~flag_direction;\n};\nt[0xFD] = cpu => {\n    // std\n    cpu.flags |= flag_direction;\n};\n\nt[0xFE] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte & 56;\n\n    if(mod === 0)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\n    }\n    else if(mod === 8)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\n    }\n    else\n    {\n        cpu.todo();\n    }\n};\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e16();\n            cpu.push16(cpu.get_real_eip());\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e16();\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // 6, push\n            var data = cpu.read_e16();\n            cpu.push16(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e32s();\n            cpu.push32(cpu.get_real_eip());\n\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e32s();\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // push\n            var data = cpu.read_e32s();\n            cpu.push32(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\n\nvar table16 = [];\nvar table32 = [];\nCPU.prototype.table16 = table16;\nCPU.prototype.table32 = table32;\n\nfor(var i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table16[i] = table32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table16[i] = t16[i];\n        table32[i] = t32[i];\n    }\n}\n\nt = [];\nt16 = [];\nt32 = [];\n\n// 0F ops start here\n\nt[0x00] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        // No GP, UD is correct here\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            // sldt\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 1:\n            // str\n            cpu.set_e16(cpu.sreg[reg_tr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 2:\n            // lldt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_ldt(data);\n            break;\n        case 3:\n            // ltr\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_tr(data);\n            break;\n        case 4:\n            cpu.verr(cpu.read_e16());\n            break;\n        case 5:\n            cpu.verw(cpu.read_e16());\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0x01] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    if(mod === 4)\n    {\n        // smsw\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\n        {\n            cpu.set_e32(cpu.cr[0]);\n        }\n        else\n        {\n            cpu.set_e16(cpu.cr[0]);\n        }\n        return;\n    }\n    else if(mod === 6)\n    {\n        // lmsw\n        if(cpu.cpl)\n        {\n            cpu.trigger_gp(0);\n        }\n\n        var cr0 = cpu.read_e16();\n\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\n\n        if(cpu.protected_mode)\n        {\n            // lmsw cannot be used to switch back\n            cr0 |= CR0_PE;\n        }\n\n        cpu.set_cr0(cr0);\n        return;\n    }\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        // only memory\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n    switch(mod)\n    {\n        case 0:\n            // sgdt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.gdtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\n            break;\n        case 1:\n            // sidt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.idtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\n            break;\n        case 2:\n            // lgdt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.gdtr_size = size;\n            cpu.gdtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.gdtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\n            //cpu.debug.dump_state();\n            //cpu.debug.dump_regs_short();\n            //cpu.debug.dump_gdt_ldt();\n            break;\n        case 3:\n            // lidt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.idtr_size = size;\n            cpu.idtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.idtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\n            break;\n        case 7:\n            // flush translation lookaside buffer\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            cpu.invlpg(addr);\n            break;\n        default:\n            dbg_log(mod);\n            cpu.todo();\n    }\n};\n\nt16[0x02] = cpu => { cpu.read_modrm_byte();\n    // lar\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\n};\nt32[0x02] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\n};\n\nt16[0x03] = cpu => { cpu.read_modrm_byte();\n    // lsl\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\n};\nt32[0x03] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\n};\n\nt[0x04] = cpu => { cpu.undefined_instruction(); };\nt[0x05] = cpu => { cpu.undefined_instruction(); };\n\nt[0x06] = cpu => {\n    // clts\n    if(cpu.cpl)\n    {\n        dbg_log(\"clts #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        //dbg_log(\"clts\", LOG_CPU);\n        cpu.cr[0] &= ~CR0_TS;\n    }\n};\n\nt[0x07] = cpu => { cpu.undefined_instruction(); };\nt[0x08] = cpu => {\n    // invd\n    cpu.todo();\n};\n\nt[0x09] = cpu => {\n    if(cpu.cpl)\n    {\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    // wbinvd\n};\n\n\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\nt[0x0B] = cpu => {\n    // UD2\n    cpu.trigger_ud();\n};\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\n\nt[0x0D] = cpu => {\n    // nop\n    cpu.todo();\n};\n\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\n\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\nt[0x12] = cpu => {\n    // movlpd xmm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem64s();\n    cpu.write_xmm64(data[0], data[1]);\n};\nt[0x13] = cpu => {\n    // movlpd xmm/m64, xmm\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x18] = cpu => { cpu.read_modrm_byte();\n    // prefetch\n    // nop for us\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\nt[0x1E] = cpu => { cpu.unimplemented_sse(); };\nt[0x1F] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\n\nt[0x20] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\n\n    // mov addr, cr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.write_reg_e32(cpu.cr[0]);\n            break;\n        case 2:\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\n            cpu.write_reg_e32(cpu.cr[2]);\n            break;\n        case 3:\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\n            cpu.write_reg_e32(cpu.cr[3]);\n            break;\n        case 4:\n            cpu.write_reg_e32(cpu.cr[4]);\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\n\nt[0x21] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\n\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x22] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var data = cpu.read_reg_e32s();\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\n\n    // mov cr, addr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.set_cr0(data);\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 2:\n            cpu.cr[2] = data;\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 3:\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\n            data &= ~0b111111100111;\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\n            cpu.cr[3] = data;\n            cpu.clear_tlb();\n\n            //dump_page_directory();\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\n            break;\n\n        case 4:\n            cpu.set_cr4(data);\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\nt[0x23] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\n\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x24] = cpu => { cpu.undefined_instruction(); };\nt[0x25] = cpu => { cpu.undefined_instruction(); };\nt[0x26] = cpu => { cpu.undefined_instruction(); };\nt[0x27] = cpu => { cpu.undefined_instruction(); };\n\nt[0x28] = cpu => {\n    // movaps xmm, xmm/m128\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem128s();\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n};\nt[0x29] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movapd xmm/m128, xmm\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movaps xmm/m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n};\nt[0x2A] = cpu => { cpu.unimplemented_sse(); };\nt[0x2B] = cpu => { cpu.unimplemented_sse(); };\nt[0x2C] = cpu => { cpu.unimplemented_sse(); };\nt[0x2D] = cpu => { cpu.unimplemented_sse(); };\nt[0x2E] = cpu => { cpu.unimplemented_sse(); };\nt[0x2F] = cpu => { cpu.unimplemented_sse(); };\n\n// wrmsr\nt[0x30] = cpu => {\n    // wrmsr - write maschine specific register\n\n    if(cpu.cpl)\n    {\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n    var low = cpu.reg32s[reg_eax];\n    var high = cpu.reg32s[reg_edx];\n\n    if(index !== IA32_SYSENTER_ESP)\n    {\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\n    }\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            cpu.sysenter_cs = low & 0xFFFF;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            cpu.sysenter_eip = low;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            cpu.sysenter_esp = low;\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case IA32_KERNEL_GS_BASE:\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\n            dbg_log(\"GS Base written\", LOG_CPU);\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n};\n\nt[0x31] = cpu => {\n    // rdtsc - read timestamp counter\n\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\n    {\n        var n = v86.microtick() - cpu.tsc_offset;\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\n\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\n\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\n    }\n    else\n    {\n        cpu.trigger_gp(0);\n    }\n};\n\nt[0x32] = cpu => {\n    // rdmsr - read maschine specific register\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\n\n    var low = 0;\n    var high = 0;\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            low = cpu.sysenter_cs;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            low = cpu.sysenter_eip;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            low = cpu.sysenter_esp;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var n = v86.microtick() - cpu.tsc_offset;\n            low = n * TSC_RATE;\n            high = n * (TSC_RATE / 0x100000000);\n            break;\n\n        case IA32_PLATFORM_ID:\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            if(ENABLE_ACPI)\n            {\n                low = APIC_ADDRESS;\n\n                if(cpu.apic_enabled)\n                {\n                    low |= IA32_APIC_BASE_EN;\n                }\n            }\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            break;\n\n        case IA32_RTIT_CTL:\n            // linux4\n            break;\n\n        case MSR_SMI_COUNT:\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case MSR_PKG_C2_RESIDENCY:\n            break;\n\n        case MSR_EBC_FREQUENCY_ID:\n            low = 1 << 24;\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n\n    cpu.reg32s[reg_eax] = low;\n    cpu.reg32s[reg_edx] = high;\n};\n\nt[0x33] = cpu => {\n    // rdpmc\n    cpu.todo();\n};\n\nt[0x34] = cpu => {\n    // sysenter\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\n\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\n\n    cpu.instruction_pointer = cpu.sysenter_eip;\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\n\n    cpu.sreg[reg_cs] = seg;\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 0;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 8;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x35] = cpu => {\n    // sysexit\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\n\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\n\n    cpu.sreg[reg_cs] = seg + 16 | 3;\n\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 3;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 24 | 3;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x36] = cpu => { cpu.undefined_instruction(); };\n\nt[0x37] = cpu => {\n    // getsec\n    cpu.todo();\n};\n\n// sse3+\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\n\n// cmov\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\n\n\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\nt[0x57] = cpu => {\n    // xorps xmm, xmm/mem128\n    // xorpd xmm, xmm/mem128\n    // Note: Same code as pxor\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_xmm_mem128s();\n    let destination = cpu.read_xmm128s();\n\n    cpu.write_xmm128s(\n        source[0] ^ destination[0],\n        source[1] ^ destination[1],\n        source[2] ^ destination[2],\n        source[3] ^ destination[3]\n    );\n};\n\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x60] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\n        );\n    }\n    else\n    {\n        // punpcklbw mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let byte0 = destination_low & 0xFF;\n        let byte1 = source & 0xFF;\n        let byte2 = (destination_low >> 8) & 0xFF;\n        let byte3 = (source >> 8) & 0xFF;\n        let byte4 = (destination_low >> 16) & 0xFF;\n        let byte5 = (source >> 16) & 0xFF;\n        let byte6 = destination_low >>> 24;\n        let byte7 = source >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x61] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklwd xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination16[0] | source16[0] << 16,\n            destination16[1] | source16[1] << 16,\n            destination16[2] | source16[2] << 16,\n            destination16[3] | source16[3] << 16\n        );\n    }\n    else\n    {\n        // punpcklwd mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let word0 = destination_low & 0xFFFF;\n        let word1 = source & 0xFFFF;\n        let word2 = destination_low >>> 16;\n        let word3 = source >>> 16;\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x62] = cpu => {\n    // punpckldq mm, mm/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem32s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n    let low = destination_low;\n    let high = source;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x63] = cpu => {\n    // packsswb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\n\n    let high = 0;\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x64] = cpu => {\n    // pcmpgtb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x65] = cpu => {\n    // pcmpgtw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x66] = cpu => {\n    // pcmpgtd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low > source[0] ? -1 : 0;\n    let high = destination_high > source[1] ? -1 : 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x67] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 8; i++)\n        {\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\n    }\n    else\n    {\n        // packuswb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = 0;\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\n\n        let high = 0;\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x68] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpckhbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\n        );\n    }\n    else\n    {\n        // punpckhbw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let byte0 = destination_high & 0xFF;\n        let byte1 = source[1] & 0xFF;\n        let byte2 = (destination_high >> 8) & 0xFF;\n        let byte3 = (source[1] >> 8) & 0xFF;\n        let byte4 = (destination_high >> 16) & 0xFF;\n        let byte5 = (source[1] >> 16) & 0xFF;\n        let byte6 = destination_high >>> 24;\n        let byte7 = source[1] >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x69] = cpu => {\n    // punpckhwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = destination_high & 0xFFFF;\n    let word1 = source[1] & 0xFFFF;\n    let word2 = destination_high >>> 16;\n    let word3 = source[1] >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6A] = cpu => {\n    // punpckhdq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_high;\n    let high = source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6B] = cpu => {\n    // packssdw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= cpu.saturate_sd_to_sw(destination_low);\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\n\n    let high = 0;\n    high |= cpu.saturate_sd_to_sw(source[0]);\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\nt[0x6E] = cpu => {\n    // movd mm, r/m32\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        let data = cpu.read_e32s();\n        cpu.write_xmm128s(data, 0, 0, 0);\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_e32s();\n        cpu.write_mmx64s(data, 0);\n    }\n};\nt[0x6F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm, xmm/mem128\n        let data = cpu.read_xmm_mem128s();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm, xmm/m128\n        let data = cpu.read_xmm_mem128s_unaligned();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx_mem64s();\n        cpu.write_mmx64s(data[0], data[1]);\n    }\n};\n\nt[0x70] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // pshufd xmm, xmm/mem128\n        let source = cpu.read_xmm_mem128s();\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[order & 3],\n            source[order >> 2 & 3],\n            source[order >> 4 & 3],\n            source[order >> 6 & 3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\n    {\n        // pshuflw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\n            source[2],\n            source[3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // pshufhw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[0],\n            source[1],\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\n        );\n    }\n    else\n    {\n        // pshufw mm1, mm2/m64, imm8\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let order = cpu.read_op8();\n\n        let word0_shift = order & 0b11;\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\n        let word1_shift = (order >> 2) & 0b11;\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\n        let low = word0 | word1 << 16;\n\n        let word2_shift = (order >> 4) & 0b11;\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\n        let word3_shift = (order >>> 6);\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0x71] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlw, psraw, psllw\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = (destination_low & 0xFFFF) >>> shift;\n                var word1 = (destination_low >>> 16) >>> shift;\n                low = word0 | word1 << 16;\n\n                var word2 = (destination_high & 0xFFFF) >>> shift;\n                var word3 = (destination_high >>> 16) >>> shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psraw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 15) {\n                shift = 16;\n            }\n\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n            var low = word0 | word1 << 16;\n\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n            var high = word2 | word3 << 16;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n                var word1 = (destination_low >>> 16) << shift;\n                low = word0 | word1 << 16;\n\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n                var word3 = (destination_high >>> 16) << shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x72] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrld, psrad, pslld\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift;\n                high = destination_high >>> shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psrad mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 31) {\n                shift = 31;\n            }\n\n            var low = destination_low >> shift;\n            var high = destination_high >> shift;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // pslld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x73] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlq, psllq\n    //     2,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift | (destination_high << (32 - shift));\n                high = destination_high >>> shift;\n            }\n            else if (shift <= 63) {\n                low = destination_high >>> (shift & 0x1F);\n                high = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift | (destination_low >>> (32 - shift));\n            }\n            else if (shift <= 63) {\n                high = destination_low << (shift & 0x1F);\n                low = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x74] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqb xmm, xmm/m128\n        let source64s = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let destination128 = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination128.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // pcmpeqb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source64s = cpu.read_mmx_mem64s();\n        let source8s = new Int8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8s = cpu.reg_mmx8s;\n\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x75] = cpu => {\n    // pcmpeqw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x76] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqd xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] === destination[0] ? -1 : 0,\n            source[1] === destination[1] ? -1 : 0,\n            source[2] === destination[2] ? -1 : 0,\n            source[3] === destination[3] ? -1 : 0\n        );\n    }\n    else\n    {\n        // pcmpeqd mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = destination_low === source[0] ? -1 : 0;\n        let high = destination_high === source[1] ? -1 : 0;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x77] = cpu => {\n    // emms\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.fpu.stack_empty = 0xFF;\n};\n\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\nt[0x7E] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // movq xmm, xmm/mem64\n        let data = cpu.read_xmm_mem64s();\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movd r/m32, xmm\n        let data = cpu.read_xmm64s();\n        cpu.set_e32(data[0]);\n    }\n    else\n    {\n        // movd r/m32, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx64s();\n        cpu.set_e32(data[0]);\n    }\n};\nt[0x7F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm/m64, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let data = cpu.read_mmx64s();\n        cpu.set_mmx_mem64s(data[0], data[1]);\n    }\n};\n\n// jmpcc\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\n\n// setcc\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\n\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\nt16[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0xA2] = cpu => { cpu.cpuid(); };\n\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\n    }\n};\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\n    }\n};\n\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xA6] = cpu => {\n    // obsolete cmpxchg (os/2)\n    cpu.trigger_ud();\n};\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\n\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\nt16[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\n\nt[0xAA] = cpu => {\n    // rsm\n    cpu.todo();\n};\n\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xAE] = cpu => { cpu.read_modrm_byte();\n    // xsave, xrstor, ...\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: // fxsave\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxsave(addr);\n            break;\n\n        case 1: // fxrstor\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxrstor(addr);\n            break;\n\n        case 2: // ldmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            let new_mxcsr = cpu.safe_read32s(addr);\n            if(new_mxcsr & ~MXCSR_MASK)\n            {\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n                cpu.trigger_gp(0);\n            }\n            cpu.mxcsr = new_mxcsr;\n            break;\n\n        case 3: // stmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.safe_write32(addr, cpu.mxcsr);\n            break;\n\n        case 5:\n            // lfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 6:\n            // mfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 7:\n            // sfence or clflush\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        default:\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\n};\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\n};\n\nt[0xB0] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg8\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 1);\n\n        var data = cpu.safe_read8(virt_addr);\n    }\n    else\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\n\n\n    cpu.cmp8(cpu.reg8[reg_al], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, cpu.read_g8());\n        else\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, data);\n\n        cpu.reg8[reg_al] = data;\n    }\n};\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg16/32\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 2);\n\n        var data = cpu.safe_read16(virt_addr);\n    }\n    else\n        data = cpu.read_reg_e16();\n\n    cpu.cmp16(cpu.reg16[reg_ax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, cpu.read_g16());\n        else\n            cpu.write_reg_e16(cpu.read_g16());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, data);\n\n        cpu.reg16[reg_ax] = data;\n    }\n};\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 4);\n\n        var data = cpu.safe_read32s(virt_addr);\n    }\n    else\n    {\n        data = cpu.read_reg_e32s();\n    }\n\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\n        else\n            cpu.write_reg_e32(cpu.read_g32s());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, data);\n\n        cpu.reg32s[reg_eax] = data;\n    }\n};\n\n// lss\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ss);\n};\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ss);\n};\n\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n// lfs, lgs\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_fs);\n};\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_fs);\n};\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_gs);\n};\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_gs);\n};\n\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    var data = cpu.read_e8();\n    cpu.write_g16(data);\n};\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g32(data);\n};\n\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g32(data);\n};\n\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\n    // popcnt\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.popcnt(data));\n};\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.popcnt(data));\n};\n\nt[0xB9] = cpu => {\n    // UD\n    cpu.todo();\n};\n\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\n\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\n};\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\n};\n\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\n};\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\n};\n\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    var data = cpu.read_e8s();\n    cpu.write_g16(data);\n};\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8s();\n    cpu.write_g32(data);\n};\n\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\n\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g32(data);\n};\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\n};\n\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16();\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32();\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\n};\n\n\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\nt[0xC3] = cpu => {\n    // movnti\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n    cpu.set_e32(cpu.read_g32s());\n};\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xC7] = cpu => {\n    cpu.read_modrm_byte();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 1:\n            // cmpxchg8b\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                cpu.trigger_ud();\n            }\n\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.writable_or_pagefault(addr, 8);\n\n            var m64_low = cpu.safe_read32s(addr);\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\n\n            if(cpu.reg32s[reg_eax] === m64_low &&\n               cpu.reg32s[reg_edx] === m64_high)\n            {\n                cpu.flags |= flag_zero;\n\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\n            }\n            else\n            {\n                cpu.flags &= ~flag_zero;\n\n                cpu.reg32s[reg_eax] = m64_low;\n                cpu.reg32s[reg_edx] = m64_high;\n\n                cpu.safe_write32(addr, m64_low);\n                cpu.safe_write32(addr + 4 | 0, m64_high);\n            }\n\n            cpu.flags_changed &= ~flag_zero;\n            break;\n\n        case 6:\n            var has_rand = v86util.has_rand_int();\n\n            if(has_rand)\n            {\n                var rand = v86util.get_rand_int();\n            }\n            else\n            {\n                var rand = 0;\n            }\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\n\n            if(cpu.is_osize_32())\n            {\n                cpu.set_e32(rand);\n            }\n            else\n            {\n                cpu.set_e16(rand);\n            }\n\n            cpu.flags &= ~flags_all;\n            cpu.flags |= has_rand;\n            cpu.flags_changed = 0;\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\n\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xD1] = cpu => {\n    // psrlw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = (destination_low & 0xFFFF) >>> shift;\n        let word1 = (destination_low >>> 16) >>> shift;\n        low = word0 | word1 << 16;\n\n        let word2 = (destination_high & 0xFFFF) >>> shift;\n        let word3 = (destination_high >>> 16) >>> shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD2] = cpu => {\n    // psrld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift;\n        high = destination_high >>> shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD3] = cpu => {\n    // psrlq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift | (destination_high << (32 - shift));\n        high = destination_high >>> shift;\n    }\n    else if (shift <= 63) {\n        low = destination_high >>> (shift & 0x1F);\n        high = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\nt[0xD5] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmullw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\n        );\n    }\n    else\n    {\n        // pmullw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\n        let low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0xD6] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // movq xmm/m64, xmm\n    var data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0xD7] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n\n    // pmovmskb reg, xmm\n    let data = cpu.read_xmm_mem128s();\n    let data8 = new Uint8Array(data.buffer);\n    let result =\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\n    cpu.write_g32(result);\n};\n\nt[0xD8] = cpu => {\n    // psubusb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8 = new Uint8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8 = cpu.reg_mmx8;\n\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD9] = cpu => {\n    // psubusw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\n    if (word0 < 0) {\n        word0 = 0;\n    }\n    if (word1 < 0) {\n        word1 = 0;\n    }\n\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\n    if (word2 < 0) {\n        word2 = 0;\n    }\n    if (word3 < 0) {\n        word3 = 0;\n    }\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDA] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pminub xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source8 = new Uint8Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination8 = new Uint8Array(destination.buffer);\n\n    let result = cpu.create_atom128s(0, 0, 0, 0);\n    let result8 = new Uint8Array(result.buffer);\n\n    for(let i = 0; i < 16; i++)\n    {\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\n    }\n\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n};\nt[0xDB] = cpu => {\n    // pand mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & destination_low;\n    let high = source[1] & destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDC] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusb xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // paddusb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source64s = cpu.read_mmx_mem64s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8 = cpu.reg_mmx8;\n\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDD] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusw mm, mm/m64\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\n        );\n    }\n    else\n    {\n        // paddusw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDE] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmaxub xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\nt[0xDF] = cpu => {\n    // pandn mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & ~destination_low;\n    let high = source[1] & ~destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xE1] = cpu => {\n    // psraw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 15) {\n        shift = 16;\n    }\n\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE2] = cpu => {\n    // psrad mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 31) {\n        shift = 31;\n    }\n\n    let low = destination_low >> shift;\n    let high = destination_high >> shift;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\nt[0xE4] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pmulhuw xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source16 = new Uint16Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination16 = new Uint16Array(destination.buffer);\n\n    cpu.write_xmm128s(\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\n    );\n};\n\nt[0xE5] = cpu => {\n    // pmulhw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\nt[0xE7] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let data = cpu.read_xmm128s();\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\n\nt[0xE8] = cpu => {\n    // psubsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE9] = cpu => {\n    // psubsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xEB] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // por xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] | destination[0],\n            source[1] | destination[1],\n            source[2] | destination[2],\n            source[3] | destination[3]\n        );\n    }\n    else\n    {\n        // por mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] | destination_low;\n        let high = source[1] | destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xEC] = cpu => {\n    // paddsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xED] = cpu => {\n    // paddsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\nt[0xEF] = cpu => {\n    // pxor mm, mm/m64\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] ^ destination[0],\n            source[1] ^ destination[1],\n            source[2] ^ destination[2],\n            source[3] ^ destination[3]\n        );\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] ^ destination_low;\n        let high = source[1] ^ destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF1] = cpu => {\n    // psllw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n        let word1 = (destination_low >>> 16) << shift;\n        low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n        let word3 = (destination_high >>> 16) << shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF2] = cpu => {\n    // pslld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF3] = cpu => {\n    // psllq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift | (destination_low >>> (32 - shift));\n    }\n    else if (shift <= 63) {\n        high = destination_low << (shift & 0x1F);\n        low = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF4] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF5] = cpu => {\n    // pmaddwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\n\n    let low = mul0 + mul1 | 0;\n    let high = mul2 + mul3 | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF8] = cpu => {\n    // psubb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF9] = cpu => {\n    // psubw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low - source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high - source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFA] = cpu => {\n    // psubd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low - source[0];\n    let high = destination_high - source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xFC] = cpu => {\n    // paddb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFD] = cpu => {\n    // paddw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low + source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high + source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFE] = cpu => {\n    // paddd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low + source[0] | 0;\n    let high = destination_high + source[1] | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFF] = cpu => {\n    // Windows 98\n    dbg_log(\"#ud: 0F FF\");\n    cpu.trigger_ud();\n};\n\n\nvar table0F_16 = [];\nvar table0F_32 = [];\nCPU.prototype.table0F_16 = table0F_16;\nCPU.prototype.table0F_32 = table0F_32;\n\nfor(i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table0F_16[i] = table0F_32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table0F_16[i] = t16[i];\n        table0F_32[i] = t32[i];\n    }\n}\n","\"use strict\";\n\nCPU.prototype.debug_init = function()\n{\n    var cpu = this;\n    var debug = {};\n    this.debug = debug;\n\n    /**\n     * wheter or not in step mode\n     * used for debugging\n     * @type {boolean}\n     */\n    debug.step_mode = false;\n    debug.ops = undefined;\n    debug.all_ops = [];\n\n    debug.trace_all = false;\n\n    // \"log\" some information visually to the user.\n    // Also in non-DEBUG modes\n    debug.show = function(x)\n    {\n        if(typeof document !== \"undefined\")\n        {\n            var el = document.getElementById(\"log\");\n\n            if(el)\n            {\n                el.textContent += x + \"\\n\";\n                el.style.display = \"block\";\n                el.scrollTop = 1e9;\n                return;\n            }\n        }\n\n        console.log(x);\n    };\n\n    debug.init = function()\n    {\n        if(!DEBUG) return;\n\n        // used for debugging\n        debug.ops = new CircularQueue(200000);\n\n        if(cpu.io)\n        {\n            // write seabios debug output to console\n            var seabios_debug = \"\";\n\n            cpu.io.register_write(0x402, this, handle); // seabios\n            cpu.io.register_write(0x500, this, handle); // vgabios\n        }\n\n        function handle(out_byte)\n        {\n            if(out_byte === 10)\n            {\n                dbg_log(seabios_debug, LOG_BIOS);\n                seabios_debug = \"\";\n            }\n            else\n            {\n                seabios_debug += String.fromCharCode(out_byte);\n            }\n        }\n    };\n\n    debug.get_regs_short = get_regs_short;\n    debug.dump_regs = dump_regs_short;\n    debug.dump_instructions = dump_instructions;\n    debug.get_instructions = get_instructions;\n    debug.get_state = get_state;\n    debug.dump_state = dump_state;\n    debug.dump_stack = dump_stack;\n\n    debug.dump_page_directory = dump_page_directory;\n    debug.dump_gdt_ldt = dump_gdt_ldt;\n    debug.dump_idt = dump_idt;\n\n    debug.get_memory_dump = get_memory_dump;\n    debug.memory_hex_dump = memory_hex_dump;\n    debug.used_memory_dump = used_memory_dump;\n\n    debug.step = step;\n    debug.run_until = run_until;\n\n    /**\n     * @param {string=} msg\n     */\n    debug.unimpl = function(msg)\n    {\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\n\n        debug.show(s);\n\n        if(DEBUG)\n        {\n            console.trace();\n            return s;\n        }\n        else\n        {\n            debug.show(\"Execution stopped\");\n            return s;\n        }\n        //this.name = \"Unimplemented\";\n    };\n\n    function step()\n    {\n        if(!DEBUG) return;\n\n        if(!cpu.running)\n        {\n            cpu.cycle();\n        }\n\n        dump_regs_short();\n        var now = Date.now();\n\n        cpu.running = false;\n        dump_instructions();\n    }\n\n    function run_until()\n    {\n        if(!DEBUG) return;\n\n        cpu.running = false;\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\n        if(a) while(cpu.instruction_pointer != a) step();\n    }\n\n    // http://ref.x86asm.net/x86reference.xml\n    // for debuggin\" purposes\n    var opcode_map = [\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\n    ];\n\n    debug.logop = function(_ip, op)\n    {\n        if(!DEBUG || !debug.step_mode)\n        {\n            return;\n        }\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            debug.all_ops.push(_ip, op);\n        }\n        else if(debug.ops)\n        {\n            debug.ops.add(_ip);\n            debug.ops.add(op);\n        }\n    };\n\n    function dump_stack(start, end)\n    {\n        if(!DEBUG) return;\n\n        var esp = cpu.reg32[reg_esp];\n        dbg_log(\"========= STACK ==========\");\n\n        if(end >= start || end === undefined)\n        {\n            start = 5;\n            end = -5;\n        }\n\n        for(var i = start; i > end; i--)\n        {\n            var line = \"    \";\n\n            if(!i) line = \"=>  \";\n\n            line += h(i, 2) + \" | \";\n\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\n        }\n    }\n\n    function get_state(where)\n    {\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\n        var flags = cpu.get_eflags();\n        var iopl = cpu.getiopl();\n        var cpl = cpu.cpl;\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\n\n        var flag_names = {\n            [flag_carry]: \"c\",\n            [flag_parity]: \"p\",\n            [flag_adjust]: \"a\",\n            [flag_zero]: \"z\",\n            [flag_sign]: \"s\",\n            [flag_trap]: \"t\",\n            [flag_interrupt]: \"i\",\n            [flag_direction]: \"d\",\n            [flag_overflow]: \"o\",\n        };\n        var flag_string = \"\";\n\n        for(var i = 0; i < 16; i++)\n        {\n            if(flag_names[1 << i])\n            {\n                if(flags & 1 << i)\n                {\n                    flag_string += flag_names[1 << i];\n                }\n                else\n                {\n                    flag_string += \" \";\n                }\n            }\n        }\n\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\n                \" ss:esp=\" + ss_esp +\n                \" ssize=\" + (+cpu.stack_size_32) +\n                (where ? \" in \" + where : \"\"));\n    }\n\n    function dump_state(where)\n    {\n        if(!DEBUG) return;\n\n        dbg_log(get_state(where), LOG_CPU);\n    }\n\n    function get_regs_short()\n    {\n        var\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\n            line1 = \"\",\n            line2 = \"\";\n\n\n\n        for(var i = 0; i < 4; i++)\n        {\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\n        }\n\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\n\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\n\n        return [line1, line2];\n    }\n\n    function dump_regs_short()\n    {\n        if(!DEBUG) return;\n\n        var lines = get_regs_short();\n\n        dbg_log(lines[0], LOG_CPU);\n        dbg_log(lines[1], LOG_CPU);\n    }\n\n    function get_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.step_mode = true;\n\n        function add(ip, op)\n        {\n            out += h(ip, 8)  + \":        \" +\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\n        }\n\n        var opcodes;\n        var out = \"\";\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            opcodes = debug.all_ops;\n        }\n        else if(debug.ops)\n        {\n            opcodes = debug.ops.toArray();\n        }\n\n        if(!opcodes)\n        {\n            return \"\";\n        }\n\n        for(var i = 0; i < opcodes.length; i += 2)\n        {\n            add(opcodes[i], opcodes[i + 1]);\n        }\n\n        debug.ops.clear();\n        debug.all_ops = [];\n\n        return out;\n    }\n\n    function dump_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.show(get_instructions());\n    }\n\n    function dump_gdt_ldt()\n    {\n        if(!DEBUG) return;\n\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\n\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\n\n        function dump_table(addr, size)\n        {\n            for(var i = 0; i < size; i += 8, addr += 8)\n            {\n                var base = cpu.read16(addr + 2) |\n                        cpu.read8(addr + 4) << 16 |\n                        cpu.read8(addr + 7) << 24,\n\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\n                    access = cpu.read8(addr + 5),\n                    flags = cpu.read8(addr + 6) >> 4,\n                    flags_str = \"\",\n                    dpl = access >> 5 & 3;\n\n                if(!(access & 128))\n                {\n                    // present bit not set\n                    //continue;\n                    flags_str += \"NP \";\n                }\n                else\n                {\n                    flags_str += \" P \";\n                }\n\n                if(access & 16)\n                {\n                    if(flags & 4)\n                    {\n                        flags_str += \"32b \";\n                    }\n                    else\n                    {\n                        flags_str += \"16b \";\n                    }\n\n                    if(access & 8)\n                    {\n                        // executable\n                        flags_str += \"X \";\n\n                        if(access & 4)\n                        {\n                            flags_str += \"C \";\n                        }\n                    }\n                    else\n                    {\n                        // data\n                        flags_str += \"R \";\n                    }\n\n                    flags_str += \"RW \";\n                }\n                else\n                {\n                    // system\n                    flags_str += \"sys: \" + h(access & 15);\n                }\n\n                if(flags & 8)\n                {\n                    limit = limit << 12 | 0xFFF;\n                }\n\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\n                        \", f = \" + flags.toString(2));\n            }\n        }\n    }\n\n    function dump_idt()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < cpu.idtr_size; i += 8)\n        {\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\n                selector = cpu.read16(addr + 2),\n                type = cpu.read8(addr + 5),\n                line,\n                dpl = type >> 5 & 3;\n\n            if((type & 31) === 5)\n            {\n                line = \"task gate \";\n            }\n            else if((type & 31) === 14)\n            {\n                line = \"intr gate \";\n            }\n            else if((type & 31) === 15)\n            {\n                line = \"trap gate \";\n            }\n            else\n            {\n                line = \"invalid   \";\n            }\n\n\n            if(type & 128)\n            {\n                line += \" P\";\n            }\n            else\n            {\n                // present bit not set\n                //continue;\n                line += \"NP\";\n            }\n\n\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\n        }\n    }\n\n    function load_page_entry(dword_entry, is_directory)\n    {\n        if(!DEBUG) return;\n\n        if(!(dword_entry & 1))\n        {\n            // present bit not set\n            return false;\n        }\n\n        var size = (dword_entry & 128) === 128,\n            address;\n\n        if(size && !is_directory)\n        {\n            address = dword_entry & 0xFFC00000;\n        }\n        else\n        {\n            address = dword_entry & 0xFFFFF000;\n        }\n\n        return {\n            size: size,\n            global: (dword_entry & 256) === 256,\n            accessed: (dword_entry & 0x20) === 0x20,\n            dirty: (dword_entry & 0x40) === 0x40,\n            cache_disable : (dword_entry & 16) === 16,\n            user : (dword_entry & 4) === 4,\n            read_write : (dword_entry & 2) === 2,\n            address : address >>> 0\n        };\n    }\n\n    function dump_page_directory()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < 1024; i++)\n        {\n            var addr = cpu.cr[3] + 4 * i;\n            var dword = cpu.read32s(addr),\n                entry = load_page_entry(dword, true);\n\n            if(!entry)\n            {\n                continue;\n            }\n\n            var flags = \"\";\n\n            flags += entry.size ? \"S \" : \"  \";\n            flags += entry.accessed ? \"A \" : \"  \";\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\n            flags += entry.user ? \"U \" : \"  \";\n            flags += entry.read_write ? \"Rw \" : \"   \";\n\n            if(entry.size)\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\n                continue;\n            }\n            else\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\n            }\n\n            for(var j = 0; j < 1024; j++)\n            {\n                var sub_addr = entry.address + 4 * j;\n                dword = cpu.read32s(sub_addr);\n\n                var subentry = load_page_entry(dword, false);\n\n                if(subentry)\n                {\n                    flags = \"\";\n\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\n                    flags += subentry.user ? \"U \" : \"  \";\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\n                    flags += subentry.global ? \"G \" : \"  \";\n                    flags += subentry.accessed ? \"A \" : \"  \";\n                    flags += subentry.dirty ? \"Di \" : \"   \";\n\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\n                }\n            }\n        }\n    }\n\n\n    function get_memory_dump(start, count)\n    {\n        if(!DEBUG) return;\n\n        if(start === undefined)\n        {\n            start = 0;\n            count = cpu.memory_size;\n        }\n        else if(count === undefined)\n        {\n            count = start;\n            start = 0;\n        }\n\n        return cpu.mem8.slice(start, start + count).buffer;\n    }\n\n\n    function memory_hex_dump(addr, length)\n    {\n        if(!DEBUG) return;\n\n        length = length || 4 * 0x10;\n        var line, byt;\n\n        for(var i = 0; i < length >> 4; i++)\n        {\n            line = h(addr + (i << 4), 5) + \"   \";\n\n            for(var j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += h(byt, 2) + \" \";\n            }\n\n            line += \"  \";\n\n            for(j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n            }\n\n            dbg_log(line);\n        }\n    }\n\n    function used_memory_dump()\n    {\n        if(!DEBUG) return;\n\n        var width = 0x80,\n            height = 0x10,\n            block_size = cpu.memory_size / width / height | 0,\n            row;\n\n        for(var i = 0; i < height; i++)\n        {\n            row = h(i * width * block_size, 8) + \" | \";\n\n            for(var j = 0; j < width; j++)\n            {\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\n\n                row += used ? \"X\" : \" \";\n            }\n\n            dbg_log(row);\n        }\n    }\n\n\n    debug.debug_interrupt = function(interrupt_nr)\n    {\n        //if(interrupt_nr === 0x20)\n        //{\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\n        //    //var service = \"\";\n        //    //if(vxd_device === 1)\n        //    //{\n        //    //    service = vxd_table1[vxd_sub];\n        //    //}\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\n        //}\n\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\n        //{\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\n        //}\n\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\n        //{\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\n        //}\n\n        //if(interrupt_nr == 0x10)\n        //{\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\n        //    this.debug.dump_regs_short();\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\n        //}\n\n        //if(interrupt_nr === 0x13)\n        //{\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 6)\n        //{\n        //    this.instruction_pointer += 2;\n        //    dbg_log(\"BUG()\", LOG_CPU);\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\n        //    this.instruction_pointer -= 8;\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x80)\n        //{\n        //    dbg_log(\"linux syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x40)\n        //{\n        //    dbg_log(\"kolibri syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n    };\n};\n","\"use strict\";\n\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\n\nconst ELF_MAGIC = 0x464C457F;\n\nlet types = DataView.prototype;\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\nlet pad = function(size)\n{\n    return {\n        size,\n        get: offset => -1,\n    };\n};\n\nlet Header = create_struct([\n    { magic: U32, },\n\n    { class: U8, },\n    { data: U8, },\n    { version0: U8, },\n    { osabi: U8, },\n\n    { abiversion: U8, },\n    { pad0: pad(7) },\n\n    { type: U16, },\n    { machine: U16, },\n\n    { version1: U32, },\n    { entry: U32, },\n    { phoff: U32, },\n    { shoff: U32, },\n    { flags: U32, },\n\n    { ehsize: U16, },\n    { phentsize: U16, },\n    { phnum: U16, },\n    { shentsize: U16, },\n    { shnum: U16, },\n    { shstrndx: U16, },\n]);\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\n\nlet ProgramHeader = create_struct([\n    { type: U32, },\n    { offset: U32, },\n    { vaddr: U32, },\n    { paddr: U32, },\n    { filesz: U32, },\n    { memsz: U32, },\n    { flags: U32, },\n    { align: U32, },\n]);\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\n\nlet SectionHeader = create_struct([\n    { name: U32, },\n    { type: U32, },\n    { flags: U32, },\n    { addr: U32, },\n    { offset: U32, },\n    { size: U32, },\n    { link: U32, },\n    { info: U32, },\n    { addralign: U32, },\n    { entsize: U32, },\n]);\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\n\n\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\nfunction create_struct(struct)\n{\n    return struct.map(function(entry)\n    {\n        let keys = Object.keys(entry);\n        console.assert(keys.length === 1);\n        let name = keys[0];\n        let type = entry[name];\n\n        console.assert(type.size > 0);\n\n        return {\n            name,\n            type,\n            size: type.size,\n            get: type.get,\n            set: type.set,\n        };\n    });\n}\n\n/** @param {ArrayBuffer} buffer */\nfunction read_elf(buffer)\n{\n    let view = new DataView(buffer);\n\n    let [header, offset] = read_struct(view, Header);\n    console.assert(offset === 52);\n\n    if(DEBUG)\n    {\n        for(let key in header)\n        {\n            console.log(key + \": 0x\" + header[key].toString(16));\n        }\n        console.log(header);\n    }\n\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\n    console.assert(header.version0 === 1, \"Bad version0\");\n\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\n    // shared, or core, respectively.\n    console.assert(header.type === 2, \"Unimplemented type\");\n\n    console.assert(header.version1 === 1, \"Bad version1\");\n\n    // these are different in 64 bit\n    console.assert(header.ehsize === 52, \"Bad header size\");\n    console.assert(header.phentsize === 32, \"Bad program header size\");\n    console.assert(header.shentsize === 40, \"Bad section header size\");\n\n    let [program_headers, ph_offset] = read_structs(\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\n        ProgramHeader,\n        header.phnum);\n\n    let [sections_headers, sh_offset] = read_structs(\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\n        SectionHeader,\n        header.shnum);\n\n    if(DEBUG)\n    {\n        console.log(\"%d program headers:\", program_headers.length);\n        for(let program of program_headers)\n        {\n            console.log(\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\n                \"filesz=%s memsz=%s flags=%s align=%s\",\n                program.type.toString(16),\n                program.offset.toString(16),\n                program.vaddr.toString(16),\n                program.paddr.toString(16),\n                program.filesz.toString(16),\n                program.memsz.toString(16),\n                program.flags.toString(16),\n                program.align.toString(16)\n            );\n        }\n\n        console.log(\"%d program headers:\", sections_headers.length);\n        for(let section of sections_headers)\n        {\n            console.log(\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\n                section.name.toString(16),\n                section.type.toString(16),\n                section.flags.toString(16),\n                section.addr.toString(16),\n                section.offset.toString(16),\n                section.size.toString(16),\n                section.link.toString(16),\n                section.info.toString(16),\n                section.addralign.toString(16),\n                section.entsize.toString(16)\n            );\n        }\n    }\n\n    return {\n        header,\n        program_headers,\n        sections_headers,\n    };\n}\n\nfunction read_struct(view, Struct)\n{\n    let result = {};\n    let offset = 0;\n    const LITTLE_ENDIAN = true; // big endian not supported yet\n\n    for(let entry of Struct)\n    {\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\n        console.assert(result[entry.name] === undefined);\n        result[entry.name] = value;\n        offset += entry.size;\n    }\n\n    return [result, offset];\n}\n\nfunction read_structs(view, Struct, count)\n{\n    let result = [];\n    let offset = 0;\n\n    for(var i = 0; i < count; i++)\n    {\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\n        result.push(s);\n        offset += size;\n    }\n\n    return [result, offset];\n}\n\n/** @param {number=} length */\nfunction view_slice(view, offset, length)\n{\n    return new DataView(view.buffer, view.byteOffset + offset, length);\n}\n","// -------------------------------------------------\n// ------------------ Marshall ---------------------\n// -------------------------------------------------\n// helper functions for virtio and 9p.\n\nvar marshall = {};\n\n\n// Inserts data from an array to a byte aligned struct in memory\nmarshall.Marshall = function(typelist, input, struct, offset) {\n    var item;\n    var size = 0;\n    for (var i=0; i < typelist.length; i++) {\n        item = input[i];\n        switch (typelist[i]) {\n            case \"w\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                size += 4;\n                break;\n            case \"d\": // double word\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                size += 8;\n                break;\n            case \"h\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = item >> 8;\n                size += 2;\n                break;\n            case \"b\":\n                struct[offset++] = item;\n                size += 1;\n                break;\n            case \"s\":\n                var lengthoffset = offset;\n                var length = 0;\n                struct[offset++] = 0; // set the length later\n                struct[offset++] = 0;\n                size += 2;\n                for (var j in item) {\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\n                    utf8.forEach( function(c) {\n                        struct[offset++] = c;\n                        size += 1;\n                        length++;\n                    });\n                }\n                struct[lengthoffset+0] = length & 0xFF;\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\n                break;\n            case \"Q\":\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\n                offset += 13;\n                size += 13;\n                break;\n            default:\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return size;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall = function(typelist, struct, offset) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                offset += 4;\n                output.push(val);\n                break;\n            case \"h\":\n                var val = struct[offset++];\n                output.push(val + (struct[offset++] << 8));\n                break;\n            case \"b\":\n                output.push(struct[offset++]);\n                break;\n            case \"s\":\n                var len = struct[offset++];\n                len += struct[offset++] << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(struct[offset++])\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall2 = function(typelist, GetByte) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                GetByte();GetByte();GetByte();GetByte();\n                output.push(val);\n                break;\n            case \"h\":\n                var val = GetByte();\n                output.push(val + (GetByte() << 8));\n                break;\n            case \"b\":\n                output.push(GetByte());\n                break;\n            case \"s\":\n                var len = GetByte();\n                len += GetByte() << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(GetByte())\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n","// -------------------------------------------------\n// ------------------ UTF8 Helpers -----------------\n// -------------------------------------------------\n\n\"use strict\";\n\nvar UTF8 = {}\n\n/** @constructor */\nfunction UTF8StreamToUnicode() {\n\n    this.stream = new Uint8Array(5);\n    this.ofs = 0;\n\n    this.Put = function(key) {\n        this.stream[this.ofs] = key;\n        this.ofs++;\n        switch(this.ofs) {\n            case 1:\n                if (this.stream[0] < 128) {\n                    this.ofs = 0;\n                    return this.stream[0];\n                }\n                break;\n\n            case 2:\n                if ((this.stream[0]&0xE0) == 0xC0)\n                if ((this.stream[1]&0xC0) == 0x80) {\n                    this.ofs = 0;\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\n                }\n                break;\n\n            case 3:\n                break;\n\n            case 4:\n                break;\n\n            default:\n                return -1;\n                //this.ofs = 0;\n                //break;\n        }\n        return -1;\n    }\n}\n\nfunction UnicodeToUTF8Stream(key)\n{\n        if (key < 0x80)  return [key];\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\n}\n\nUTF8.UTF8Length = function(s)\n{\n    var length = 0;\n    for(var i=0; i<s.length; i++) {\n        var c = s.charCodeAt(i);\n        length += c<128?1:2;\n    }\n    return length;\n}\n","\"use strict\";\n\n/** @const */\nvar SHIFT_SCAN_CODE = 0x2A;\n\n/** @const */\nvar SCAN_CODE_RELEASE = 0x80;\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction KeyboardAdapter(bus)\n{\n    var\n        /**\n         * @type {!Object.<boolean>}\n         */\n        keys_pressed = {},\n\n        keyboard = this;\n\n    /**\n     * Set by emulator\n     * @type {boolean}\n     */\n    this.emu_enabled = true;\n\n    /**\n     * Format:\n     * Javascript event.keyCode -> make code\n     * @const\n     */\n    var charmap = new Uint16Array([\n        0, 0, 0, 0,  0, 0, 0, 0,\n        // 0x08: backspace, tab, enter\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\n\n        // 0x10: shift, ctrl, alt, pause, caps lock\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\n\n        // 0x18: escape\n        0, 0, 0, 0x01,  0, 0, 0, 0,\n\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\n\n        // 0x30: numbers\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0A,\n\n        // 0x3B: ;= (firefox only)\n        0, 0x27, 0, 0x0D, 0, 0,\n\n        // 0x40\n        0,\n\n        // 0x41: letters\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\n\n        // 0x5B: Left Win, Right Win, Menu\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\n\n        // 0x60: keypad\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\n\n        // 0x70: F1 to F12\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\n\n        0, 0, 0, 0,\n\n        // 0x80\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0, 0, 0,\n\n        // 0x90: Numlock\n        0x45, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xA0: - (firefox only)\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\n\n        // 0xB0\n        // ,\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\n\n        // 0xC0\n        // `\n        0x29, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xD0\n        // [']\\\n        0, 0, 0, 0,     0, 0, 0, 0,\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\n\n        // 0xE0\n        // Apple key on Gecko, Right alt\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,            0, 0, 0, 0,\n    ]);\n\n\n    /**\n     * ascii -> javascript event code (US layout)\n     * @const\n     */\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192}\n\n    // From:\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\n    // http://stanislavs.org/helppc/make_codes.html\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\n    //\n    // Mapping from event.code to scancode\n    var codemap = {\n        \"Escape\": 0x0001,\n        \"Digit1\": 0x0002,\n        \"Digit2\": 0x0003,\n        \"Digit3\": 0x0004,\n        \"Digit4\": 0x0005,\n        \"Digit5\": 0x0006,\n        \"Digit6\": 0x0007,\n        \"Digit7\": 0x0008,\n        \"Digit8\": 0x0009,\n        \"Digit9\": 0x000a,\n        \"Digit0\": 0x000b,\n        \"Minus\": 0x000c,\n        \"Equal\": 0x000d,\n        \"Backspace\": 0x000e,\n        \"Tab\": 0x000f,\n        \"KeyQ\": 0x0010,\n        \"KeyW\": 0x0011,\n        \"KeyE\": 0x0012,\n        \"KeyR\": 0x0013,\n        \"KeyT\": 0x0014,\n        \"KeyY\": 0x0015,\n        \"KeyU\": 0x0016,\n        \"KeyI\": 0x0017,\n        \"KeyO\": 0x0018,\n        \"KeyP\": 0x0019,\n        \"BracketLeft\": 0x001a,\n        \"BracketRight\": 0x001b,\n        \"Enter\": 0x001c,\n        \"ControlLeft\": 0x001d,\n        \"KeyA\": 0x001e,\n        \"KeyS\": 0x001f,\n        \"KeyD\": 0x0020,\n        \"KeyF\": 0x0021,\n        \"KeyG\": 0x0022,\n        \"KeyH\": 0x0023,\n        \"KeyJ\": 0x0024,\n        \"KeyK\": 0x0025,\n        \"KeyL\": 0x0026,\n        \"Semicolon\": 0x0027,\n        \"Quote\": 0x0028,\n        \"Backquote\": 0x0029,\n        \"ShiftLeft\": 0x002a,\n        \"Backslash\": 0x002b,\n        \"KeyZ\": 0x002c,\n        \"KeyX\": 0x002d,\n        \"KeyC\": 0x002e,\n        \"KeyV\": 0x002f,\n        \"KeyB\": 0x0030,\n        \"KeyN\": 0x0031,\n        \"KeyM\": 0x0032,\n        \"Comma\": 0x0033,\n        \"Period\": 0x0034,\n        \"Slash\": 0x0035,\n        \"ShiftRight\": 0x0036,\n        \"NumpadMultiply\": 0x0037,\n        \"AltLeft\": 0x0038,\n        \"Space\": 0x0039,\n        \"CapsLock\": 0x003a,\n        \"F1\": 0x003b,\n        \"F2\": 0x003c,\n        \"F3\": 0x003d,\n        \"F4\": 0x003e,\n        \"F5\": 0x003f,\n        \"F6\": 0x0040,\n        \"F7\": 0x0041,\n        \"F8\": 0x0042,\n        \"F9\": 0x0043,\n        \"F10\": 0x0044,\n        \"NumLock\": 0x0045,\n        \"ScrollLock\": 0x0046,\n        \"Numpad7\": 0x0047,\n        \"Numpad8\": 0x0048,\n        \"Numpad9\": 0x0049,\n        \"NumpadSubtract\": 0x004a,\n        \"Numpad4\": 0x004b,\n        \"Numpad5\": 0x004c,\n        \"Numpad6\": 0x004d,\n        \"NumpadAdd\": 0x004e,\n        \"Numpad1\": 0x004f,\n        \"Numpad2\": 0x0050,\n        \"Numpad3\": 0x0051,\n        \"Numpad0\": 0x0052,\n        \"NumpadDecimal\": 0x0053,\n        \"IntlBackslash\": 0x0056,\n        \"F11\": 0x0057,\n        \"F12\": 0x0058,\n\n        \"NumpadEnter\": 0xe01c,\n        \"ControlRight\": 0xe01d,\n        \"NumpadDivide\": 0xe035,\n        //\"PrintScreen\": 0x0063,\n        \"AltRight\": 0xe038,\n        \"Home\": 0xe04f,\n        \"ArrowUp\": 0xe048,\n        \"PageUp\": 0xe049,\n        \"ArrowLeft\": 0xe04b,\n        \"ArrowRight\": 0xe04d,\n        \"End\": 0xe04f,\n        \"ArrowDown\": 0xe050,\n        \"PageDown\": 0xe051,\n        \"Insert\": 0xe052,\n        \"Delete\": 0xe053,\n\n        \"OSLeft\": 0xe05b,\n        \"OSRight\": 0xe05c,\n        \"ContextMenu\": 0xe05d,\n    };\n\n    this.bus = bus;\n\n    this.destroy = function()\n    {\n        if(typeof window !== \"undefined\")\n        {\n            window.removeEventListener(\"keyup\", keyup_handler, false);\n            window.removeEventListener(\"keydown\", keydown_handler, false);\n            window.removeEventListener(\"blur\", blur_handler, false);\n        }\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"keyup\", keyup_handler, false);\n        window.addEventListener(\"keydown\", keydown_handler, false);\n        window.addEventListener(\"blur\", blur_handler, false);\n    };\n    this.init();\n\n    this.simulate_press = function(code)\n    {\n        var ev = { keyCode: code };\n        handler(ev, true);\n        handler(ev, false);\n    };\n\n    this.simulate_char = function(chr)\n    {\n        var code = chr.charCodeAt(0);\n\n        if(code in asciimap)\n        {\n            this.simulate_press(asciimap[code]);\n        }\n        else if(code in asciimap_shift)\n        {\n            send_to_controller(SHIFT_SCAN_CODE);\n            this.simulate_press(asciimap_shift[code]);\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\n        }\n        else\n        {\n            console.log(\"ascii -> keyCode not found: \", code, chr);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\n        {\n              // don't prevent opening chromium dev tools\n              // maybe add other important combinations here, too\n              return false;\n        }\n\n        if(!keyboard.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.target)\n        {\n            // className shouldn't be hardcoded here\n            return e.target.className === \"phone_keyboard\" ||\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    function translate(e)\n    {\n        if(e.code !== undefined)\n        {\n            var code = codemap[e.code];\n\n            if(code !== undefined)\n            {\n                return code;\n            }\n        }\n\n        return charmap[e.keyCode];\n    }\n\n    function keyup_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, false);\n    }\n\n    function keydown_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, true);\n    }\n\n    function blur_handler(e)\n    {\n        // trigger keyup for all pressed keys\n        var keys = Object.keys(keys_pressed),\n            key;\n\n        for(var i = 0; i < keys.length; i++)\n        {\n            key = +keys[i];\n\n            if(keys_pressed[key])\n            {\n                handle_code(key, false);\n            }\n        }\n\n        keys_pressed = {};\n    }\n\n    /**\n     * @param {boolean} keydown\n     */\n    function handler(e, keydown)\n    {\n        if(!keyboard.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var code = translate(e);\n\n        if(!code)\n        {\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\n            return;\n        }\n\n        handle_code(code, keydown);\n\n        e.preventDefault && e.preventDefault();\n\n        return false;\n    }\n\n    /**\n     * @param {number} code\n     * @param {boolean} keydown\n     */\n    function handle_code(code, keydown)\n    {\n        if(keydown)\n        {\n            if(keys_pressed[code])\n            {\n                handle_code(code, false);\n            }\n        }\n        else\n        {\n            if(!keys_pressed[code])\n            {\n                // stray keyup\n                return;\n            }\n        }\n\n        keys_pressed[code] = keydown;\n\n        if(!keydown)\n        {\n            code |= 0x80;\n        }\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\n\n        if(code > 0xFF)\n        {\n            // prefix\n            send_to_controller(code >> 8);\n            send_to_controller(code & 0xFF);\n        }\n        else\n        {\n            send_to_controller(code);\n        }\n    }\n\n    function send_to_controller(code)\n    {\n        keyboard.bus.send(\"keyboard-code\", code);\n    }\n}\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction MouseAdapter(bus, screen_container)\n{\n    /** @const */\n    var SPEED_FACTOR = 0.15;\n\n    var left_down = false,\n        right_down = false,\n        middle_down = false,\n\n        last_x = 0,\n        last_y = 0,\n\n        mouse = this;\n\n    // set by controller\n    this.enabled = false;\n\n    // set by emulator\n    this.emu_enabled = true;\n\n    this.bus = bus;\n\n    this.bus.register(\"mouse-enable\", function(enabled)\n    {\n        this.enabled = enabled;\n    }, this);\n\n    this.destroy = function()\n    {\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\n        window.addEventListener(\"touchend\", touch_end_handler, false);\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n    this.init();\n\n    function is_child(child, parent)\n    {\n        while(child.parentNode)\n        {\n            if(child === parent)\n            {\n                return true;\n            }\n            child = child.parentNode;\n        }\n\n        return false;\n    }\n\n    function may_handle(e)\n    {\n        if(!mouse.enabled || !mouse.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\n        {\n            return true;\n        }\n\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\n        {\n            var parent = screen_container || document.body;\n            return is_child(e.target, parent);\n        }\n\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\n    }\n\n    function touch_start_handler(e)\n    {\n        if(may_handle(e))\n        {\n            var touches = e[\"changedTouches\"];\n\n            if(touches && touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n            }\n        }\n    }\n\n    function touch_end_handler(e)\n    {\n        if(left_down || middle_down || right_down)\n        {\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\n            left_down = middle_down = right_down = false;\n        }\n    }\n\n    function mousemove_handler(e)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = 0;\n        var delta_y = 0;\n\n        var touches = e[\"changedTouches\"];\n\n        if(touches)\n        {\n            if(touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                delta_x = touch.clientX - last_x;\n                delta_y = touch.clientY - last_y;\n\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n\n                e.preventDefault();\n            }\n        }\n        else\n        {\n            if(typeof e[\"movementX\"] === \"number\")\n            {\n                delta_x = e[\"movementX\"];\n                delta_y = e[\"movementY\"];\n            }\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\n            {\n                delta_x = e[\"webkitMovementX\"];\n                delta_y = e[\"webkitMovementY\"];\n            }\n            else if(typeof e[\"mozMovementX\"] === \"number\")\n            {\n                delta_x = e[\"mozMovementX\"];\n                delta_y = e[\"mozMovementY\"];\n            }\n            else\n            {\n                // Fallback for other browsers?\n                delta_x = e.clientX - last_x;\n                delta_y = e.clientY - last_y;\n\n                last_x = e.clientX;\n                last_y = e.clientY;\n            }\n        }\n\n        if(SPEED_FACTOR !== 1)\n        {\n            delta_x = delta_x * SPEED_FACTOR;\n            delta_y = delta_y * SPEED_FACTOR;\n        }\n\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\n        //{\n        //    // Large mouse delta, drop?\n        //}\n\n        delta_y = -delta_y;\n\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\n\n        let absolute_x = e.pageX - screen_container.offsetLeft;\n        let absolute_y = e.pageY - screen_container.offsetTop;\n        mouse.bus.send(\"mouse-absolute\", [\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\n    }\n\n    function mousedown_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, true);\n        }\n    }\n\n    function mouseup_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, false);\n        }\n    }\n\n    function click_event(e, down)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(e.which === 1)\n        {\n            left_down = down;\n        }\n        else if(e.which === 2)\n        {\n            middle_down = down;\n        }\n        else if(e.which === 3)\n        {\n            right_down = down;\n        }\n        else\n        {\n            console.log(\"Unknown event.which: \" + e.which);\n        }\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\n    }\n\n    function mousewheel_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = e.wheelDelta || -e.detail;\n        var delta_y = 0;\n\n        if(delta_x < 0)\n        {\n            delta_x = -1;\n        }\n        else if(delta_x > 0)\n        {\n            delta_x = 1;\n        }\n\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\n        e.preventDefault();\n    }\n}\n","\"use strict\";\n\n/**\n * Note: Uses AudioContext.createScriptProcessor, which is deprecated,\n * but which no satisfactory substitute is availble.\n * @constructor\n * @param {BusConnector} bus\n * @suppress {deprecated}\n */\nfunction SpeakerAdapter(bus)\n{\n    if(typeof window === \"undefined\")\n    {\n        return;\n    }\n    if(!window.AudioContext && !window.webkitAudioContext)\n    {\n        console.warn(\"Web browser doesn't support Web Audio API\");\n        return;\n    }\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.audio_context = new (window.AudioContext || window.webkitAudioContext)();\n\n    this.beep_gain = this.audio_context.createGain();\n    this.beep_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\n    this.beep_gain.connect(this.audio_context.destination);\n\n    this.beep_oscillator = this.audio_context.createOscillator();\n    this.beep_oscillator.type = \"square\";\n    this.beep_oscillator.frequency.setValueAtTime(440, this.audio_context.currentTime);\n    this.beep_oscillator.connect(this.beep_gain);\n    this.beep_oscillator.start();\n\n    this.beep_playing = false;\n    this.beep_enable = false;\n    this.beep_frequency = 440;\n    this.pit_enabled = false;\n\n    this.dac_processor = this.audio_context.createScriptProcessor(2048, 0, 2);\n    this.dac_processor.onaudioprocess = this.dac_process.bind(this);\n    this.dac_processor.connect(this.audio_context.destination);\n    this.dac_buffer0 = new Float32Array(this.dac_processor.bufferSize);\n    this.dac_buffer1 = new Float32Array(this.dac_processor.bufferSize);\n    this.dac_enabled = true;\n\n    bus.register(\"pcspeaker-enable\", function(yesplease)\n    {\n        this.beep_enable = yesplease;\n        this.beep_update();\n    }, this);\n\n    bus.register(\"pcspeaker-update\", function(data)\n    {\n        var counter_mode = data[0];\n        var counter_reload = data[1];\n        this.pit_enabled = counter_mode == 3;\n        this.beep_frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\n        this.beep_update();\n    }, this);\n\n    bus.register(\"speaker-update-data\", function(data)\n    {\n        this.dac_buffer0 = data[0];\n        this.dac_buffer1 = data[1];\n    }, this);\n\n    bus.register(\"speaker-request-samplerate\", function()\n    {\n        bus.send(\"speaker-tell-samplerate\", this.audio_context.sampleRate);\n    }, this);\n\n    bus.send(\"speaker-tell-samplerate\", this.audio_context.sampleRate);\n\n    bus.register(\"speaker-update-enable\", function(enabled)\n    {\n        if(this.dac_enabled && !enabled)\n        {\n            this.dac_processor.disconnect(this.audio_context.destination);\n            this.dac_enabled = false;\n        }\n        else if(!this.dac_enabled && enabled)\n        {\n            this.dac_processor.connect(this.audio_context.destination);\n            this.dac_enabled = true;\n        }\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debug_dac = false;\n        this.debug_dac_out = [];\n        window[\"speaker_debug_dac_out\"] = this.debug_dac_out;\n        window[\"speaker_debug_start\"] = () =>\n        {\n            this.debug_dac = true;\n            setTimeout(() =>\n            {\n                this.debug_dac = false;\n            },250);\n        }\n    }\n}\n\nSpeakerAdapter.prototype.beep_update = function()\n{\n    var current_time = this.audio_context.currentTime;\n\n    if(this.pit_enabled && this.beep_enable)\n    {\n        this.beep_oscillator.frequency.setValueAtTime(this.beep_frequency, current_time);\n        if(!this.beep_playing)\n        {\n            this.beep_gain.gain.setValueAtTime(1, current_time);\n            this.beep_playing = true;\n        }\n    }\n    else if(this.beep_playing)\n    {\n        this.beep_gain.gain.setValueAtTime(0, current_time);\n        this.beep_playing = false;\n    }\n};\n\nSpeakerAdapter.prototype.dac_process = function(event)\n{\n    if(!this.dac_enabled)\n    {\n        return;\n    }\n\n    var out = event.outputBuffer;\n\n    out.copyToChannel(this.dac_buffer0, 0);\n    out.copyToChannel(this.dac_buffer1, 1);\n\n    this.bus.send(\"speaker-request-data\", out.length);\n\n    if(DEBUG)\n    {\n        if(this.debug_dac)\n        {\n            this.debug_dac_out.push(event.outputBuffer.getChannelData(0).slice());\n        }\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction SerialAdapter(element, bus)\n{\n    var serial = this;\n\n    this.enabled = true;\n    this.bus = bus;\n    this.text = \"\";\n    this.text_new_line = false;\n\n    this.last_update = 0;\n\n\n    this.bus.register(\"serial0-output-char\", function(chr)\n    {\n        this.show_char(chr);\n    }, this);\n\n\n    this.destroy = function()\n    {\n        element.removeEventListener(\"keypress\", keypress_handler, false);\n        element.removeEventListener(\"keydown\", keydown_handler, false);\n        element.removeEventListener(\"paste\", paste_handler, false);\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\n    };\n\n    this.init = function()\n    {\n        this.destroy();\n\n        element.addEventListener(\"keypress\", keypress_handler, false);\n        element.addEventListener(\"keydown\", keydown_handler, false);\n        element.addEventListener(\"paste\", paste_handler, false);\n        window.addEventListener(\"mousedown\", window_click_handler, false);\n    };\n    this.init();\n\n\n    this.show_char = function(chr)\n    {\n        if(chr === \"\\x08\")\n        {\n            this.text = this.text.slice(0, -1);\n            this.update();\n        }\n        else if(chr === \"\\r\")\n        {\n            // do nothing\n        }\n        else\n        {\n            this.text += chr;\n\n            if(chr === \"\\n\")\n            {\n                this.text_new_line = true;\n            }\n\n            this.update();\n        }\n    };\n\n    this.update = function()\n    {\n        var now = Date.now();\n        var delta = now - this.last_update;\n\n        if(delta < 16)\n        {\n            if(this.update_timer === undefined)\n            {\n                this.update_timer = setTimeout(() => {\n                    this.update_timer = undefined;\n                    var now = Date.now();\n                    dbg_assert(now - this.last_update >= 16);\n                    this.last_update = now;\n                    this.render();\n                }, 16 - delta);\n            }\n        }\n        else\n        {\n            if(this.update_timer !== undefined)\n            {\n                clearTimeout(this.update_timer);\n                this.update_timer = undefined;\n            }\n\n            this.last_update = now;\n            this.render();\n        }\n    };\n\n    this.render = function()\n    {\n        element.value = this.text;\n\n        if(this.text_new_line)\n        {\n            this.text_new_line = false;\n            element.scrollTop = 1e9;\n        }\n    }\n\n    /**\n     * @param {number} chr_code\n     */\n    this.send_char = function(chr_code)\n    {\n        if(serial.bus)\n        {\n            serial.bus.send(\"serial0-input\", chr_code);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(!serial.enabled)\n        {\n            return false;\n        }\n\n        // Something here?\n\n        return true;\n    }\n\n    function keypress_handler(e)\n    {\n        if(!serial.bus)\n        {\n            return;\n        }\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var chr = e.which;\n\n        serial.send_char(chr);\n        e.preventDefault();\n    }\n\n    function keydown_handler(e)\n    {\n        var chr = e.which;\n\n        if(chr === 8)\n        {\n            // supress backspace\n            serial.send_char(127);\n            e.preventDefault();\n        }\n        else if(chr === 9)\n        {\n            // tab\n            serial.send_char(9);\n            e.preventDefault();\n        }\n    }\n\n    function paste_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var data = e.clipboardData.getData(\"text/plain\");\n\n        for(var i = 0; i < data.length; i++)\n        {\n            serial.send_char(data.charCodeAt(i));\n        }\n\n        e.preventDefault();\n    }\n\n    function window_click_handler(e)\n    {\n        if(e.target !== element)\n        {\n            element.blur();\n        }\n    }\n}\n","\"use strict\";\n\n/**\n * An ethernet-through-websocket adapter, to be used with\n *     https://github.com/benjamincburns/websockproxy\n *\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\n *\n * @constructor\n *\n * @param {string} url\n * @param {BusConnector} bus\n */\nfunction NetworkAdapter(url, bus)\n{\n    this.send_data = function(x) {};\n\n    this.bus = bus;\n    this.socket = undefined;\n\n    // TODO: circular buffer?\n    this.send_queue = [];\n    this.url = url;\n\n    this.reconnect_interval = 10000;\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\n    this.send_queue_limit = 64;\n\n    this.bus.register(\"net0-send\", function(data)\n    {\n        this.send(data);\n    }, this);\n}\n\nNetworkAdapter.prototype.handle_message = function(e)\n{\n    if(this.bus)\n    {\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\n    }\n};\n\nNetworkAdapter.prototype.handle_close = function(e)\n{\n    //console.log(\"onclose\", e);\n\n    this.connect();\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\n};\n\nNetworkAdapter.prototype.handle_open = function(e)\n{\n    //console.log(\"open\", e);\n\n    for(var i = 0; i < this.send_queue.length; i++)\n    {\n        this.send(this.send_queue[i]);\n    }\n\n    this.send_queue = [];\n};\n\nNetworkAdapter.prototype.handle_error = function(e)\n{\n    //console.log(\"onerror\", e);\n};\n\nNetworkAdapter.prototype.destroy = function()\n{\n    if(this.socket)\n    {\n        this.socket.close();\n    }\n};\n\nNetworkAdapter.prototype.connect = function()\n{\n    if(this.socket)\n    {\n        var state = this.socket.readyState;\n\n        if(state === 0 || state === 1)\n        {\n            // already or almost there\n            return;\n        }\n    }\n\n    var now = Date.now();\n\n    if(this.last_connect_attempt + this.reconnect_interval > now)\n    {\n        return;\n    }\n\n    this.last_connect_attempt = Date.now();\n\n    try\n    {\n        this.socket = new WebSocket(this.url);\n    }\n    catch(e)\n    {\n        this.handle_close(undefined);\n        return;\n    }\n\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = this.handle_open.bind(this);;\n    this.socket.onmessage = this.handle_message.bind(this);\n    this.socket.onclose = this.handle_close.bind(this);\n    this.socket.onerror = this.handle_error.bind(this);\n};\n\nNetworkAdapter.prototype.send = function(data)\n{\n    //console.log(\"send\", data);\n\n    if(!this.socket || this.socket.readyState !== 1)\n    {\n        this.send_queue.push(data);\n\n        if(this.send_queue.length > 2 * this.send_queue_limit)\n        {\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\n        }\n\n        this.connect();\n    }\n    else\n    {\n        this.socket.send(data);\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar ASYNC_SAFE = false;\n\n(function()\n{\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        v86util.load_file = load_file_nodejs;\n    }\n    else\n    {\n        v86util.load_file = load_file;\n    }\n\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\n    v86util.SyncFileBuffer = SyncFileBuffer;\n\n    /**\n     * @param {string} filename\n     * @param {Object} options\n     */\n    function load_file(filename, options)\n    {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method || \"get\", filename, true);\n\n        if(!options.as_text)\n        {\n            http.responseType = \"arraybuffer\";\n        }\n\n        if(options.headers)\n        {\n            var header_names = Object.keys(options.headers);\n\n            for(var i = 0; i < header_names.length; i++)\n            {\n                var name = header_names[i];\n                http.setRequestHeader(name, options.headers[name]);\n            }\n        }\n\n        if(options.range)\n        {\n            let start = options.range.start;\n            let end = start + options.range.length - 1;\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\n        }\n\n        http.onload = function(e)\n        {\n            if(http.readyState === 4)\n            {\n                if(http.status !== 200 && http.status !== 206)\n                {\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\n                }\n                else if(http.response)\n                {\n                    options.done && options.done(http.response, http);\n                }\n            }\n        };\n\n        if(options.progress)\n        {\n            http.onprogress = function(e)\n            {\n                options.progress(e);\n            };\n        }\n\n        http.send(null);\n    }\n\n    function load_file_nodejs(filename, options)\n    {\n        let fs = require(\"fs\");\n\n        if(options.range)\n        {\n            dbg_assert(!options.as_text);\n\n            fs[\"open\"](filename, \"r\", (err, fd) =>\n            {\n                if(err) throw err;\n\n                let length = options.range.length;\n                var buffer = new global[\"Buffer\"](length);\n\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\n                {\n                    if(err) throw err;\n\n                    dbg_assert(bytes_read === length);\n                    options.done && options.done(new Uint8Array(buffer));\n\n                    fs[\"close\"](fd, (err) => {\n                        if(err) throw err;\n                    });\n                });\n            });\n        }\n        else\n        {\n            var o = {\n                encoding: options.as_text ? \"utf-8\" : null,\n            };\n\n            fs[\"readFile\"](filename, o, function(err, data)\n            {\n                if(err)\n                {\n                    console.log(\"Could not read file:\", filename, err);\n                }\n                else\n                {\n                    var result = data;\n\n                    if(!options.as_text)\n                    {\n                        result = new Uint8Array(result).buffer;\n                    }\n\n                    options.done(result);\n                }\n            });\n        }\n    }\n\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        var determine_size = function(path, cb)\n        {\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\n            {\n                if(err)\n                {\n                    cb(err);\n                }\n                else\n                {\n                    cb(null, stats.size);\n                }\n            });\n        };\n    }\n    else\n    {\n        var determine_size = function(url, cb)\n        {\n            v86util.load_file(url, {\n                done: (buffer, http) =>\n                {\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\n                    var match = header.match(/\\/(\\d+)\\s*$/);\n\n                    if(match)\n                    {\n                        cb(null, +match[1]);\n                    }\n                    else\n                    {\n                        cb({ header });\n                    }\n                },\n                headers: {\n                    Range: \"bytes=0-0\",\n\n                    //\"Accept-Encoding\": \"\",\n\n                    // Added by Chromium, but can cause the whole file to be sent\n                    // Settings this to empty also causes problems and Chromium\n                    // doesn't seem to create this header any more\n                    //\"If-Range\": \"\",\n                }\n            });\n        };\n    }\n\n    /**\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\n     * using the `Range: bytes=...` header\n     *\n     * @constructor\n     * @param {string} filename Name of the file to download\n     * @param {number|undefined} size\n     */\n    function AsyncXHRBuffer(filename, size)\n    {\n        this.filename = filename;\n\n        /** @const */\n        this.block_size = 256;\n        this.byteLength = size;\n\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncXHRBuffer.prototype.load = function()\n    {\n        if(this.byteLength !== undefined)\n        {\n            this.onload && this.onload({});\n            return;\n        }\n\n        // Determine the size using a request\n\n        determine_size(this.filename, (error, size) =>\n        {\n            if(error)\n            {\n                console.assert(false,\n                    \"Cannot use: \" + this.filename + \". \" +\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\n            }\n            else\n            {\n                dbg_assert(size >= 0);\n                this.byteLength = size;\n                this.onload && this.onload({});\n            }\n        });\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\n    {\n        var number_of_blocks = len / this.block_size;\n        var block_index = offset / this.block_size;\n\n        for(var i = 0; i < number_of_blocks; i++)\n        {\n            var block = this.loaded_blocks[block_index + i];\n\n            if(!block)\n            {\n                return;\n            }\n        }\n\n        if(number_of_blocks === 1)\n        {\n            return this.loaded_blocks[block_index];\n        }\n        else\n        {\n            var result = new Uint8Array(len);\n            for(var i = 0; i < number_of_blocks; i++)\n            {\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset + len <= this.byteLength);\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            if(ASYNC_SAFE)\n            {\n                setTimeout(fn.bind(this, block), 0);\n            }\n            else\n            {\n                fn(block);\n            }\n            return;\n        }\n\n        v86util.load_file(this.filename, {\n            done: function done(buffer)\n            {\n                var block = new Uint8Array(buffer);\n                this.handle_read(offset, len, block);\n                fn(block);\n            }.bind(this),\n            range: { start: offset, length: len },\n        });\n    };\n\n    /**\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\n     *\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     *\n     * @param {number} start\n     * @param {!Uint8Array} data\n     * @param {function()} fn\n     */\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\n    {\n        console.assert(start + data.byteLength <= this.byteLength);\n\n        var len = data.length;\n\n        console.assert(start % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var start_block = start / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var block = this.loaded_blocks[start_block + i];\n\n            if(block === undefined)\n            {\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            }\n\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\n            block.set(data_slice);\n\n            console.assert(block.byteLength === data_slice.length);\n        }\n\n        fn();\n    };\n\n    /**\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     * @param {number} offset\n     * @param {number} len\n     * @param {!Uint8Array} block\n     */\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\n    {\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\n        // Overwrites blocks from the original source that have been written since\n\n        var start_block = offset / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var written_block = this.loaded_blocks[start_block + i];\n\n            if(written_block)\n            {\n                block.set(written_block, i * this.block_size);\n            }\n            //else\n            //{\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\n            //}\n        }\n    };\n\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must download all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\n    {\n        var count = 0;\n        for(var _ in this.loaded_blocks)\n        {\n            count++;\n        }\n\n        var buffer = new Uint8Array(count * this.block_size);\n        var indices = [];\n\n        var i = 0;\n        for(var index in this.loaded_blocks)\n        {\n            var block = this.loaded_blocks[index];\n            dbg_assert(block.length === this.block_size);\n            index = +index;\n            indices.push(index);\n            buffer.set(\n                block,\n                i * this.block_size\n            );\n            i++;\n        }\n\n        return {\n            buffer,\n            indices,\n            block_size: this.block_size,\n        };\n    };\n\n    /**\n     * Synchronous access to File, loading blocks from the input type=file\n     * The whole file is loaded into memory during initialisation\n     *\n     * @constructor\n     */\n    function SyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        if(file.size > (1 << 30))\n        {\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\n        }\n\n        this.buffer = new ArrayBuffer(file.size);\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    SyncFileBuffer.prototype.load = function()\n    {\n        this.load_next(0);\n    };\n\n    /**\n     * @param {number} start\n     */\n    SyncFileBuffer.prototype.load_next = function(start)\n    {\n        /** @const */\n        var PART_SIZE = 4 << 20;\n\n        var filereader = new FileReader();\n\n        filereader.onload = function(e)\n        {\n            var buffer = new Uint8Array(e.target.result);\n            new Uint8Array(this.buffer, start).set(buffer);\n            this.load_next(start + PART_SIZE);\n        }.bind(this);\n\n        if(this.onprogress)\n        {\n            this.onprogress({\n                loaded: start,\n                total: this.byteLength,\n                lengthComputable: true,\n            });\n        }\n\n        if(start < this.byteLength)\n        {\n            var end = Math.min(start + PART_SIZE, this.byteLength);\n            var slice = this.file.slice(start, end);\n            filereader.readAsArrayBuffer(slice);\n        }\n        else\n        {\n            this.file = undefined;\n            this.onload && this.onload({ buffer: this.buffer });\n        }\n    };\n\n    /**\n     * @param {number} start\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    SyncFileBuffer.prototype.get = function(start, len, fn)\n    {\n        console.assert(start + len <= this.byteLength);\n        fn(new Uint8Array(this.buffer, start, len));\n    };\n\n    /**\n     * @param {number} offset\n     * @param {!Uint8Array} slice\n     * @param {function()} fn\n     */\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\n    {\n        console.assert(offset + slice.byteLength <= this.byteLength);\n\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\n        fn();\n    };\n\n    SyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        fn(this.buffer);\n    };\n\n    /**\n     * Asynchronous access to File, loading blocks from the input type=file\n     *\n     * @constructor\n     */\n    function AsyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        /** @const */\n        this.block_size = 256;\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncFileBuffer.prototype.load = function()\n    {\n        this.onload && this.onload({});\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            fn(block);\n            return;\n        }\n\n        var fr = new FileReader();\n\n        fr.onload = function(e)\n        {\n            var buffer = e.target.result;\n            var block = new Uint8Array(buffer);\n\n            this.handle_read(offset, len, block);\n            fn(block);\n        }.bind(this);\n\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\n    };\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\n\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must load all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncFileBuffer.prototype.get_as_file = function(name)\n    {\n        var parts = [];\n        var existing_blocks = Object.keys(this.loaded_blocks)\n                                .map(Number)\n                                .sort(function(x, y) { return x - y; });\n\n        var current_offset = 0;\n\n        for(var i = 0; i < existing_blocks.length; i++)\n        {\n            var block_index = existing_blocks[i];\n            var block = this.loaded_blocks[block_index];\n            var start = block_index * this.block_size;\n            console.assert(start >= current_offset);\n\n            if(start !== current_offset)\n            {\n                parts.push(this.file.slice(current_offset, start));\n                current_offset = start;\n            }\n\n            parts.push(block);\n            current_offset += block.length;\n        }\n\n        if(current_offset !== this.file.size)\n        {\n            parts.push(this.file.slice(current_offset));\n        }\n\n        var file = new File(parts, name);\n        console.assert(file.size === this.file.size);\n\n        return file;\n    };\n\n})();\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction DummyScreenAdapter(bus)\n{\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-text-scroll\", function(rows)\n    {\n        console.log(\"scroll\", rows);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n        }\n    };\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n    };\n\n    this.clear_screen = function()\n    {\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_buffer = new Uint8Array(4 * width * height);\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n    };\n\n    this.update_cursor_scanline = function(start, end)\n    {\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n    };\n\n    this.get_text_screen = function()\n    {\n        var screen = [];\n\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            screen.push(this.get_text_row(i));\n        }\n\n        return screen;\n    };\n\n    this.get_text_row = function(i)\n    {\n        var row = \"\";\n        var offset = 3 * i * text_mode_width;\n\n        for(var j = 0; j < text_mode_width; j++)\n        {\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\n        }\n\n        return row;\n    };\n}\n"],
"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","$jscomp.iteratorFromArray","Virtio9p","filesystem","bus","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","Uint8Array","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","Math","floor","total_size","inodes","length","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","bind","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","data","i","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_SIZE","ChangeSize","offset","count","FID_XATTR","caps","file","send","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","number_as_color","n","toString","Array","join","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","position","backgroundColor","display","register","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","open","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","fillStyle","fillRect","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","buffer_width","buffer_height","createImageData","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","min","marginTop","this.update_cursor","this.text_update_row","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","forEach","layer","putImageData","screen_x","buffer_x","screen_y","buffer_y","dump_file","ab","download","blob","Blob","file_or_blob","a","href","URL","createObjectURL","dataset","createEvent","ev","initMouseEvent","dispatchEvent","click","revokeObjectURL","get_query_arguments","query","location","search","substr","split","parameters","param","decodeURIComponent","chr_repeat","result","$","getElementById","el","onload","start_profile","infos","title","settings","initial_state","fda","cdrom","hda","multiboot","memory_size","vga_memory_size","undefined","boot_order","description","innerHTML","start_emulation","done","emulator","query_args","setTimeout","keyboard_send_text","XMLHttpRequest","onclick","set_profile","floppy_file","files","last_file","cd_file","hd_file","multiboot_file","oses","HOST","ON_LOCALHOST","ON_HTTPS","OTHER_HOST","profile","use_bochs_bios","element","blur","parseInt","alert","MB","value","biosfile","vgabiosfile","bios","BIOSPATH","vga_bios","V86Starter","add_listener","init_ui","file_index","file_count","loaded","total","line","per100","max","per50","progress_ticks","file_name","update_info","now","instruction_counter","get_instruction_counter","last_ips","last_instr_counter","delta_time","last_tick","running_time","time","v86util.pad0","add_image_download_button","obj","elem.onclick","disk_images","filename","get_as_file","get_buffer","b","ctrl_w_rescue","ctrlKey","onbeforeunload","window.onbeforeunload","init_filesystem_panel","cpu_is_running","stop","run","pathname","mouse_is_enabled","lock_mouse","mouse_adapter","emu_enabled","interval","os_uses_mouse","setInterval","clearInterval","args","read","write","read_sectors","write_sectors","bytes_received","bytes_transmitted","is_enabled","restart","hdb","fdb","v86","cpu","mem8","save_state","error","log","stack","onchange","was_running","filereader","FileReader","filereader.onload","restore_state","target","err","readAsArrayBuffer","keyboard_send_scancodes","parseFloat","screen_set_scale","screen_go_fullscreen","getSelection","isCollapsed","phone_keyboard","getElementsByClassName","top","body","scrollTop","left","scrollLeft","focus","setAttribute","tabIndex","addEventListener","screen_make_screenshot","call","loader","v86util.SyncFileBuffer","loader.onload","create_file","load","onkeypress","which","disabled","read_file","uint8array","replace","onpopstate","reload","prof","history","pushState","hostname","endsWith","protocol","readyState","IO","ports","create_empty_entry","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","stopped","running","CPU","register_tick","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","v86.microtick","hlt_loop","devices","pit","rtc","handle_irqs","t","TIME_PER_FRAME","run_hardware_timers","do_run","do_many_cycles","dt","next_tick","v86.prototype.stop","v86.prototype.restart","reset","load_bios","v86.prototype.init","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","source","v86.prototype","hidden","v86.prototype.save_state","v86.prototype.restore_state","performance","str","len","h","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","SyncBuffer.prototype.get_buffer","int_log2_table","v86util.int_log2_byte","x","v86util.int_log2","tt","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","y","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","FPU.prototype.integer_round","rc","rounded","round","ceil","FPU.prototype.truncate","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","IDEInterface.prototype.read_data","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","VGA_MIN_MEMORY_SIZE","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","min_y","addr_shift","vga_addr_shift_count","addr_substitution","shift_mode","pel_width","pixel_addr","byte0","plane0","byte1","plane1","byte2","plane2","byte3","plane3","shift_loads","pixel_buffer","mask","colorset","color256","update_vertical_retrace","vga_memory","VGA_BANK_SIZE","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","me","vga_memory_read","memory_space_select","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","plane_dword","apply_logical","plane_select","vga_addr_to_pixel","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","reading","plane","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_logical","data_dword","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.complete_replot","VGAScreen.prototype.destroy","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","bytes_per_line","vga_bytes_per_line","scan_line_to_screen_row","available_bytes","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","mouse_buffer","code","kbd_send_code","kbd_irq","mouse_send_click","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","mouse_irq","PS2.prototype.port60_read","next_byte_is_aux","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","MAGIC_CPU_EXCEPTION","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","RTC.prototype.encode_time","digit","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","StateLoadError","msg","message","Error","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","info","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","receive","cr","rxcr","memory","curpg","total_length","packet_length","data_start","next","cut","START_RX_PAGE","pstop","pstart","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","tsr","mac","random","rsar","START_PAGE","STOP_PAGE","boundary","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","lower_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","FM_HANDLERS","SB16","cpu_paused","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_unhandled_registers","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dac_rate_ratio","dac_process_samples","SB_DMA_BLOCK_SAMPLES","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","audio_samplerate","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","rate","audio_send","reset_dsp","SB16.prototype.reset_dsp","DSP_NO_COMMAND","fill","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_default_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_default_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_default_read","SB16.prototype.mixer_default_write","register_mixer_read","register_mixer_write","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB16.prototype.dma_on_unmask","dma_transfer_next","SB16.prototype.dma_transfer_next","samples","dma_to_dac","SB16.prototype.dma_to_dac","sample_count","repeats","sample","SB16.prototype.audio_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","mul32_result","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","apic","acpi","hpet","ps2","uart","fdc","net","pic","sb16","ioapic","CPU.prototype.set_state","full_clear_tlb","exception_cleanup","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","ide_device_count","enable_ne2k","fs9p","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","$jscomp.makeIterator","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.do_many_cycles","do_many_cycles_unsafe","CPU.prototype.do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","dpl","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","reg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","src","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.do_mul32","a00","a16","b00","b16","low_result","high_result","CPU.prototype.do_imul32","is_neg","do_mul32","CPU.prototype.imul_reg32","do_imul32","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","v","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","st0","fcom","sti","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","integer_round","truncate","fucom","int32","invalid_arithmatic","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","show","neg","target_operand","result_mod","do_div32","dest_operand_low","dest_operand_high","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","new_tick","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","write_mmx64s","source16","destination16","read_mmx_mem64s","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","debug.show","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","s","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","FS","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","path","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","substring","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","FS.prototype.PrepareCAPs","url","OnSuccess","OnError","responseType","onreadystatechange","req.onreadystatechange","arrayBuffer","response","require","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put","key","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","keydown","keyboard","shiftKey","keyCode","className","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","removeEventListener","simulate_press","this.simulate_press","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","mousewheel_handler","wheelDelta","detail","SpeakerAdapter","AudioContext","webkitAudioContext","audio_context","beep_gain","createGain","gain","setValueAtTime","currentTime","connect","beep_oscillator","createOscillator","frequency","beep_enable","beep_playing","beep_frequency","pit_enabled","dac_processor","createScriptProcessor","onaudioprocess","dac_process","dac_buffer0","bufferSize","dac_buffer1","dac_enabled","beep_update","sampleRate","disconnect","warn","SpeakerAdapter.prototype.beep_update","current_time","SpeakerAdapter.prototype.dac_process","event","out","outputBuffer","copyToChannel","SerialAdapter","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","text_new_line","show_char","this.show_char","update","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onmessage","onclose","onerror","NetworkAdapter.prototype.send","load_file","options","http","method","as_text","headers","header_names","setRequestHeader","range","http.onload","progress","onprogress","http.onprogress","load_file_nodejs","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","determine_size","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","PART_SIZE","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.get_as_file","parts","existing_blocks","Number","sort","current_offset","File","put_on_settings","fs9p_json","add_file","files_to_load","loadable","async","OnJSONLoaded","adapter_bus","emulator_bus","keyboard_adapter","screen_adapter","DummyScreenAdapter","image_names","fs_url","base_url","starter","lengthComputable","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","V86Starter.prototype.keyboard_send_text","string","V86Starter.prototype.screen_make_screenshot","V86Starter.prototype.screen_set_scale","sx","sy","V86Starter.prototype.screen_go_fullscreen","focus_element","V86Starter.prototype.lock_mouse","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","V86Starter.prototype.read_file","graphic_buffer"]
}
